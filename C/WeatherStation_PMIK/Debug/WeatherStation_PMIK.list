
WeatherStation_PMIK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007028  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  080071b8  080071b8  000171b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080072d0  080072d0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080072d0  080072d0  000172d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080072d8  080072d8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080072d8  080072d8  000172d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080072dc  080072dc  000172dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080072e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000024c  20000070  08007350  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200002bc  08007350  000202bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019e33  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035cf  00000000  00000000  00039ed3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013d8  00000000  00000000  0003d4a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001250  00000000  00000000  0003e880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028f55  00000000  00000000  0003fad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018976  00000000  00000000  00068a25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f5bd9  00000000  00000000  0008139b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00176f74  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000573c  00000000  00000000  00176fc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080071a0 	.word	0x080071a0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080071a0 	.word	0x080071a0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2iz>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b24:	d215      	bcs.n	8000b52 <__aeabi_d2iz+0x36>
 8000b26:	d511      	bpl.n	8000b4c <__aeabi_d2iz+0x30>
 8000b28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d912      	bls.n	8000b58 <__aeabi_d2iz+0x3c>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b42:	fa23 f002 	lsr.w	r0, r3, r2
 8000b46:	bf18      	it	ne
 8000b48:	4240      	negne	r0, r0
 8000b4a:	4770      	bx	lr
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b56:	d105      	bne.n	8000b64 <__aeabi_d2iz+0x48>
 8000b58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	bf08      	it	eq
 8000b5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_uldivmod>:
 8000b6c:	b953      	cbnz	r3, 8000b84 <__aeabi_uldivmod+0x18>
 8000b6e:	b94a      	cbnz	r2, 8000b84 <__aeabi_uldivmod+0x18>
 8000b70:	2900      	cmp	r1, #0
 8000b72:	bf08      	it	eq
 8000b74:	2800      	cmpeq	r0, #0
 8000b76:	bf1c      	itt	ne
 8000b78:	f04f 31ff 	movne.w	r1, #4294967295
 8000b7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b80:	f000 b96e 	b.w	8000e60 <__aeabi_idiv0>
 8000b84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b8c:	f000 f806 	bl	8000b9c <__udivmoddi4>
 8000b90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b98:	b004      	add	sp, #16
 8000b9a:	4770      	bx	lr

08000b9c <__udivmoddi4>:
 8000b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba0:	9d08      	ldr	r5, [sp, #32]
 8000ba2:	4604      	mov	r4, r0
 8000ba4:	468c      	mov	ip, r1
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	f040 8083 	bne.w	8000cb2 <__udivmoddi4+0x116>
 8000bac:	428a      	cmp	r2, r1
 8000bae:	4617      	mov	r7, r2
 8000bb0:	d947      	bls.n	8000c42 <__udivmoddi4+0xa6>
 8000bb2:	fab2 f282 	clz	r2, r2
 8000bb6:	b142      	cbz	r2, 8000bca <__udivmoddi4+0x2e>
 8000bb8:	f1c2 0020 	rsb	r0, r2, #32
 8000bbc:	fa24 f000 	lsr.w	r0, r4, r0
 8000bc0:	4091      	lsls	r1, r2
 8000bc2:	4097      	lsls	r7, r2
 8000bc4:	ea40 0c01 	orr.w	ip, r0, r1
 8000bc8:	4094      	lsls	r4, r2
 8000bca:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bce:	0c23      	lsrs	r3, r4, #16
 8000bd0:	fbbc f6f8 	udiv	r6, ip, r8
 8000bd4:	fa1f fe87 	uxth.w	lr, r7
 8000bd8:	fb08 c116 	mls	r1, r8, r6, ip
 8000bdc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000be0:	fb06 f10e 	mul.w	r1, r6, lr
 8000be4:	4299      	cmp	r1, r3
 8000be6:	d909      	bls.n	8000bfc <__udivmoddi4+0x60>
 8000be8:	18fb      	adds	r3, r7, r3
 8000bea:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bee:	f080 8119 	bcs.w	8000e24 <__udivmoddi4+0x288>
 8000bf2:	4299      	cmp	r1, r3
 8000bf4:	f240 8116 	bls.w	8000e24 <__udivmoddi4+0x288>
 8000bf8:	3e02      	subs	r6, #2
 8000bfa:	443b      	add	r3, r7
 8000bfc:	1a5b      	subs	r3, r3, r1
 8000bfe:	b2a4      	uxth	r4, r4
 8000c00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c04:	fb08 3310 	mls	r3, r8, r0, r3
 8000c08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c10:	45a6      	cmp	lr, r4
 8000c12:	d909      	bls.n	8000c28 <__udivmoddi4+0x8c>
 8000c14:	193c      	adds	r4, r7, r4
 8000c16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c1a:	f080 8105 	bcs.w	8000e28 <__udivmoddi4+0x28c>
 8000c1e:	45a6      	cmp	lr, r4
 8000c20:	f240 8102 	bls.w	8000e28 <__udivmoddi4+0x28c>
 8000c24:	3802      	subs	r0, #2
 8000c26:	443c      	add	r4, r7
 8000c28:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c2c:	eba4 040e 	sub.w	r4, r4, lr
 8000c30:	2600      	movs	r6, #0
 8000c32:	b11d      	cbz	r5, 8000c3c <__udivmoddi4+0xa0>
 8000c34:	40d4      	lsrs	r4, r2
 8000c36:	2300      	movs	r3, #0
 8000c38:	e9c5 4300 	strd	r4, r3, [r5]
 8000c3c:	4631      	mov	r1, r6
 8000c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c42:	b902      	cbnz	r2, 8000c46 <__udivmoddi4+0xaa>
 8000c44:	deff      	udf	#255	; 0xff
 8000c46:	fab2 f282 	clz	r2, r2
 8000c4a:	2a00      	cmp	r2, #0
 8000c4c:	d150      	bne.n	8000cf0 <__udivmoddi4+0x154>
 8000c4e:	1bcb      	subs	r3, r1, r7
 8000c50:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c54:	fa1f f887 	uxth.w	r8, r7
 8000c58:	2601      	movs	r6, #1
 8000c5a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c5e:	0c21      	lsrs	r1, r4, #16
 8000c60:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c68:	fb08 f30c 	mul.w	r3, r8, ip
 8000c6c:	428b      	cmp	r3, r1
 8000c6e:	d907      	bls.n	8000c80 <__udivmoddi4+0xe4>
 8000c70:	1879      	adds	r1, r7, r1
 8000c72:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c76:	d202      	bcs.n	8000c7e <__udivmoddi4+0xe2>
 8000c78:	428b      	cmp	r3, r1
 8000c7a:	f200 80e9 	bhi.w	8000e50 <__udivmoddi4+0x2b4>
 8000c7e:	4684      	mov	ip, r0
 8000c80:	1ac9      	subs	r1, r1, r3
 8000c82:	b2a3      	uxth	r3, r4
 8000c84:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c88:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c8c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c90:	fb08 f800 	mul.w	r8, r8, r0
 8000c94:	45a0      	cmp	r8, r4
 8000c96:	d907      	bls.n	8000ca8 <__udivmoddi4+0x10c>
 8000c98:	193c      	adds	r4, r7, r4
 8000c9a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9e:	d202      	bcs.n	8000ca6 <__udivmoddi4+0x10a>
 8000ca0:	45a0      	cmp	r8, r4
 8000ca2:	f200 80d9 	bhi.w	8000e58 <__udivmoddi4+0x2bc>
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	eba4 0408 	sub.w	r4, r4, r8
 8000cac:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cb0:	e7bf      	b.n	8000c32 <__udivmoddi4+0x96>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0x12e>
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	f000 80b1 	beq.w	8000e1e <__udivmoddi4+0x282>
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	4631      	mov	r1, r6
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	fab3 f683 	clz	r6, r3
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	d14a      	bne.n	8000d68 <__udivmoddi4+0x1cc>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0x140>
 8000cd6:	4282      	cmp	r2, r0
 8000cd8:	f200 80b8 	bhi.w	8000e4c <__udivmoddi4+0x2b0>
 8000cdc:	1a84      	subs	r4, r0, r2
 8000cde:	eb61 0103 	sbc.w	r1, r1, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	468c      	mov	ip, r1
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	d0a8      	beq.n	8000c3c <__udivmoddi4+0xa0>
 8000cea:	e9c5 4c00 	strd	r4, ip, [r5]
 8000cee:	e7a5      	b.n	8000c3c <__udivmoddi4+0xa0>
 8000cf0:	f1c2 0320 	rsb	r3, r2, #32
 8000cf4:	fa20 f603 	lsr.w	r6, r0, r3
 8000cf8:	4097      	lsls	r7, r2
 8000cfa:	fa01 f002 	lsl.w	r0, r1, r2
 8000cfe:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d02:	40d9      	lsrs	r1, r3
 8000d04:	4330      	orrs	r0, r6
 8000d06:	0c03      	lsrs	r3, r0, #16
 8000d08:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d0c:	fa1f f887 	uxth.w	r8, r7
 8000d10:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d18:	fb06 f108 	mul.w	r1, r6, r8
 8000d1c:	4299      	cmp	r1, r3
 8000d1e:	fa04 f402 	lsl.w	r4, r4, r2
 8000d22:	d909      	bls.n	8000d38 <__udivmoddi4+0x19c>
 8000d24:	18fb      	adds	r3, r7, r3
 8000d26:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d2a:	f080 808d 	bcs.w	8000e48 <__udivmoddi4+0x2ac>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 808a 	bls.w	8000e48 <__udivmoddi4+0x2ac>
 8000d34:	3e02      	subs	r6, #2
 8000d36:	443b      	add	r3, r7
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b281      	uxth	r1, r0
 8000d3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d48:	fb00 f308 	mul.w	r3, r0, r8
 8000d4c:	428b      	cmp	r3, r1
 8000d4e:	d907      	bls.n	8000d60 <__udivmoddi4+0x1c4>
 8000d50:	1879      	adds	r1, r7, r1
 8000d52:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d56:	d273      	bcs.n	8000e40 <__udivmoddi4+0x2a4>
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d971      	bls.n	8000e40 <__udivmoddi4+0x2a4>
 8000d5c:	3802      	subs	r0, #2
 8000d5e:	4439      	add	r1, r7
 8000d60:	1acb      	subs	r3, r1, r3
 8000d62:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d66:	e778      	b.n	8000c5a <__udivmoddi4+0xbe>
 8000d68:	f1c6 0c20 	rsb	ip, r6, #32
 8000d6c:	fa03 f406 	lsl.w	r4, r3, r6
 8000d70:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d74:	431c      	orrs	r4, r3
 8000d76:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d7e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d82:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d86:	431f      	orrs	r7, r3
 8000d88:	0c3b      	lsrs	r3, r7, #16
 8000d8a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d8e:	fa1f f884 	uxth.w	r8, r4
 8000d92:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d96:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d9a:	fb09 fa08 	mul.w	sl, r9, r8
 8000d9e:	458a      	cmp	sl, r1
 8000da0:	fa02 f206 	lsl.w	r2, r2, r6
 8000da4:	fa00 f306 	lsl.w	r3, r0, r6
 8000da8:	d908      	bls.n	8000dbc <__udivmoddi4+0x220>
 8000daa:	1861      	adds	r1, r4, r1
 8000dac:	f109 30ff 	add.w	r0, r9, #4294967295
 8000db0:	d248      	bcs.n	8000e44 <__udivmoddi4+0x2a8>
 8000db2:	458a      	cmp	sl, r1
 8000db4:	d946      	bls.n	8000e44 <__udivmoddi4+0x2a8>
 8000db6:	f1a9 0902 	sub.w	r9, r9, #2
 8000dba:	4421      	add	r1, r4
 8000dbc:	eba1 010a 	sub.w	r1, r1, sl
 8000dc0:	b2bf      	uxth	r7, r7
 8000dc2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dc6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dca:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000dce:	fb00 f808 	mul.w	r8, r0, r8
 8000dd2:	45b8      	cmp	r8, r7
 8000dd4:	d907      	bls.n	8000de6 <__udivmoddi4+0x24a>
 8000dd6:	19e7      	adds	r7, r4, r7
 8000dd8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ddc:	d22e      	bcs.n	8000e3c <__udivmoddi4+0x2a0>
 8000dde:	45b8      	cmp	r8, r7
 8000de0:	d92c      	bls.n	8000e3c <__udivmoddi4+0x2a0>
 8000de2:	3802      	subs	r0, #2
 8000de4:	4427      	add	r7, r4
 8000de6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dea:	eba7 0708 	sub.w	r7, r7, r8
 8000dee:	fba0 8902 	umull	r8, r9, r0, r2
 8000df2:	454f      	cmp	r7, r9
 8000df4:	46c6      	mov	lr, r8
 8000df6:	4649      	mov	r1, r9
 8000df8:	d31a      	bcc.n	8000e30 <__udivmoddi4+0x294>
 8000dfa:	d017      	beq.n	8000e2c <__udivmoddi4+0x290>
 8000dfc:	b15d      	cbz	r5, 8000e16 <__udivmoddi4+0x27a>
 8000dfe:	ebb3 020e 	subs.w	r2, r3, lr
 8000e02:	eb67 0701 	sbc.w	r7, r7, r1
 8000e06:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e0a:	40f2      	lsrs	r2, r6
 8000e0c:	ea4c 0202 	orr.w	r2, ip, r2
 8000e10:	40f7      	lsrs	r7, r6
 8000e12:	e9c5 2700 	strd	r2, r7, [r5]
 8000e16:	2600      	movs	r6, #0
 8000e18:	4631      	mov	r1, r6
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	462e      	mov	r6, r5
 8000e20:	4628      	mov	r0, r5
 8000e22:	e70b      	b.n	8000c3c <__udivmoddi4+0xa0>
 8000e24:	4606      	mov	r6, r0
 8000e26:	e6e9      	b.n	8000bfc <__udivmoddi4+0x60>
 8000e28:	4618      	mov	r0, r3
 8000e2a:	e6fd      	b.n	8000c28 <__udivmoddi4+0x8c>
 8000e2c:	4543      	cmp	r3, r8
 8000e2e:	d2e5      	bcs.n	8000dfc <__udivmoddi4+0x260>
 8000e30:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e34:	eb69 0104 	sbc.w	r1, r9, r4
 8000e38:	3801      	subs	r0, #1
 8000e3a:	e7df      	b.n	8000dfc <__udivmoddi4+0x260>
 8000e3c:	4608      	mov	r0, r1
 8000e3e:	e7d2      	b.n	8000de6 <__udivmoddi4+0x24a>
 8000e40:	4660      	mov	r0, ip
 8000e42:	e78d      	b.n	8000d60 <__udivmoddi4+0x1c4>
 8000e44:	4681      	mov	r9, r0
 8000e46:	e7b9      	b.n	8000dbc <__udivmoddi4+0x220>
 8000e48:	4666      	mov	r6, ip
 8000e4a:	e775      	b.n	8000d38 <__udivmoddi4+0x19c>
 8000e4c:	4630      	mov	r0, r6
 8000e4e:	e74a      	b.n	8000ce6 <__udivmoddi4+0x14a>
 8000e50:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e54:	4439      	add	r1, r7
 8000e56:	e713      	b.n	8000c80 <__udivmoddi4+0xe4>
 8000e58:	3802      	subs	r0, #2
 8000e5a:	443c      	add	r4, r7
 8000e5c:	e724      	b.n	8000ca8 <__udivmoddi4+0x10c>
 8000e5e:	bf00      	nop

08000e60 <__aeabi_idiv0>:
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop

08000e64 <SendDataBT>:
  * @brief           Plik przechowujący w sobie funkcje do wysyłania danych przez BT
  ******************************************************************************
*/
#include "Bluetooth.h"
void SendDataBT(weather_parameters *Param, UART_HandleTypeDef *uart)
{
 8000e64:	b5b0      	push	{r4, r5, r7, lr}
 8000e66:	b096      	sub	sp, #88	; 0x58
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
 8000e6c:	6039      	str	r1, [r7, #0]
 8000e6e:	466b      	mov	r3, sp
 8000e70:	461d      	mov	r5, r3
	 * Funkcja służąca do wysłania danych pomiarowych przez BT (żeby dostać dane na telefon, trzeba najpierw wysłać znak s)
	 * */



	 int PressureDigits = 3;	// Ustala liczbę znaków do wysłania danych o ciśnieniu w zależności od tego, jak wysokie jest ciśnienie
 8000e72:	2303      	movs	r3, #3
 8000e74:	653b      	str	r3, [r7, #80]	; 0x50
     if(((int)Param->pressure/1000) ==0)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8000e7c:	4610      	mov	r0, r2
 8000e7e:	4619      	mov	r1, r3
 8000e80:	f7ff fe4c 	bl	8000b1c <__aeabi_d2iz>
 8000e84:	4603      	mov	r3, r0
 8000e86:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 8000e8a:	f240 72ce 	movw	r2, #1998	; 0x7ce
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d802      	bhi.n	8000e98 <SendDataBT+0x34>
    	 PressureDigits=3;
 8000e92:	2303      	movs	r3, #3
 8000e94:	653b      	str	r3, [r7, #80]	; 0x50
 8000e96:	e001      	b.n	8000e9c <SendDataBT+0x38>
	 else
		 PressureDigits=4;
 8000e98:	2304      	movs	r3, #4
 8000e9a:	653b      	str	r3, [r7, #80]	; 0x50


	 int TemperatureDigits = 2; // Ustala liczbę znaków do wysłania danych o temperaturze
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	657b      	str	r3, [r7, #84]	; 0x54
	 if((int)Param -> temperature > 0 )
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ea6:	4610      	mov	r0, r2
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	f7ff fe37 	bl	8000b1c <__aeabi_d2iz>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	dd10      	ble.n	8000ed6 <SendDataBT+0x72>
	 {
		 if((int)Param->temperature/10 == 0)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eba:	4610      	mov	r0, r2
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	f7ff fe2d 	bl	8000b1c <__aeabi_d2iz>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	3309      	adds	r3, #9
 8000ec6:	2b12      	cmp	r3, #18
 8000ec8:	d802      	bhi.n	8000ed0 <SendDataBT+0x6c>
			 TemperatureDigits = 1;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	657b      	str	r3, [r7, #84]	; 0x54
 8000ece:	e012      	b.n	8000ef6 <SendDataBT+0x92>
		 else
			 TemperatureDigits = 2;
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	657b      	str	r3, [r7, #84]	; 0x54
 8000ed4:	e00f      	b.n	8000ef6 <SendDataBT+0x92>
	 }
	 else
	 {
		if((int)Param->temperature/10 == 0)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000edc:	4610      	mov	r0, r2
 8000ede:	4619      	mov	r1, r3
 8000ee0:	f7ff fe1c 	bl	8000b1c <__aeabi_d2iz>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	3309      	adds	r3, #9
 8000ee8:	2b12      	cmp	r3, #18
 8000eea:	d802      	bhi.n	8000ef2 <SendDataBT+0x8e>
			TemperatureDigits = 2;
 8000eec:	2302      	movs	r3, #2
 8000eee:	657b      	str	r3, [r7, #84]	; 0x54
 8000ef0:	e001      	b.n	8000ef6 <SendDataBT+0x92>
		else
			TemperatureDigits = 3;
 8000ef2:	2303      	movs	r3, #3
 8000ef4:	657b      	str	r3, [r7, #84]	; 0x54

	 }


    int HumidityDigits = 3; // Ustala liczbę znaków do wysłania danych o wilgotności
 8000ef6:	2303      	movs	r3, #3
 8000ef8:	64fb      	str	r3, [r7, #76]	; 0x4c
	if(((int)Param->humidity/100) ==0)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000f00:	4610      	mov	r0, r2
 8000f02:	4619      	mov	r1, r3
 8000f04:	f7ff fe0a 	bl	8000b1c <__aeabi_d2iz>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	3363      	adds	r3, #99	; 0x63
 8000f0c:	2bc6      	cmp	r3, #198	; 0xc6
 8000f0e:	d802      	bhi.n	8000f16 <SendDataBT+0xb2>
		HumidityDigits=2;
 8000f10:	2302      	movs	r3, #2
 8000f12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000f14:	e001      	b.n	8000f1a <SendDataBT+0xb6>
		 else
		HumidityDigits=3;
 8000f16:	2303      	movs	r3, #3
 8000f18:	64fb      	str	r3, [r7, #76]	; 0x4c


	 char temp[TemperatureDigits];
 8000f1a:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 8000f1c:	1e63      	subs	r3, r4, #1
 8000f1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8000f20:	4623      	mov	r3, r4
 8000f22:	4618      	mov	r0, r3
 8000f24:	f04f 0100 	mov.w	r1, #0
 8000f28:	f04f 0200 	mov.w	r2, #0
 8000f2c:	f04f 0300 	mov.w	r3, #0
 8000f30:	00cb      	lsls	r3, r1, #3
 8000f32:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000f36:	00c2      	lsls	r2, r0, #3
 8000f38:	4623      	mov	r3, r4
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f04f 0100 	mov.w	r1, #0
 8000f40:	f04f 0200 	mov.w	r2, #0
 8000f44:	f04f 0300 	mov.w	r3, #0
 8000f48:	00cb      	lsls	r3, r1, #3
 8000f4a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000f4e:	00c2      	lsls	r2, r0, #3
 8000f50:	4623      	mov	r3, r4
 8000f52:	3307      	adds	r3, #7
 8000f54:	08db      	lsrs	r3, r3, #3
 8000f56:	00db      	lsls	r3, r3, #3
 8000f58:	ebad 0d03 	sub.w	sp, sp, r3
 8000f5c:	466b      	mov	r3, sp
 8000f5e:	3300      	adds	r3, #0
 8000f60:	647b      	str	r3, [r7, #68]	; 0x44
	 char hum[HumidityDigits];
 8000f62:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8000f64:	1e63      	subs	r3, r4, #1
 8000f66:	643b      	str	r3, [r7, #64]	; 0x40
 8000f68:	4623      	mov	r3, r4
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f04f 0100 	mov.w	r1, #0
 8000f70:	f04f 0200 	mov.w	r2, #0
 8000f74:	f04f 0300 	mov.w	r3, #0
 8000f78:	00cb      	lsls	r3, r1, #3
 8000f7a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000f7e:	00c2      	lsls	r2, r0, #3
 8000f80:	4623      	mov	r3, r4
 8000f82:	4618      	mov	r0, r3
 8000f84:	f04f 0100 	mov.w	r1, #0
 8000f88:	f04f 0200 	mov.w	r2, #0
 8000f8c:	f04f 0300 	mov.w	r3, #0
 8000f90:	00cb      	lsls	r3, r1, #3
 8000f92:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000f96:	00c2      	lsls	r2, r0, #3
 8000f98:	4623      	mov	r3, r4
 8000f9a:	3307      	adds	r3, #7
 8000f9c:	08db      	lsrs	r3, r3, #3
 8000f9e:	00db      	lsls	r3, r3, #3
 8000fa0:	ebad 0d03 	sub.w	sp, sp, r3
 8000fa4:	466b      	mov	r3, sp
 8000fa6:	3300      	adds	r3, #0
 8000fa8:	63fb      	str	r3, [r7, #60]	; 0x3c
	 char pressure[PressureDigits];
 8000faa:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 8000fac:	1e63      	subs	r3, r4, #1
 8000fae:	63bb      	str	r3, [r7, #56]	; 0x38
 8000fb0:	4623      	mov	r3, r4
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f04f 0100 	mov.w	r1, #0
 8000fb8:	f04f 0200 	mov.w	r2, #0
 8000fbc:	f04f 0300 	mov.w	r3, #0
 8000fc0:	00cb      	lsls	r3, r1, #3
 8000fc2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000fc6:	00c2      	lsls	r2, r0, #3
 8000fc8:	4623      	mov	r3, r4
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f04f 0100 	mov.w	r1, #0
 8000fd0:	f04f 0200 	mov.w	r2, #0
 8000fd4:	f04f 0300 	mov.w	r3, #0
 8000fd8:	00cb      	lsls	r3, r1, #3
 8000fda:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000fde:	00c2      	lsls	r2, r0, #3
 8000fe0:	4623      	mov	r3, r4
 8000fe2:	3307      	adds	r3, #7
 8000fe4:	08db      	lsrs	r3, r3, #3
 8000fe6:	00db      	lsls	r3, r3, #3
 8000fe8:	ebad 0d03 	sub.w	sp, sp, r3
 8000fec:	466b      	mov	r3, sp
 8000fee:	3300      	adds	r3, #0
 8000ff0:	637b      	str	r3, [r7, #52]	; 0x34

	 char temp_BT[13] = "Temperature: ";
 8000ff2:	4b47      	ldr	r3, [pc, #284]	; (8001110 <SendDataBT+0x2ac>)
 8000ff4:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8000ff8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ffa:	c407      	stmia	r4!, {r0, r1, r2}
 8000ffc:	7023      	strb	r3, [r4, #0]
	 char hum_BT[10] = "Humidity: ";
 8000ffe:	4a45      	ldr	r2, [pc, #276]	; (8001114 <SendDataBT+0x2b0>)
 8001000:	f107 0318 	add.w	r3, r7, #24
 8001004:	ca07      	ldmia	r2, {r0, r1, r2}
 8001006:	c303      	stmia	r3!, {r0, r1}
 8001008:	801a      	strh	r2, [r3, #0]
	 char pressure_BT[10] = "Pressure: ";
 800100a:	4a43      	ldr	r2, [pc, #268]	; (8001118 <SendDataBT+0x2b4>)
 800100c:	f107 030c 	add.w	r3, r7, #12
 8001010:	ca07      	ldmia	r2, {r0, r1, r2}
 8001012:	c303      	stmia	r3!, {r0, r1}
 8001014:	801a      	strh	r2, [r3, #0]

	 sprintf(temp, "%d", (int)Param -> temperature);
 8001016:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800101e:	4610      	mov	r0, r2
 8001020:	4619      	mov	r1, r3
 8001022:	f7ff fd7b 	bl	8000b1c <__aeabi_d2iz>
 8001026:	4603      	mov	r3, r0
 8001028:	461a      	mov	r2, r3
 800102a:	493c      	ldr	r1, [pc, #240]	; (800111c <SendDataBT+0x2b8>)
 800102c:	4620      	mov	r0, r4
 800102e:	f005 fc89 	bl	8006944 <siprintf>
	 sprintf(hum, "%d", (int)Param -> humidity);
 8001032:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800103a:	4610      	mov	r0, r2
 800103c:	4619      	mov	r1, r3
 800103e:	f7ff fd6d 	bl	8000b1c <__aeabi_d2iz>
 8001042:	4603      	mov	r3, r0
 8001044:	461a      	mov	r2, r3
 8001046:	4935      	ldr	r1, [pc, #212]	; (800111c <SendDataBT+0x2b8>)
 8001048:	4620      	mov	r0, r4
 800104a:	f005 fc7b 	bl	8006944 <siprintf>
	 sprintf(pressure, "%d", (int)Param -> pressure);
 800104e:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001056:	4610      	mov	r0, r2
 8001058:	4619      	mov	r1, r3
 800105a:	f7ff fd5f 	bl	8000b1c <__aeabi_d2iz>
 800105e:	4603      	mov	r3, r0
 8001060:	461a      	mov	r2, r3
 8001062:	492e      	ldr	r1, [pc, #184]	; (800111c <SendDataBT+0x2b8>)
 8001064:	4620      	mov	r0, r4
 8001066:	f005 fc6d 	bl	8006944 <siprintf>

	// Przesłanie danych o temperaturze

	HAL_UART_Transmit(&huart1, temp_BT, 13,100);
 800106a:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800106e:	2364      	movs	r3, #100	; 0x64
 8001070:	220d      	movs	r2, #13
 8001072:	482b      	ldr	r0, [pc, #172]	; (8001120 <SendDataBT+0x2bc>)
 8001074:	f004 fb80 	bl	8005778 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, temp, TemperatureDigits,100);
 8001078:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800107a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800107c:	b29a      	uxth	r2, r3
 800107e:	2364      	movs	r3, #100	; 0x64
 8001080:	4827      	ldr	r0, [pc, #156]	; (8001120 <SendDataBT+0x2bc>)
 8001082:	f004 fb79 	bl	8005778 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, " 'C", 3,100);
 8001086:	2364      	movs	r3, #100	; 0x64
 8001088:	2203      	movs	r2, #3
 800108a:	4926      	ldr	r1, [pc, #152]	; (8001124 <SendDataBT+0x2c0>)
 800108c:	4824      	ldr	r0, [pc, #144]	; (8001120 <SendDataBT+0x2bc>)
 800108e:	f004 fb73 	bl	8005778 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, "\n", 1,100);
 8001092:	2364      	movs	r3, #100	; 0x64
 8001094:	2201      	movs	r2, #1
 8001096:	4924      	ldr	r1, [pc, #144]	; (8001128 <SendDataBT+0x2c4>)
 8001098:	4821      	ldr	r0, [pc, #132]	; (8001120 <SendDataBT+0x2bc>)
 800109a:	f004 fb6d 	bl	8005778 <HAL_UART_Transmit>

	// Przesłanie danych o wilgotności

	HAL_UART_Transmit(&huart1, hum_BT, 10,100);
 800109e:	f107 0118 	add.w	r1, r7, #24
 80010a2:	2364      	movs	r3, #100	; 0x64
 80010a4:	220a      	movs	r2, #10
 80010a6:	481e      	ldr	r0, [pc, #120]	; (8001120 <SendDataBT+0x2bc>)
 80010a8:	f004 fb66 	bl	8005778 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, hum, HumidityDigits,100);
 80010ac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80010ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80010b0:	b29a      	uxth	r2, r3
 80010b2:	2364      	movs	r3, #100	; 0x64
 80010b4:	481a      	ldr	r0, [pc, #104]	; (8001120 <SendDataBT+0x2bc>)
 80010b6:	f004 fb5f 	bl	8005778 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, "%", 1,100);
 80010ba:	2364      	movs	r3, #100	; 0x64
 80010bc:	2201      	movs	r2, #1
 80010be:	491b      	ldr	r1, [pc, #108]	; (800112c <SendDataBT+0x2c8>)
 80010c0:	4817      	ldr	r0, [pc, #92]	; (8001120 <SendDataBT+0x2bc>)
 80010c2:	f004 fb59 	bl	8005778 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, "\n", 1,100);
 80010c6:	2364      	movs	r3, #100	; 0x64
 80010c8:	2201      	movs	r2, #1
 80010ca:	4917      	ldr	r1, [pc, #92]	; (8001128 <SendDataBT+0x2c4>)
 80010cc:	4814      	ldr	r0, [pc, #80]	; (8001120 <SendDataBT+0x2bc>)
 80010ce:	f004 fb53 	bl	8005778 <HAL_UART_Transmit>

	// Przesłanie danych o ciśnieniu

	HAL_UART_Transmit(&huart1, pressure_BT, 10,100);
 80010d2:	f107 010c 	add.w	r1, r7, #12
 80010d6:	2364      	movs	r3, #100	; 0x64
 80010d8:	220a      	movs	r2, #10
 80010da:	4811      	ldr	r0, [pc, #68]	; (8001120 <SendDataBT+0x2bc>)
 80010dc:	f004 fb4c 	bl	8005778 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, pressure, PressureDigits,100);
 80010e0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80010e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80010e4:	b29a      	uxth	r2, r3
 80010e6:	2364      	movs	r3, #100	; 0x64
 80010e8:	480d      	ldr	r0, [pc, #52]	; (8001120 <SendDataBT+0x2bc>)
 80010ea:	f004 fb45 	bl	8005778 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, " hPa", 4,100);
 80010ee:	2364      	movs	r3, #100	; 0x64
 80010f0:	2204      	movs	r2, #4
 80010f2:	490f      	ldr	r1, [pc, #60]	; (8001130 <SendDataBT+0x2cc>)
 80010f4:	480a      	ldr	r0, [pc, #40]	; (8001120 <SendDataBT+0x2bc>)
 80010f6:	f004 fb3f 	bl	8005778 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, "\n", 1,100);
 80010fa:	2364      	movs	r3, #100	; 0x64
 80010fc:	2201      	movs	r2, #1
 80010fe:	490a      	ldr	r1, [pc, #40]	; (8001128 <SendDataBT+0x2c4>)
 8001100:	4807      	ldr	r0, [pc, #28]	; (8001120 <SendDataBT+0x2bc>)
 8001102:	f004 fb39 	bl	8005778 <HAL_UART_Transmit>
 8001106:	46ad      	mov	sp, r5

}
 8001108:	bf00      	nop
 800110a:	3758      	adds	r7, #88	; 0x58
 800110c:	46bd      	mov	sp, r7
 800110e:	bdb0      	pop	{r4, r5, r7, pc}
 8001110:	080071d0 	.word	0x080071d0
 8001114:	080071e0 	.word	0x080071e0
 8001118:	080071ec 	.word	0x080071ec
 800111c:	080071b8 	.word	0x080071b8
 8001120:	200001a0 	.word	0x200001a0
 8001124:	080071bc 	.word	0x080071bc
 8001128:	080071c0 	.word	0x080071c0
 800112c:	080071c4 	.word	0x080071c4
 8001130:	080071c8 	.word	0x080071c8

08001134 <DWT_Delay_Init>:
uint16_t SUM; uint8_t Presence = 0;

#include "DHT.h"

uint32_t DWT_Delay_Init(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8001138:	4b14      	ldr	r3, [pc, #80]	; (800118c <DWT_Delay_Init+0x58>)
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	4a13      	ldr	r2, [pc, #76]	; (800118c <DWT_Delay_Init+0x58>)
 800113e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001142:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8001144:	4b11      	ldr	r3, [pc, #68]	; (800118c <DWT_Delay_Init+0x58>)
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	4a10      	ldr	r2, [pc, #64]	; (800118c <DWT_Delay_Init+0x58>)
 800114a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800114e:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8001150:	4b0f      	ldr	r3, [pc, #60]	; (8001190 <DWT_Delay_Init+0x5c>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a0e      	ldr	r2, [pc, #56]	; (8001190 <DWT_Delay_Init+0x5c>)
 8001156:	f023 0301 	bic.w	r3, r3, #1
 800115a:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 800115c:	4b0c      	ldr	r3, [pc, #48]	; (8001190 <DWT_Delay_Init+0x5c>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a0b      	ldr	r2, [pc, #44]	; (8001190 <DWT_Delay_Init+0x5c>)
 8001162:	f043 0301 	orr.w	r3, r3, #1
 8001166:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8001168:	4b09      	ldr	r3, [pc, #36]	; (8001190 <DWT_Delay_Init+0x5c>)
 800116a:	2200      	movs	r2, #0
 800116c:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 800116e:	bf00      	nop
     __ASM volatile ("NOP");
 8001170:	bf00      	nop
  __ASM volatile ("NOP");
 8001172:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8001174:	4b06      	ldr	r3, [pc, #24]	; (8001190 <DWT_Delay_Init+0x5c>)
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 800117c:	2300      	movs	r3, #0
 800117e:	e000      	b.n	8001182 <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8001180:	2301      	movs	r3, #1
  }
}
 8001182:	4618      	mov	r0, r3
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr
 800118c:	e000edf0 	.word	0xe000edf0
 8001190:	e0001000 	.word	0xe0001000

08001194 <delay>:

__STATIC_INLINE void delay(volatile uint32_t microseconds)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 800119c:	4b0d      	ldr	r3, [pc, #52]	; (80011d4 <delay+0x40>)
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 80011a2:	f003 fa7f 	bl	80046a4 <HAL_RCC_GetHCLKFreq>
 80011a6:	4603      	mov	r3, r0
 80011a8:	4a0b      	ldr	r2, [pc, #44]	; (80011d8 <delay+0x44>)
 80011aa:	fba2 2303 	umull	r2, r3, r2, r3
 80011ae:	0c9b      	lsrs	r3, r3, #18
 80011b0:	687a      	ldr	r2, [r7, #4]
 80011b2:	fb02 f303 	mul.w	r3, r2, r3
 80011b6:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 80011b8:	bf00      	nop
 80011ba:	4b06      	ldr	r3, [pc, #24]	; (80011d4 <delay+0x40>)
 80011bc:	685a      	ldr	r2, [r3, #4]
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	1ad2      	subs	r2, r2, r3
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	d3f8      	bcc.n	80011ba <delay+0x26>
}
 80011c8:	bf00      	nop
 80011ca:	bf00      	nop
 80011cc:	3710      	adds	r7, #16
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	e0001000 	.word	0xe0001000
 80011d8:	431bde83 	.word	0x431bde83

080011dc <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b088      	sub	sp, #32
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	460b      	mov	r3, r1
 80011e6:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e8:	f107 030c 	add.w	r3, r7, #12
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	609a      	str	r2, [r3, #8]
 80011f4:	60da      	str	r2, [r3, #12]
 80011f6:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80011f8:	887b      	ldrh	r3, [r7, #2]
 80011fa:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011fc:	2301      	movs	r3, #1
 80011fe:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001200:	2300      	movs	r3, #0
 8001202:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001204:	f107 030c 	add.w	r3, r7, #12
 8001208:	4619      	mov	r1, r3
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f001 fc3a 	bl	8002a84 <HAL_GPIO_Init>
}
 8001210:	bf00      	nop
 8001212:	3720      	adds	r7, #32
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}

08001218 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b088      	sub	sp, #32
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	460b      	mov	r3, r1
 8001222:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001224:	f107 030c 	add.w	r3, r7, #12
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	60da      	str	r2, [r3, #12]
 8001232:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001234:	887b      	ldrh	r3, [r7, #2]
 8001236:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001238:	2300      	movs	r3, #0
 800123a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123c:	2300      	movs	r3, #0
 800123e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001240:	f107 030c 	add.w	r3, r7, #12
 8001244:	4619      	mov	r1, r3
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f001 fc1c 	bl	8002a84 <HAL_GPIO_Init>
}
 800124c:	bf00      	nop
 800124e:	3720      	adds	r7, #32
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}

08001254 <DHT_Start>:


void DHT_Start (void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
	DWT_Delay_Init();
 8001258:	f7ff ff6c 	bl	8001134 <DWT_Delay_Init>
	Set_Pin_Output (DHT_PORT, DHT_PIN);  // set the pin as output
 800125c:	2101      	movs	r1, #1
 800125e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001262:	f7ff ffbb 	bl	80011dc <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 0);   // pull the pin low
 8001266:	2200      	movs	r2, #0
 8001268:	2101      	movs	r1, #1
 800126a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800126e:	f001 fdcb 	bl	8002e08 <HAL_GPIO_WritePin>

#if defined(TYPE_DHT11)
	delay (18000);   // wait for 18ms
 8001272:	f244 6050 	movw	r0, #18000	; 0x4650
 8001276:	f7ff ff8d 	bl	8001194 <delay>

#if defined(TYPE_DHT22)
	delay (1200);  // >1ms delay
#endif

    HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 1);   // pull the pin high
 800127a:	2201      	movs	r2, #1
 800127c:	2101      	movs	r1, #1
 800127e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001282:	f001 fdc1 	bl	8002e08 <HAL_GPIO_WritePin>
    delay (20);   // wait for 30us
 8001286:	2014      	movs	r0, #20
 8001288:	f7ff ff84 	bl	8001194 <delay>
	Set_Pin_Input(DHT_PORT, DHT_PIN);    // set as input
 800128c:	2101      	movs	r1, #1
 800128e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001292:	f7ff ffc1 	bl	8001218 <Set_Pin_Input>
}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}

0800129a <DHT_Check_Response>:

uint8_t DHT_Check_Response (void)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b082      	sub	sp, #8
 800129e:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 80012a0:	2300      	movs	r3, #0
 80012a2:	71fb      	strb	r3, [r7, #7]
	delay(40);
 80012a4:	2028      	movs	r0, #40	; 0x28
 80012a6:	f7ff ff75 	bl	8001194 <delay>
	if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))
 80012aa:	2101      	movs	r1, #1
 80012ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012b0:	f001 fd92 	bl	8002dd8 <HAL_GPIO_ReadPin>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d10f      	bne.n	80012da <DHT_Check_Response+0x40>
	{
		delay(80);
 80012ba:	2050      	movs	r0, #80	; 0x50
 80012bc:	f7ff ff6a 	bl	8001194 <delay>
		if ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN))) Response = 1;
 80012c0:	2101      	movs	r1, #1
 80012c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012c6:	f001 fd87 	bl	8002dd8 <HAL_GPIO_ReadPin>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d002      	beq.n	80012d6 <DHT_Check_Response+0x3c>
 80012d0:	2301      	movs	r3, #1
 80012d2:	71fb      	strb	r3, [r7, #7]
 80012d4:	e001      	b.n	80012da <DHT_Check_Response+0x40>
		else Response = -1;
 80012d6:	23ff      	movs	r3, #255	; 0xff
 80012d8:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go low
 80012da:	bf00      	nop
 80012dc:	2101      	movs	r1, #1
 80012de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012e2:	f001 fd79 	bl	8002dd8 <HAL_GPIO_ReadPin>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d1f7      	bne.n	80012dc <DHT_Check_Response+0x42>

	return Response;
 80012ec:	79fb      	ldrb	r3, [r7, #7]
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <DHT_Read>:

uint8_t DHT_Read (void)
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b082      	sub	sp, #8
 80012fa:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 80012fc:	2300      	movs	r3, #0
 80012fe:	71bb      	strb	r3, [r7, #6]
 8001300:	e03a      	b.n	8001378 <DHT_Read+0x82>
	{
		while (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go high
 8001302:	bf00      	nop
 8001304:	2101      	movs	r1, #1
 8001306:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800130a:	f001 fd65 	bl	8002dd8 <HAL_GPIO_ReadPin>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d0f7      	beq.n	8001304 <DHT_Read+0xe>
		delay (40);   // wait for 40 us
 8001314:	2028      	movs	r0, #40	; 0x28
 8001316:	f7ff ff3d 	bl	8001194 <delay>
		if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))   // if the pin is low
 800131a:	2101      	movs	r1, #1
 800131c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001320:	f001 fd5a 	bl	8002dd8 <HAL_GPIO_ReadPin>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d10e      	bne.n	8001348 <DHT_Read+0x52>
		{
			i&= ~(1<<(7-j));   // write 0
 800132a:	79bb      	ldrb	r3, [r7, #6]
 800132c:	f1c3 0307 	rsb	r3, r3, #7
 8001330:	2201      	movs	r2, #1
 8001332:	fa02 f303 	lsl.w	r3, r2, r3
 8001336:	b25b      	sxtb	r3, r3
 8001338:	43db      	mvns	r3, r3
 800133a:	b25a      	sxtb	r2, r3
 800133c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001340:	4013      	ands	r3, r2
 8001342:	b25b      	sxtb	r3, r3
 8001344:	71fb      	strb	r3, [r7, #7]
 8001346:	e00b      	b.n	8001360 <DHT_Read+0x6a>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 8001348:	79bb      	ldrb	r3, [r7, #6]
 800134a:	f1c3 0307 	rsb	r3, r3, #7
 800134e:	2201      	movs	r2, #1
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	b25a      	sxtb	r2, r3
 8001356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135a:	4313      	orrs	r3, r2
 800135c:	b25b      	sxtb	r3, r3
 800135e:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));  // wait for the pin to go low
 8001360:	bf00      	nop
 8001362:	2101      	movs	r1, #1
 8001364:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001368:	f001 fd36 	bl	8002dd8 <HAL_GPIO_ReadPin>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d1f7      	bne.n	8001362 <DHT_Read+0x6c>
	for (j=0;j<8;j++)
 8001372:	79bb      	ldrb	r3, [r7, #6]
 8001374:	3301      	adds	r3, #1
 8001376:	71bb      	strb	r3, [r7, #6]
 8001378:	79bb      	ldrb	r3, [r7, #6]
 800137a:	2b07      	cmp	r3, #7
 800137c:	d9c1      	bls.n	8001302 <DHT_Read+0xc>
	}
	return i;
 800137e:	79fb      	ldrb	r3, [r7, #7]
}
 8001380:	4618      	mov	r0, r3
 8001382:	3708      	adds	r7, #8
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}

08001388 <DHT_GetData>:



void DHT_GetData (DHT_DataTypedef *DHT_Data)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
    DHT_Start ();
 8001390:	f7ff ff60 	bl	8001254 <DHT_Start>
	Presence = DHT_Check_Response ();
 8001394:	f7ff ff81 	bl	800129a <DHT_Check_Response>
 8001398:	4603      	mov	r3, r0
 800139a:	461a      	mov	r2, r3
 800139c:	4b23      	ldr	r3, [pc, #140]	; (800142c <DHT_GetData+0xa4>)
 800139e:	701a      	strb	r2, [r3, #0]
	Rh_byte1 = DHT_Read ();
 80013a0:	f7ff ffa9 	bl	80012f6 <DHT_Read>
 80013a4:	4603      	mov	r3, r0
 80013a6:	461a      	mov	r2, r3
 80013a8:	4b21      	ldr	r3, [pc, #132]	; (8001430 <DHT_GetData+0xa8>)
 80013aa:	701a      	strb	r2, [r3, #0]
	Rh_byte2 = DHT_Read ();
 80013ac:	f7ff ffa3 	bl	80012f6 <DHT_Read>
 80013b0:	4603      	mov	r3, r0
 80013b2:	461a      	mov	r2, r3
 80013b4:	4b1f      	ldr	r3, [pc, #124]	; (8001434 <DHT_GetData+0xac>)
 80013b6:	701a      	strb	r2, [r3, #0]
	Temp_byte1 = DHT_Read ();
 80013b8:	f7ff ff9d 	bl	80012f6 <DHT_Read>
 80013bc:	4603      	mov	r3, r0
 80013be:	461a      	mov	r2, r3
 80013c0:	4b1d      	ldr	r3, [pc, #116]	; (8001438 <DHT_GetData+0xb0>)
 80013c2:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DHT_Read ();
 80013c4:	f7ff ff97 	bl	80012f6 <DHT_Read>
 80013c8:	4603      	mov	r3, r0
 80013ca:	461a      	mov	r2, r3
 80013cc:	4b1b      	ldr	r3, [pc, #108]	; (800143c <DHT_GetData+0xb4>)
 80013ce:	701a      	strb	r2, [r3, #0]
	SUM = DHT_Read();
 80013d0:	f7ff ff91 	bl	80012f6 <DHT_Read>
 80013d4:	4603      	mov	r3, r0
 80013d6:	b29a      	uxth	r2, r3
 80013d8:	4b19      	ldr	r3, [pc, #100]	; (8001440 <DHT_GetData+0xb8>)
 80013da:	801a      	strh	r2, [r3, #0]

	if (SUM == (Rh_byte1+Rh_byte2+Temp_byte1+Temp_byte2))
 80013dc:	4b18      	ldr	r3, [pc, #96]	; (8001440 <DHT_GetData+0xb8>)
 80013de:	881b      	ldrh	r3, [r3, #0]
 80013e0:	4619      	mov	r1, r3
 80013e2:	4b13      	ldr	r3, [pc, #76]	; (8001430 <DHT_GetData+0xa8>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	461a      	mov	r2, r3
 80013e8:	4b12      	ldr	r3, [pc, #72]	; (8001434 <DHT_GetData+0xac>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	4413      	add	r3, r2
 80013ee:	4a12      	ldr	r2, [pc, #72]	; (8001438 <DHT_GetData+0xb0>)
 80013f0:	7812      	ldrb	r2, [r2, #0]
 80013f2:	4413      	add	r3, r2
 80013f4:	4a11      	ldr	r2, [pc, #68]	; (800143c <DHT_GetData+0xb4>)
 80013f6:	7812      	ldrb	r2, [r2, #0]
 80013f8:	4413      	add	r3, r2
 80013fa:	4299      	cmp	r1, r3
 80013fc:	d111      	bne.n	8001422 <DHT_GetData+0x9a>
	{
		#if defined(TYPE_DHT11)
			DHT_Data->Temperature = Temp_byte1;
 80013fe:	4b0e      	ldr	r3, [pc, #56]	; (8001438 <DHT_GetData+0xb0>)
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	ee07 3a90 	vmov	s15, r3
 8001406:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	edc3 7a00 	vstr	s15, [r3]
			DHT_Data->Humidity = Rh_byte1;
 8001410:	4b07      	ldr	r3, [pc, #28]	; (8001430 <DHT_GetData+0xa8>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	ee07 3a90 	vmov	s15, r3
 8001418:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	edc3 7a01 	vstr	s15, [r3, #4]
		#if defined(TYPE_DHT22)
			DHT_Data->Temperature = ((Temp_byte1<<8)|Temp_byte2);
			DHT_Data->Humidity = ((Rh_byte1<<8)|Rh_byte2);
		#endif
	}
}
 8001422:	bf00      	nop
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	2000008c 	.word	0x2000008c
 8001430:	200000ac 	.word	0x200000ac
 8001434:	200000ae 	.word	0x200000ae
 8001438:	200000ad 	.word	0x200000ad
 800143c:	200000b2 	.word	0x200000b2
 8001440:	200000b0 	.word	0x200000b0

08001444 <DisplayPressure>:
#include <stdbool.h>
#include <stdio.h>
#include "sensors.h"


void DisplayPressure(struct lcd_disp *disp_, struct weather_parameters *param_){
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	6039      	str	r1, [r7, #0]

/**Funkcja wyświetlania ciśnienia pobranego ze struktury typu weather_parameters
arg: "struktura wyświetlacza", "struktura parametrów pogody" */
	
	if(param_->pressure==0){								// Gdy brak danych
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001454:	f04f 0200 	mov.w	r2, #0
 8001458:	f04f 0300 	mov.w	r3, #0
 800145c:	f7ff fb2c 	bl	8000ab8 <__aeabi_dcmpeq>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d00c      	beq.n	8001480 <DisplayPressure+0x3c>
		sprintf((char *)disp_->f_line,"Oczekiwanie");		// Załadowanie pierwszej linijki
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	3301      	adds	r3, #1
 800146a:	4914      	ldr	r1, [pc, #80]	; (80014bc <DisplayPressure+0x78>)
 800146c:	4618      	mov	r0, r3
 800146e:	f005 fa69 	bl	8006944 <siprintf>
		sprintf((char *)disp_->s_line,"na pomiar...:");		// Załadowanie drugiej linijki
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	3312      	adds	r3, #18
 8001476:	4912      	ldr	r1, [pc, #72]	; (80014c0 <DisplayPressure+0x7c>)
 8001478:	4618      	mov	r0, r3
 800147a:	f005 fa63 	bl	8006944 <siprintf>
	  int pressure_int=(int)param_->pressure;				// pobranie danej do bufora
	  sprintf((char *)disp_->f_line,"Pressure:");			// Załadowanie pierwszej linijki
	  sprintf((char *)disp_->s_line,"%d hPa",pressure_int);	// Załadowanie drugiej linijki
	}

}
 800147e:	e018      	b.n	80014b2 <DisplayPressure+0x6e>
	  lcd_init(disp_);										// inicjalizacja obrazu
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	f000 fc45 	bl	8001d10 <lcd_init>
	  int pressure_int=(int)param_->pressure;				// pobranie danej do bufora
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800148c:	4610      	mov	r0, r2
 800148e:	4619      	mov	r1, r3
 8001490:	f7ff fb44 	bl	8000b1c <__aeabi_d2iz>
 8001494:	4603      	mov	r3, r0
 8001496:	60fb      	str	r3, [r7, #12]
	  sprintf((char *)disp_->f_line,"Pressure:");			// Załadowanie pierwszej linijki
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	3301      	adds	r3, #1
 800149c:	4909      	ldr	r1, [pc, #36]	; (80014c4 <DisplayPressure+0x80>)
 800149e:	4618      	mov	r0, r3
 80014a0:	f005 fa50 	bl	8006944 <siprintf>
	  sprintf((char *)disp_->s_line,"%d hPa",pressure_int);	// Załadowanie drugiej linijki
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	3312      	adds	r3, #18
 80014a8:	68fa      	ldr	r2, [r7, #12]
 80014aa:	4907      	ldr	r1, [pc, #28]	; (80014c8 <DisplayPressure+0x84>)
 80014ac:	4618      	mov	r0, r3
 80014ae:	f005 fa49 	bl	8006944 <siprintf>
}
 80014b2:	bf00      	nop
 80014b4:	3710      	adds	r7, #16
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	080071f8 	.word	0x080071f8
 80014c0:	08007204 	.word	0x08007204
 80014c4:	08007214 	.word	0x08007214
 80014c8:	08007220 	.word	0x08007220

080014cc <DisplayTemperature>:


void DisplayTemperature(struct lcd_disp *disp_, struct weather_parameters *param_){
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	6039      	str	r1, [r7, #0]

/**Funkcja wyświetlania temperatury pobranego ze struktury typu weather_parameters
arg: "struktura wyświetlacza", "struktura parametrów pogody"*/
	
	if(param_->temperature==0){
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014dc:	f04f 0200 	mov.w	r2, #0
 80014e0:	f04f 0300 	mov.w	r3, #0
 80014e4:	f7ff fae8 	bl	8000ab8 <__aeabi_dcmpeq>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d00c      	beq.n	8001508 <DisplayTemperature+0x3c>
		sprintf((char *)disp_->f_line,"Oczekiwanie");
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	3301      	adds	r3, #1
 80014f2:	4914      	ldr	r1, [pc, #80]	; (8001544 <DisplayTemperature+0x78>)
 80014f4:	4618      	mov	r0, r3
 80014f6:	f005 fa25 	bl	8006944 <siprintf>
		sprintf((char *)disp_->s_line,"na pomiar...:");	
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	3312      	adds	r3, #18
 80014fe:	4912      	ldr	r1, [pc, #72]	; (8001548 <DisplayTemperature+0x7c>)
 8001500:	4618      	mov	r0, r3
 8001502:	f005 fa1f 	bl	8006944 <siprintf>
	  int temperature_int=(int)param_->temperature;
	  sprintf((char *)disp_->f_line,"Temperature:");
	  sprintf((char *)disp_->s_line,"%d 'C",temperature_int);
	}

}
 8001506:	e018      	b.n	800153a <DisplayTemperature+0x6e>
	  lcd_init(disp_);
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f000 fc01 	bl	8001d10 <lcd_init>
	  int temperature_int=(int)param_->temperature;
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001514:	4610      	mov	r0, r2
 8001516:	4619      	mov	r1, r3
 8001518:	f7ff fb00 	bl	8000b1c <__aeabi_d2iz>
 800151c:	4603      	mov	r3, r0
 800151e:	60fb      	str	r3, [r7, #12]
	  sprintf((char *)disp_->f_line,"Temperature:");
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	3301      	adds	r3, #1
 8001524:	4909      	ldr	r1, [pc, #36]	; (800154c <DisplayTemperature+0x80>)
 8001526:	4618      	mov	r0, r3
 8001528:	f005 fa0c 	bl	8006944 <siprintf>
	  sprintf((char *)disp_->s_line,"%d 'C",temperature_int);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	3312      	adds	r3, #18
 8001530:	68fa      	ldr	r2, [r7, #12]
 8001532:	4907      	ldr	r1, [pc, #28]	; (8001550 <DisplayTemperature+0x84>)
 8001534:	4618      	mov	r0, r3
 8001536:	f005 fa05 	bl	8006944 <siprintf>
}
 800153a:	bf00      	nop
 800153c:	3710      	adds	r7, #16
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	080071f8 	.word	0x080071f8
 8001548:	08007204 	.word	0x08007204
 800154c:	08007228 	.word	0x08007228
 8001550:	08007238 	.word	0x08007238

08001554 <DisplayHumidity>:


void DisplayHumidity(struct lcd_disp *disp_, struct weather_parameters *param_){
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	6039      	str	r1, [r7, #0]

/**Funkcja wyświetlania wilgotniści pobranego ze struktury typu weather_parameters
arg: "struktura wyświetlacza", "struktura parametrów pogody"*/
	
	if(param_->humidity==0){
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001564:	f04f 0200 	mov.w	r2, #0
 8001568:	f04f 0300 	mov.w	r3, #0
 800156c:	f7ff faa4 	bl	8000ab8 <__aeabi_dcmpeq>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d00c      	beq.n	8001590 <DisplayHumidity+0x3c>
		sprintf((char *)disp_->f_line,"Oczekiwanie");
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	3301      	adds	r3, #1
 800157a:	4914      	ldr	r1, [pc, #80]	; (80015cc <DisplayHumidity+0x78>)
 800157c:	4618      	mov	r0, r3
 800157e:	f005 f9e1 	bl	8006944 <siprintf>
		sprintf((char *)disp_->s_line,"na pomiar...:");	
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	3312      	adds	r3, #18
 8001586:	4912      	ldr	r1, [pc, #72]	; (80015d0 <DisplayHumidity+0x7c>)
 8001588:	4618      	mov	r0, r3
 800158a:	f005 f9db 	bl	8006944 <siprintf>
	  int humidity_int=(int)param_->humidity;
	  sprintf((char *)disp_->f_line,"Humidity:");
	  sprintf((char *)disp_->s_line,"%d %%",humidity_int);
	}

}
 800158e:	e018      	b.n	80015c2 <DisplayHumidity+0x6e>
	  lcd_init(disp_);
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f000 fbbd 	bl	8001d10 <lcd_init>
	  int humidity_int=(int)param_->humidity;
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800159c:	4610      	mov	r0, r2
 800159e:	4619      	mov	r1, r3
 80015a0:	f7ff fabc 	bl	8000b1c <__aeabi_d2iz>
 80015a4:	4603      	mov	r3, r0
 80015a6:	60fb      	str	r3, [r7, #12]
	  sprintf((char *)disp_->f_line,"Humidity:");
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	3301      	adds	r3, #1
 80015ac:	4909      	ldr	r1, [pc, #36]	; (80015d4 <DisplayHumidity+0x80>)
 80015ae:	4618      	mov	r0, r3
 80015b0:	f005 f9c8 	bl	8006944 <siprintf>
	  sprintf((char *)disp_->s_line,"%d %%",humidity_int);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	3312      	adds	r3, #18
 80015b8:	68fa      	ldr	r2, [r7, #12]
 80015ba:	4907      	ldr	r1, [pc, #28]	; (80015d8 <DisplayHumidity+0x84>)
 80015bc:	4618      	mov	r0, r3
 80015be:	f005 f9c1 	bl	8006944 <siprintf>
}
 80015c2:	bf00      	nop
 80015c4:	3710      	adds	r7, #16
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	080071f8 	.word	0x080071f8
 80015d0:	08007204 	.word	0x08007204
 80015d4:	08007240 	.word	0x08007240
 80015d8:	0800724c 	.word	0x0800724c

080015dc <RunDisp>:



void RunDisp(struct lcd_disp *disp_, struct weather_parameters *param_, int position_){
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	60f8      	str	r0, [r7, #12]
 80015e4:	60b9      	str	r1, [r7, #8]
 80015e6:	607a      	str	r2, [r7, #4]

/**Funkcja wyboru wyświetlenia odpowiedniego paratemtru pogodowego
arg: "struktura wyświetlacza", "struktura parametrów pogody", "licznik 0-2"*/

	lcd_init(disp_);	// inicjalizacja wyświeltacza
 80015e8:	68f8      	ldr	r0, [r7, #12]
 80015ea:	f000 fb91 	bl	8001d10 <lcd_init>
	switch(position_)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d013      	beq.n	800161c <RunDisp+0x40>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	dc15      	bgt.n	8001626 <RunDisp+0x4a>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d003      	beq.n	8001608 <RunDisp+0x2c>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2b01      	cmp	r3, #1
 8001604:	d005      	beq.n	8001612 <RunDisp+0x36>
 8001606:	e00e      	b.n	8001626 <RunDisp+0x4a>
	{
		case 0:
			DisplayPressure(disp_,param_);
 8001608:	68b9      	ldr	r1, [r7, #8]
 800160a:	68f8      	ldr	r0, [r7, #12]
 800160c:	f7ff ff1a 	bl	8001444 <DisplayPressure>

			break;
 8001610:	e009      	b.n	8001626 <RunDisp+0x4a>
		
		case 1:
			DisplayTemperature(disp_,param_);		
 8001612:	68b9      	ldr	r1, [r7, #8]
 8001614:	68f8      	ldr	r0, [r7, #12]
 8001616:	f7ff ff59 	bl	80014cc <DisplayTemperature>
			break;
 800161a:	e004      	b.n	8001626 <RunDisp+0x4a>
				
		case 2:
			DisplayHumidity(disp_,param_);		
 800161c:	68b9      	ldr	r1, [r7, #8]
 800161e:	68f8      	ldr	r0, [r7, #12]
 8001620:	f7ff ff98 	bl	8001554 <DisplayHumidity>
			break;
 8001624:	bf00      	nop

	}
	lcd_display(disp_);			// Wyświetlenie załadowanych wcześniej danych
 8001626:	68f8      	ldr	r0, [r7, #12]
 8001628:	f000 fbf8 	bl	8001e1c <lcd_display>
}
 800162c:	bf00      	nop
 800162e:	3710      	adds	r7, #16
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}

08001634 <bmp_init>:
  ******************************************************************************
*/
#include "bmp180.h"

bmp_state bmp_init(I2C_HandleTypeDef * i2c)
{
 8001634:	b4b0      	push	{r4, r5, r7}
 8001636:	b08d      	sub	sp, #52	; 0x34
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	6039      	str	r1, [r7, #0]
	bmp_state state;
	state.i2c = i2c;
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	60bb      	str	r3, [r7, #8]
	state.AC1 = 0;
 8001642:	2300      	movs	r3, #0
 8001644:	81bb      	strh	r3, [r7, #12]
	state.AC2 = 0;
 8001646:	2300      	movs	r3, #0
 8001648:	81fb      	strh	r3, [r7, #14]
	state.AC3 = 0;
 800164a:	2300      	movs	r3, #0
 800164c:	823b      	strh	r3, [r7, #16]
	state.AC4 = 0;
 800164e:	2300      	movs	r3, #0
 8001650:	83bb      	strh	r3, [r7, #28]
	state.AC5 = 0;
 8001652:	2300      	movs	r3, #0
 8001654:	83fb      	strh	r3, [r7, #30]
	state.AC6 = 0;
 8001656:	2300      	movs	r3, #0
 8001658:	843b      	strh	r3, [r7, #32]
	state.B1 = 0;
 800165a:	2300      	movs	r3, #0
 800165c:	827b      	strh	r3, [r7, #18]
	state.B2 = 0;
 800165e:	2300      	movs	r3, #0
 8001660:	82bb      	strh	r3, [r7, #20]
	state.MB = 0;
 8001662:	2300      	movs	r3, #0
 8001664:	82fb      	strh	r3, [r7, #22]
	state.MC = 0;
 8001666:	2300      	movs	r3, #0
 8001668:	833b      	strh	r3, [r7, #24]
	state.MD = 0;
 800166a:	2300      	movs	r3, #0
 800166c:	837b      	strh	r3, [r7, #26]
	state.UT = 0;
 800166e:	2300      	movs	r3, #0
 8001670:	627b      	str	r3, [r7, #36]	; 0x24
	state.UP = 0;
 8001672:	2300      	movs	r3, #0
 8001674:	62bb      	str	r3, [r7, #40]	; 0x28
	state.B5 = 0.0;
 8001676:	2300      	movs	r3, #0
 8001678:	62fb      	str	r3, [r7, #44]	; 0x2c
	return state;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	461d      	mov	r5, r3
 800167e:	f107 0408 	add.w	r4, r7, #8
 8001682:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001684:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001686:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001688:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800168a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800168e:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	3734      	adds	r7, #52	; 0x34
 8001696:	46bd      	mov	sp, r7
 8001698:	bcb0      	pop	{r4, r5, r7}
 800169a:	4770      	bx	lr

0800169c <bmp_read_data>:

uint8_t bmp_read_data(bmp_state * state, uint8_t reg)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b088      	sub	sp, #32
 80016a0:	af04      	add	r7, sp, #16
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	460b      	mov	r3, r1
 80016a6:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp = 0;
 80016a8:	2300      	movs	r3, #0
 80016aa:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(state->i2c, 0xEF, reg, 1, &tmp, 1, 100);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6818      	ldr	r0, [r3, #0]
 80016b0:	78fb      	ldrb	r3, [r7, #3]
 80016b2:	b29a      	uxth	r2, r3
 80016b4:	2364      	movs	r3, #100	; 0x64
 80016b6:	9302      	str	r3, [sp, #8]
 80016b8:	2301      	movs	r3, #1
 80016ba:	9301      	str	r3, [sp, #4]
 80016bc:	f107 030f 	add.w	r3, r7, #15
 80016c0:	9300      	str	r3, [sp, #0]
 80016c2:	2301      	movs	r3, #1
 80016c4:	21ef      	movs	r1, #239	; 0xef
 80016c6:	f001 fe67 	bl	8003398 <HAL_I2C_Mem_Read>
	return tmp;
 80016ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3710      	adds	r7, #16
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <bmp_write_data>:

void bmp_write_data(bmp_state * state, uint8_t reg, uint8_t value)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b086      	sub	sp, #24
 80016d8:	af04      	add	r7, sp, #16
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	460b      	mov	r3, r1
 80016de:	70fb      	strb	r3, [r7, #3]
 80016e0:	4613      	mov	r3, r2
 80016e2:	70bb      	strb	r3, [r7, #2]
	HAL_I2C_Mem_Write(state->i2c, 0xEE, reg, 1, &value, 1, 100);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6818      	ldr	r0, [r3, #0]
 80016e8:	78fb      	ldrb	r3, [r7, #3]
 80016ea:	b29a      	uxth	r2, r3
 80016ec:	2364      	movs	r3, #100	; 0x64
 80016ee:	9302      	str	r3, [sp, #8]
 80016f0:	2301      	movs	r3, #1
 80016f2:	9301      	str	r3, [sp, #4]
 80016f4:	1cbb      	adds	r3, r7, #2
 80016f6:	9300      	str	r3, [sp, #0]
 80016f8:	2301      	movs	r3, #1
 80016fa:	21ee      	movs	r1, #238	; 0xee
 80016fc:	f001 fd38 	bl	8003170 <HAL_I2C_Mem_Write>
}
 8001700:	bf00      	nop
 8001702:	3708      	adds	r7, #8
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}

08001708 <bmp_read_compensation_data>:

void bmp_read_compensation_data(bmp_state * state)
{
 8001708:	b590      	push	{r4, r7, lr}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
	state->AC1 = (bmp_read_data(state, 0xAA) << 8) + bmp_read_data(state, 0xAB);
 8001710:	21aa      	movs	r1, #170	; 0xaa
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f7ff ffc2 	bl	800169c <bmp_read_data>
 8001718:	4603      	mov	r3, r0
 800171a:	b29b      	uxth	r3, r3
 800171c:	021b      	lsls	r3, r3, #8
 800171e:	b29c      	uxth	r4, r3
 8001720:	21ab      	movs	r1, #171	; 0xab
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f7ff ffba 	bl	800169c <bmp_read_data>
 8001728:	4603      	mov	r3, r0
 800172a:	b29b      	uxth	r3, r3
 800172c:	4423      	add	r3, r4
 800172e:	b29b      	uxth	r3, r3
 8001730:	b21a      	sxth	r2, r3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	809a      	strh	r2, [r3, #4]
	state->AC2 = (bmp_read_data(state, 0xAC) << 8) + bmp_read_data(state, 0xAD);
 8001736:	21ac      	movs	r1, #172	; 0xac
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f7ff ffaf 	bl	800169c <bmp_read_data>
 800173e:	4603      	mov	r3, r0
 8001740:	b29b      	uxth	r3, r3
 8001742:	021b      	lsls	r3, r3, #8
 8001744:	b29c      	uxth	r4, r3
 8001746:	21ad      	movs	r1, #173	; 0xad
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f7ff ffa7 	bl	800169c <bmp_read_data>
 800174e:	4603      	mov	r3, r0
 8001750:	b29b      	uxth	r3, r3
 8001752:	4423      	add	r3, r4
 8001754:	b29b      	uxth	r3, r3
 8001756:	b21a      	sxth	r2, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	80da      	strh	r2, [r3, #6]
	state->AC3 = (bmp_read_data(state, 0xAE) << 8) + bmp_read_data(state, 0xAF);
 800175c:	21ae      	movs	r1, #174	; 0xae
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f7ff ff9c 	bl	800169c <bmp_read_data>
 8001764:	4603      	mov	r3, r0
 8001766:	b29b      	uxth	r3, r3
 8001768:	021b      	lsls	r3, r3, #8
 800176a:	b29c      	uxth	r4, r3
 800176c:	21af      	movs	r1, #175	; 0xaf
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f7ff ff94 	bl	800169c <bmp_read_data>
 8001774:	4603      	mov	r3, r0
 8001776:	b29b      	uxth	r3, r3
 8001778:	4423      	add	r3, r4
 800177a:	b29b      	uxth	r3, r3
 800177c:	b21a      	sxth	r2, r3
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	811a      	strh	r2, [r3, #8]
	state->AC4 = (bmp_read_data(state, 0xB0) << 8) + bmp_read_data(state, 0xB1);
 8001782:	21b0      	movs	r1, #176	; 0xb0
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f7ff ff89 	bl	800169c <bmp_read_data>
 800178a:	4603      	mov	r3, r0
 800178c:	b29b      	uxth	r3, r3
 800178e:	021b      	lsls	r3, r3, #8
 8001790:	b29c      	uxth	r4, r3
 8001792:	21b1      	movs	r1, #177	; 0xb1
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f7ff ff81 	bl	800169c <bmp_read_data>
 800179a:	4603      	mov	r3, r0
 800179c:	b29b      	uxth	r3, r3
 800179e:	4423      	add	r3, r4
 80017a0:	b29a      	uxth	r2, r3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	829a      	strh	r2, [r3, #20]
	state->AC5 = (bmp_read_data(state, 0xB2) << 8) + bmp_read_data(state, 0xB3);
 80017a6:	21b2      	movs	r1, #178	; 0xb2
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f7ff ff77 	bl	800169c <bmp_read_data>
 80017ae:	4603      	mov	r3, r0
 80017b0:	b29b      	uxth	r3, r3
 80017b2:	021b      	lsls	r3, r3, #8
 80017b4:	b29c      	uxth	r4, r3
 80017b6:	21b3      	movs	r1, #179	; 0xb3
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f7ff ff6f 	bl	800169c <bmp_read_data>
 80017be:	4603      	mov	r3, r0
 80017c0:	b29b      	uxth	r3, r3
 80017c2:	4423      	add	r3, r4
 80017c4:	b29a      	uxth	r2, r3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	82da      	strh	r2, [r3, #22]
	state->AC6 = (bmp_read_data(state, 0xB4) << 8) + bmp_read_data(state, 0xB5);
 80017ca:	21b4      	movs	r1, #180	; 0xb4
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f7ff ff65 	bl	800169c <bmp_read_data>
 80017d2:	4603      	mov	r3, r0
 80017d4:	b29b      	uxth	r3, r3
 80017d6:	021b      	lsls	r3, r3, #8
 80017d8:	b29c      	uxth	r4, r3
 80017da:	21b5      	movs	r1, #181	; 0xb5
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f7ff ff5d 	bl	800169c <bmp_read_data>
 80017e2:	4603      	mov	r3, r0
 80017e4:	b29b      	uxth	r3, r3
 80017e6:	4423      	add	r3, r4
 80017e8:	b29a      	uxth	r2, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	831a      	strh	r2, [r3, #24]
	state->B1 = (bmp_read_data(state, 0xB6) << 8) + bmp_read_data(state, 0xB7);
 80017ee:	21b6      	movs	r1, #182	; 0xb6
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f7ff ff53 	bl	800169c <bmp_read_data>
 80017f6:	4603      	mov	r3, r0
 80017f8:	b29b      	uxth	r3, r3
 80017fa:	021b      	lsls	r3, r3, #8
 80017fc:	b29c      	uxth	r4, r3
 80017fe:	21b7      	movs	r1, #183	; 0xb7
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f7ff ff4b 	bl	800169c <bmp_read_data>
 8001806:	4603      	mov	r3, r0
 8001808:	b29b      	uxth	r3, r3
 800180a:	4423      	add	r3, r4
 800180c:	b29b      	uxth	r3, r3
 800180e:	b21a      	sxth	r2, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	815a      	strh	r2, [r3, #10]
	state->B2 = (bmp_read_data(state, 0xB8) << 8) + bmp_read_data(state, 0xB9);
 8001814:	21b8      	movs	r1, #184	; 0xb8
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f7ff ff40 	bl	800169c <bmp_read_data>
 800181c:	4603      	mov	r3, r0
 800181e:	b29b      	uxth	r3, r3
 8001820:	021b      	lsls	r3, r3, #8
 8001822:	b29c      	uxth	r4, r3
 8001824:	21b9      	movs	r1, #185	; 0xb9
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f7ff ff38 	bl	800169c <bmp_read_data>
 800182c:	4603      	mov	r3, r0
 800182e:	b29b      	uxth	r3, r3
 8001830:	4423      	add	r3, r4
 8001832:	b29b      	uxth	r3, r3
 8001834:	b21a      	sxth	r2, r3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	819a      	strh	r2, [r3, #12]
	state->MB = (bmp_read_data(state, 0xBA) << 8) + bmp_read_data(state, 0xBB);
 800183a:	21ba      	movs	r1, #186	; 0xba
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f7ff ff2d 	bl	800169c <bmp_read_data>
 8001842:	4603      	mov	r3, r0
 8001844:	b29b      	uxth	r3, r3
 8001846:	021b      	lsls	r3, r3, #8
 8001848:	b29c      	uxth	r4, r3
 800184a:	21bb      	movs	r1, #187	; 0xbb
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	f7ff ff25 	bl	800169c <bmp_read_data>
 8001852:	4603      	mov	r3, r0
 8001854:	b29b      	uxth	r3, r3
 8001856:	4423      	add	r3, r4
 8001858:	b29b      	uxth	r3, r3
 800185a:	b21a      	sxth	r2, r3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	81da      	strh	r2, [r3, #14]
	state->MC = (bmp_read_data(state, 0xBC) << 8) + bmp_read_data(state, 0xBD);
 8001860:	21bc      	movs	r1, #188	; 0xbc
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f7ff ff1a 	bl	800169c <bmp_read_data>
 8001868:	4603      	mov	r3, r0
 800186a:	b29b      	uxth	r3, r3
 800186c:	021b      	lsls	r3, r3, #8
 800186e:	b29c      	uxth	r4, r3
 8001870:	21bd      	movs	r1, #189	; 0xbd
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f7ff ff12 	bl	800169c <bmp_read_data>
 8001878:	4603      	mov	r3, r0
 800187a:	b29b      	uxth	r3, r3
 800187c:	4423      	add	r3, r4
 800187e:	b29b      	uxth	r3, r3
 8001880:	b21a      	sxth	r2, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	821a      	strh	r2, [r3, #16]
	state->MD = (bmp_read_data(state, 0xBE) << 8) + bmp_read_data(state, 0xBF);
 8001886:	21be      	movs	r1, #190	; 0xbe
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f7ff ff07 	bl	800169c <bmp_read_data>
 800188e:	4603      	mov	r3, r0
 8001890:	b29b      	uxth	r3, r3
 8001892:	021b      	lsls	r3, r3, #8
 8001894:	b29c      	uxth	r4, r3
 8001896:	21bf      	movs	r1, #191	; 0xbf
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f7ff feff 	bl	800169c <bmp_read_data>
 800189e:	4603      	mov	r3, r0
 80018a0:	b29b      	uxth	r3, r3
 80018a2:	4423      	add	r3, r4
 80018a4:	b29b      	uxth	r3, r3
 80018a6:	b21a      	sxth	r2, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	825a      	strh	r2, [r3, #18]
}
 80018ac:	bf00      	nop
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd90      	pop	{r4, r7, pc}

080018b4 <bmp_read_temp_and_pressure>:

void bmp_read_temp_and_pressure(bmp_state * state)
{
 80018b4:	b590      	push	{r4, r7, lr}
 80018b6:	b085      	sub	sp, #20
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
	bmp_write_data(state, 0xF4, 0x2E);
 80018bc:	222e      	movs	r2, #46	; 0x2e
 80018be:	21f4      	movs	r1, #244	; 0xf4
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	f7ff ff07 	bl	80016d4 <bmp_write_data>
	HAL_Delay(5);
 80018c6:	2005      	movs	r0, #5
 80018c8:	f000 ff28 	bl	800271c <HAL_Delay>
	state->UT = (bmp_read_data(state, 0xF6) << 8) + bmp_read_data(state, 0xF7);
 80018cc:	21f6      	movs	r1, #246	; 0xf6
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f7ff fee4 	bl	800169c <bmp_read_data>
 80018d4:	4603      	mov	r3, r0
 80018d6:	021c      	lsls	r4, r3, #8
 80018d8:	21f7      	movs	r1, #247	; 0xf7
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f7ff fede 	bl	800169c <bmp_read_data>
 80018e0:	4603      	mov	r3, r0
 80018e2:	18e2      	adds	r2, r4, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	61da      	str	r2, [r3, #28]

	uint8_t OSS = 3; // "ultra high resolution"
 80018e8:	2303      	movs	r3, #3
 80018ea:	73fb      	strb	r3, [r7, #15]
	bmp_write_data(state, 0xF4, 0x34 + (OSS << 6));
 80018ec:	7bfb      	ldrb	r3, [r7, #15]
 80018ee:	019b      	lsls	r3, r3, #6
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	3334      	adds	r3, #52	; 0x34
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	461a      	mov	r2, r3
 80018f8:	21f4      	movs	r1, #244	; 0xf4
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f7ff feea 	bl	80016d4 <bmp_write_data>
	if(OSS == 0) HAL_Delay(5);
 8001900:	7bfb      	ldrb	r3, [r7, #15]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d103      	bne.n	800190e <bmp_read_temp_and_pressure+0x5a>
 8001906:	2005      	movs	r0, #5
 8001908:	f000 ff08 	bl	800271c <HAL_Delay>
 800190c:	e010      	b.n	8001930 <bmp_read_temp_and_pressure+0x7c>
	else if(OSS == 1) HAL_Delay(8);
 800190e:	7bfb      	ldrb	r3, [r7, #15]
 8001910:	2b01      	cmp	r3, #1
 8001912:	d103      	bne.n	800191c <bmp_read_temp_and_pressure+0x68>
 8001914:	2008      	movs	r0, #8
 8001916:	f000 ff01 	bl	800271c <HAL_Delay>
 800191a:	e009      	b.n	8001930 <bmp_read_temp_and_pressure+0x7c>
	else if(OSS == 2) HAL_Delay(14);
 800191c:	7bfb      	ldrb	r3, [r7, #15]
 800191e:	2b02      	cmp	r3, #2
 8001920:	d103      	bne.n	800192a <bmp_read_temp_and_pressure+0x76>
 8001922:	200e      	movs	r0, #14
 8001924:	f000 fefa 	bl	800271c <HAL_Delay>
 8001928:	e002      	b.n	8001930 <bmp_read_temp_and_pressure+0x7c>
	else HAL_Delay(26);
 800192a:	201a      	movs	r0, #26
 800192c:	f000 fef6 	bl	800271c <HAL_Delay>
	state->UP = ((bmp_read_data(state, 0xF6) << 16) + (bmp_read_data(state, 0xF7) << 8) + bmp_read_data(state, 0xF8)) >> 8-OSS;
 8001930:	21f6      	movs	r1, #246	; 0xf6
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f7ff feb2 	bl	800169c <bmp_read_data>
 8001938:	4603      	mov	r3, r0
 800193a:	041c      	lsls	r4, r3, #16
 800193c:	21f7      	movs	r1, #247	; 0xf7
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f7ff feac 	bl	800169c <bmp_read_data>
 8001944:	4603      	mov	r3, r0
 8001946:	021b      	lsls	r3, r3, #8
 8001948:	441c      	add	r4, r3
 800194a:	21f8      	movs	r1, #248	; 0xf8
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f7ff fea5 	bl	800169c <bmp_read_data>
 8001952:	4603      	mov	r3, r0
 8001954:	18e2      	adds	r2, r4, r3
 8001956:	7bfb      	ldrb	r3, [r7, #15]
 8001958:	f1c3 0308 	rsb	r3, r3, #8
 800195c:	411a      	asrs	r2, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	621a      	str	r2, [r3, #32]
}
 8001962:	bf00      	nop
 8001964:	3714      	adds	r7, #20
 8001966:	46bd      	mov	sp, r7
 8001968:	bd90      	pop	{r4, r7, pc}
	...

0800196c <bmp_get_pressure>:
	T = (state->B5 + 8) / 16.0;
	return T / 10.0;
}

double bmp_get_pressure(bmp_state * state)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b08c      	sub	sp, #48	; 0x30
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
	int32_t B6, X1, X2, X3, B3, P;
	uint32_t B4, B7;
	uint8_t OSS = 3;
 8001974:	2303      	movs	r3, #3
 8001976:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	B6 = state->B5 - 4000;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197e:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 8001982:	627b      	str	r3, [r7, #36]	; 0x24
	X1 = (state->B2 * (B6 * B6 / 4096)) / 2048;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800198a:	461a      	mov	r2, r3
 800198c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198e:	fb03 f303 	mul.w	r3, r3, r3
 8001992:	2b00      	cmp	r3, #0
 8001994:	da01      	bge.n	800199a <bmp_get_pressure+0x2e>
 8001996:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800199a:	131b      	asrs	r3, r3, #12
 800199c:	fb03 f302 	mul.w	r3, r3, r2
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	da01      	bge.n	80019a8 <bmp_get_pressure+0x3c>
 80019a4:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 80019a8:	12db      	asrs	r3, r3, #11
 80019aa:	623b      	str	r3, [r7, #32]
	X2 = state->AC2 * B6 / 2048;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80019b2:	461a      	mov	r2, r3
 80019b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b6:	fb03 f302 	mul.w	r3, r3, r2
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	da01      	bge.n	80019c2 <bmp_get_pressure+0x56>
 80019be:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 80019c2:	12db      	asrs	r3, r3, #11
 80019c4:	61fb      	str	r3, [r7, #28]
	X3 = X1 + X2;
 80019c6:	6a3a      	ldr	r2, [r7, #32]
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	4413      	add	r3, r2
 80019cc:	61bb      	str	r3, [r7, #24]
	B3 = (((state->AC1 * 4 + X3) << OSS) + 2) / 4;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80019d4:	009a      	lsls	r2, r3, #2
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	441a      	add	r2, r3
 80019da:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80019de:	fa02 f303 	lsl.w	r3, r2, r3
 80019e2:	3302      	adds	r3, #2
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	da00      	bge.n	80019ea <bmp_get_pressure+0x7e>
 80019e8:	3303      	adds	r3, #3
 80019ea:	109b      	asrs	r3, r3, #2
 80019ec:	617b      	str	r3, [r7, #20]
	X1 = state->AC3 * B6 / 8192;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80019f4:	461a      	mov	r2, r3
 80019f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f8:	fb03 f302 	mul.w	r3, r3, r2
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	da02      	bge.n	8001a06 <bmp_get_pressure+0x9a>
 8001a00:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 8001a04:	331f      	adds	r3, #31
 8001a06:	135b      	asrs	r3, r3, #13
 8001a08:	623b      	str	r3, [r7, #32]
	X2 = (state->B1 * (B6 * B6 / 4096)) / 65536;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001a10:	461a      	mov	r2, r3
 8001a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a14:	fb03 f303 	mul.w	r3, r3, r3
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	da01      	bge.n	8001a20 <bmp_get_pressure+0xb4>
 8001a1c:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001a20:	131b      	asrs	r3, r3, #12
 8001a22:	fb03 f302 	mul.w	r3, r3, r2
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	da02      	bge.n	8001a30 <bmp_get_pressure+0xc4>
 8001a2a:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001a2e:	33ff      	adds	r3, #255	; 0xff
 8001a30:	141b      	asrs	r3, r3, #16
 8001a32:	61fb      	str	r3, [r7, #28]
	X3 = ((X1 + X2) + 2) / 4;
 8001a34:	6a3a      	ldr	r2, [r7, #32]
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	4413      	add	r3, r2
 8001a3a:	3302      	adds	r3, #2
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	da00      	bge.n	8001a42 <bmp_get_pressure+0xd6>
 8001a40:	3303      	adds	r3, #3
 8001a42:	109b      	asrs	r3, r3, #2
 8001a44:	61bb      	str	r3, [r7, #24]

	B4 = state->AC4 * (uint32_t)(X3 + 32768) / 32768;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	8a9b      	ldrh	r3, [r3, #20]
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001a52:	fb03 f302 	mul.w	r3, r3, r2
 8001a56:	0bdb      	lsrs	r3, r3, #15
 8001a58:	613b      	str	r3, [r7, #16]
	B7 = ((uint32_t)state->UP - B3) * (50000 >> OSS);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6a1b      	ldr	r3, [r3, #32]
 8001a5e:	461a      	mov	r2, r3
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001a68:	f24c 3150 	movw	r1, #50000	; 0xc350
 8001a6c:	fa41 f202 	asr.w	r2, r1, r2
 8001a70:	fb02 f303 	mul.w	r3, r2, r3
 8001a74:	60fb      	str	r3, [r7, #12]
	if(B7 < 0x80000000) P = (B7 * 2) / B4;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	db06      	blt.n	8001a8a <bmp_get_pressure+0x11e>
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	005a      	lsls	r2, r3, #1
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a88:	e005      	b.n	8001a96 <bmp_get_pressure+0x12a>
	else P = (B7 / B4) * 2;
 8001a8a:	68fa      	ldr	r2, [r7, #12]
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	62fb      	str	r3, [r7, #44]	; 0x2c

	X1 = (P / 256) * (P / 256);
 8001a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	da00      	bge.n	8001a9e <bmp_get_pressure+0x132>
 8001a9c:	33ff      	adds	r3, #255	; 0xff
 8001a9e:	121b      	asrs	r3, r3, #8
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	da00      	bge.n	8001aaa <bmp_get_pressure+0x13e>
 8001aa8:	33ff      	adds	r3, #255	; 0xff
 8001aaa:	121b      	asrs	r3, r3, #8
 8001aac:	fb03 f302 	mul.w	r3, r3, r2
 8001ab0:	623b      	str	r3, [r7, #32]
	X1 = (X1 * 3038) / 65536;
 8001ab2:	6a3b      	ldr	r3, [r7, #32]
 8001ab4:	f640 32de 	movw	r2, #3038	; 0xbde
 8001ab8:	fb02 f303 	mul.w	r3, r2, r3
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	da02      	bge.n	8001ac6 <bmp_get_pressure+0x15a>
 8001ac0:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001ac4:	33ff      	adds	r3, #255	; 0xff
 8001ac6:	141b      	asrs	r3, r3, #16
 8001ac8:	623b      	str	r3, [r7, #32]
	X2 = (-7357 * P) / 65536;
 8001aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001acc:	4a14      	ldr	r2, [pc, #80]	; (8001b20 <bmp_get_pressure+0x1b4>)
 8001ace:	fb02 f303 	mul.w	r3, r2, r3
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	da02      	bge.n	8001adc <bmp_get_pressure+0x170>
 8001ad6:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001ada:	33ff      	adds	r3, #255	; 0xff
 8001adc:	141b      	asrs	r3, r3, #16
 8001ade:	61fb      	str	r3, [r7, #28]
	P = P + (X1 + X2 + 3791) / 16;
 8001ae0:	6a3a      	ldr	r2, [r7, #32]
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	da00      	bge.n	8001af0 <bmp_get_pressure+0x184>
 8001aee:	330f      	adds	r3, #15
 8001af0:	111b      	asrs	r3, r3, #4
 8001af2:	461a      	mov	r2, r3
 8001af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001af6:	4413      	add	r3, r2
 8001af8:	62fb      	str	r3, [r7, #44]	; 0x2c
	return P / 100.0;
 8001afa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001afc:	f7fe fd0a 	bl	8000514 <__aeabi_i2d>
 8001b00:	f04f 0200 	mov.w	r2, #0
 8001b04:	4b07      	ldr	r3, [pc, #28]	; (8001b24 <bmp_get_pressure+0x1b8>)
 8001b06:	f7fe fe99 	bl	800083c <__aeabi_ddiv>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	ec43 2b17 	vmov	d7, r2, r3
}
 8001b12:	eeb0 0a47 	vmov.f32	s0, s14
 8001b16:	eef0 0a67 	vmov.f32	s1, s15
 8001b1a:	3730      	adds	r7, #48	; 0x30
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	ffffe343 	.word	0xffffe343
 8001b24:	40590000 	.word	0x40590000

08001b28 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b08a      	sub	sp, #40	; 0x28
 8001b2c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b2e:	f107 0314 	add.w	r3, r7, #20
 8001b32:	2200      	movs	r2, #0
 8001b34:	601a      	str	r2, [r3, #0]
 8001b36:	605a      	str	r2, [r3, #4]
 8001b38:	609a      	str	r2, [r3, #8]
 8001b3a:	60da      	str	r2, [r3, #12]
 8001b3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b3e:	4b2f      	ldr	r3, [pc, #188]	; (8001bfc <MX_GPIO_Init+0xd4>)
 8001b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b42:	4a2e      	ldr	r2, [pc, #184]	; (8001bfc <MX_GPIO_Init+0xd4>)
 8001b44:	f043 0304 	orr.w	r3, r3, #4
 8001b48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b4a:	4b2c      	ldr	r3, [pc, #176]	; (8001bfc <MX_GPIO_Init+0xd4>)
 8001b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b4e:	f003 0304 	and.w	r3, r3, #4
 8001b52:	613b      	str	r3, [r7, #16]
 8001b54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b56:	4b29      	ldr	r3, [pc, #164]	; (8001bfc <MX_GPIO_Init+0xd4>)
 8001b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b5a:	4a28      	ldr	r2, [pc, #160]	; (8001bfc <MX_GPIO_Init+0xd4>)
 8001b5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b62:	4b26      	ldr	r3, [pc, #152]	; (8001bfc <MX_GPIO_Init+0xd4>)
 8001b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b6a:	60fb      	str	r3, [r7, #12]
 8001b6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b6e:	4b23      	ldr	r3, [pc, #140]	; (8001bfc <MX_GPIO_Init+0xd4>)
 8001b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b72:	4a22      	ldr	r2, [pc, #136]	; (8001bfc <MX_GPIO_Init+0xd4>)
 8001b74:	f043 0301 	orr.w	r3, r3, #1
 8001b78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b7a:	4b20      	ldr	r3, [pc, #128]	; (8001bfc <MX_GPIO_Init+0xd4>)
 8001b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b7e:	f003 0301 	and.w	r3, r3, #1
 8001b82:	60bb      	str	r3, [r7, #8]
 8001b84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b86:	4b1d      	ldr	r3, [pc, #116]	; (8001bfc <MX_GPIO_Init+0xd4>)
 8001b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b8a:	4a1c      	ldr	r2, [pc, #112]	; (8001bfc <MX_GPIO_Init+0xd4>)
 8001b8c:	f043 0302 	orr.w	r3, r3, #2
 8001b90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b92:	4b1a      	ldr	r3, [pc, #104]	; (8001bfc <MX_GPIO_Init+0xd4>)
 8001b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b96:	f003 0302 	and.w	r3, r3, #2
 8001b9a:	607b      	str	r3, [r7, #4]
 8001b9c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DHT_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	2121      	movs	r1, #33	; 0x21
 8001ba2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ba6:	f001 f92f 	bl	8002e08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001baa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001bb0:	4b13      	ldr	r3, [pc, #76]	; (8001c00 <MX_GPIO_Init+0xd8>)
 8001bb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001bb8:	f107 0314 	add.w	r3, r7, #20
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	4811      	ldr	r0, [pc, #68]	; (8001c04 <MX_GPIO_Init+0xdc>)
 8001bc0:	f000 ff60 	bl	8002a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = DHT_Pin|LD2_Pin;
 8001bc4:	2321      	movs	r3, #33	; 0x21
 8001bc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd4:	f107 0314 	add.w	r3, r7, #20
 8001bd8:	4619      	mov	r1, r3
 8001bda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bde:	f000 ff51 	bl	8002a84 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001be2:	2200      	movs	r2, #0
 8001be4:	2100      	movs	r1, #0
 8001be6:	2028      	movs	r0, #40	; 0x28
 8001be8:	f000 fe97 	bl	800291a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001bec:	2028      	movs	r0, #40	; 0x28
 8001bee:	f000 feb0 	bl	8002952 <HAL_NVIC_EnableIRQ>

}
 8001bf2:	bf00      	nop
 8001bf4:	3728      	adds	r7, #40	; 0x28
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	40021000 	.word	0x40021000
 8001c00:	10210000 	.word	0x10210000
 8001c04:	48000800 	.word	0x48000800

08001c08 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001c0c:	4b1b      	ldr	r3, [pc, #108]	; (8001c7c <MX_I2C2_Init+0x74>)
 8001c0e:	4a1c      	ldr	r2, [pc, #112]	; (8001c80 <MX_I2C2_Init+0x78>)
 8001c10:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8001c12:	4b1a      	ldr	r3, [pc, #104]	; (8001c7c <MX_I2C2_Init+0x74>)
 8001c14:	4a1b      	ldr	r2, [pc, #108]	; (8001c84 <MX_I2C2_Init+0x7c>)
 8001c16:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001c18:	4b18      	ldr	r3, [pc, #96]	; (8001c7c <MX_I2C2_Init+0x74>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c1e:	4b17      	ldr	r3, [pc, #92]	; (8001c7c <MX_I2C2_Init+0x74>)
 8001c20:	2201      	movs	r2, #1
 8001c22:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c24:	4b15      	ldr	r3, [pc, #84]	; (8001c7c <MX_I2C2_Init+0x74>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001c2a:	4b14      	ldr	r3, [pc, #80]	; (8001c7c <MX_I2C2_Init+0x74>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001c30:	4b12      	ldr	r3, [pc, #72]	; (8001c7c <MX_I2C2_Init+0x74>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c36:	4b11      	ldr	r3, [pc, #68]	; (8001c7c <MX_I2C2_Init+0x74>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c3c:	4b0f      	ldr	r3, [pc, #60]	; (8001c7c <MX_I2C2_Init+0x74>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001c42:	480e      	ldr	r0, [pc, #56]	; (8001c7c <MX_I2C2_Init+0x74>)
 8001c44:	f001 f910 	bl	8002e68 <HAL_I2C_Init>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001c4e:	f000 fab9 	bl	80021c4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c52:	2100      	movs	r1, #0
 8001c54:	4809      	ldr	r0, [pc, #36]	; (8001c7c <MX_I2C2_Init+0x74>)
 8001c56:	f001 fed5 	bl	8003a04 <HAL_I2CEx_ConfigAnalogFilter>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001c60:	f000 fab0 	bl	80021c4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001c64:	2100      	movs	r1, #0
 8001c66:	4805      	ldr	r0, [pc, #20]	; (8001c7c <MX_I2C2_Init+0x74>)
 8001c68:	f001 ff17 	bl	8003a9a <HAL_I2CEx_ConfigDigitalFilter>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001c72:	f000 faa7 	bl	80021c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001c76:	bf00      	nop
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	200000b4 	.word	0x200000b4
 8001c80:	40005800 	.word	0x40005800
 8001c84:	10909cec 	.word	0x10909cec

08001c88 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b08a      	sub	sp, #40	; 0x28
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c90:	f107 0314 	add.w	r3, r7, #20
 8001c94:	2200      	movs	r2, #0
 8001c96:	601a      	str	r2, [r3, #0]
 8001c98:	605a      	str	r2, [r3, #4]
 8001c9a:	609a      	str	r2, [r3, #8]
 8001c9c:	60da      	str	r2, [r3, #12]
 8001c9e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a17      	ldr	r2, [pc, #92]	; (8001d04 <HAL_I2C_MspInit+0x7c>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d128      	bne.n	8001cfc <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001caa:	4b17      	ldr	r3, [pc, #92]	; (8001d08 <HAL_I2C_MspInit+0x80>)
 8001cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cae:	4a16      	ldr	r2, [pc, #88]	; (8001d08 <HAL_I2C_MspInit+0x80>)
 8001cb0:	f043 0302 	orr.w	r3, r3, #2
 8001cb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cb6:	4b14      	ldr	r3, [pc, #80]	; (8001d08 <HAL_I2C_MspInit+0x80>)
 8001cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cba:	f003 0302 	and.w	r3, r3, #2
 8001cbe:	613b      	str	r3, [r7, #16]
 8001cc0:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001cc2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001cc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cc8:	2312      	movs	r3, #18
 8001cca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001cd4:	2304      	movs	r3, #4
 8001cd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cd8:	f107 0314 	add.w	r3, r7, #20
 8001cdc:	4619      	mov	r1, r3
 8001cde:	480b      	ldr	r0, [pc, #44]	; (8001d0c <HAL_I2C_MspInit+0x84>)
 8001ce0:	f000 fed0 	bl	8002a84 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001ce4:	4b08      	ldr	r3, [pc, #32]	; (8001d08 <HAL_I2C_MspInit+0x80>)
 8001ce6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce8:	4a07      	ldr	r2, [pc, #28]	; (8001d08 <HAL_I2C_MspInit+0x80>)
 8001cea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001cee:	6593      	str	r3, [r2, #88]	; 0x58
 8001cf0:	4b05      	ldr	r3, [pc, #20]	; (8001d08 <HAL_I2C_MspInit+0x80>)
 8001cf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cf4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cf8:	60fb      	str	r3, [r7, #12]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001cfc:	bf00      	nop
 8001cfe:	3728      	adds	r7, #40	; 0x28
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	40005800 	.word	0x40005800
 8001d08:	40021000 	.word	0x40021000
 8001d0c:	48000400 	.word	0x48000400

08001d10 <lcd_init>:
#include "i2c.h"



void lcd_init(struct lcd_disp * lcd)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	73fb      	strb	r3, [r7, #15]
	/* set backlight */
	if(lcd->bl)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <lcd_init+0x1a>
	{
		xpin = BL_PIN;
 8001d26:	2308      	movs	r3, #8
 8001d28:	73fb      	strb	r3, [r7, #15]
	}

	/* init sequence */
	HAL_Delay(40);
 8001d2a:	2028      	movs	r0, #40	; 0x28
 8001d2c:	f000 fcf6 	bl	800271c <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	7bfa      	ldrb	r2, [r7, #15]
 8001d36:	2130      	movs	r1, #48	; 0x30
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f000 f829 	bl	8001d90 <lcd_write>
	HAL_Delay(5);
 8001d3e:	2005      	movs	r0, #5
 8001d40:	f000 fcec 	bl	800271c <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	7bfa      	ldrb	r2, [r7, #15]
 8001d4a:	2130      	movs	r1, #48	; 0x30
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f000 f81f 	bl	8001d90 <lcd_write>
	HAL_Delay(1);
 8001d52:	2001      	movs	r0, #1
 8001d54:	f000 fce2 	bl	800271c <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	7bfa      	ldrb	r2, [r7, #15]
 8001d5e:	2130      	movs	r1, #48	; 0x30
 8001d60:	4618      	mov	r0, r3
 8001d62:	f000 f815 	bl	8001d90 <lcd_write>

	/* set 4-bit mode */
	lcd_write(lcd->addr, INIT_4_BIT_MODE, xpin);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	7bfa      	ldrb	r2, [r7, #15]
 8001d6c:	2102      	movs	r1, #2
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f000 f80e 	bl	8001d90 <lcd_write>

	/* set cursor mode */
	lcd_write(lcd->addr, UNDERLINE_OFF_BLINK_OFF, xpin);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	7bfa      	ldrb	r2, [r7, #15]
 8001d7a:	210c      	movs	r1, #12
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f000 f807 	bl	8001d90 <lcd_write>

	/* clear */
	lcd_clear(lcd);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f000 f89f 	bl	8001ec6 <lcd_clear>

}
 8001d88:	bf00      	nop
 8001d8a:	3710      	adds	r7, #16
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <lcd_write>:

void lcd_write(uint8_t addr, uint8_t data, uint8_t xpin)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b086      	sub	sp, #24
 8001d94:	af02      	add	r7, sp, #8
 8001d96:	4603      	mov	r3, r0
 8001d98:	71fb      	strb	r3, [r7, #7]
 8001d9a:	460b      	mov	r3, r1
 8001d9c:	71bb      	strb	r3, [r7, #6]
 8001d9e:	4613      	mov	r3, r2
 8001da0:	717b      	strb	r3, [r7, #5]
	uint8_t tx_data[4];

	/* split data */
	tx_data[0] = (data & 0xF0) | EN_PIN | xpin;
 8001da2:	79bb      	ldrb	r3, [r7, #6]
 8001da4:	f023 030f 	bic.w	r3, r3, #15
 8001da8:	b2da      	uxtb	r2, r3
 8001daa:	797b      	ldrb	r3, [r7, #5]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	f043 0304 	orr.w	r3, r3, #4
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	733b      	strb	r3, [r7, #12]
	tx_data[1] = (data & 0xF0) | xpin;
 8001db8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001dbc:	f023 030f 	bic.w	r3, r3, #15
 8001dc0:	b25a      	sxtb	r2, r3
 8001dc2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	b25b      	sxtb	r3, r3
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	737b      	strb	r3, [r7, #13]
	tx_data[2] = (data << 4) | EN_PIN | xpin;
 8001dce:	79bb      	ldrb	r3, [r7, #6]
 8001dd0:	011b      	lsls	r3, r3, #4
 8001dd2:	b2da      	uxtb	r2, r3
 8001dd4:	797b      	ldrb	r3, [r7, #5]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	f043 0304 	orr.w	r3, r3, #4
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	73bb      	strb	r3, [r7, #14]
	tx_data[3] = (data << 4) | xpin;
 8001de2:	79bb      	ldrb	r3, [r7, #6]
 8001de4:	011b      	lsls	r3, r3, #4
 8001de6:	b25a      	sxtb	r2, r3
 8001de8:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	b25b      	sxtb	r3, r3
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	73fb      	strb	r3, [r7, #15]

	/* send data via i2c */
	HAL_I2C_Master_Transmit(&HI2C_DEF, addr, tx_data, 4, 100);
 8001df4:	79fb      	ldrb	r3, [r7, #7]
 8001df6:	b299      	uxth	r1, r3
 8001df8:	f107 020c 	add.w	r2, r7, #12
 8001dfc:	2364      	movs	r3, #100	; 0x64
 8001dfe:	9300      	str	r3, [sp, #0]
 8001e00:	2304      	movs	r3, #4
 8001e02:	4805      	ldr	r0, [pc, #20]	; (8001e18 <lcd_write+0x88>)
 8001e04:	f001 f8c0 	bl	8002f88 <HAL_I2C_Master_Transmit>

	HAL_Delay(5);
 8001e08:	2005      	movs	r0, #5
 8001e0a:	f000 fc87 	bl	800271c <HAL_Delay>
}
 8001e0e:	bf00      	nop
 8001e10:	3710      	adds	r7, #16
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	200000b4 	.word	0x200000b4

08001e1c <lcd_display>:

void lcd_display(struct lcd_disp * lcd)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0, i = 0;
 8001e24:	2300      	movs	r3, #0
 8001e26:	73fb      	strb	r3, [r7, #15]
 8001e28:	2300      	movs	r3, #0
 8001e2a:	73bb      	strb	r3, [r7, #14]

	/* set backlight */
	if(lcd->bl)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <lcd_display+0x1e>
	{
		xpin = BL_PIN;
 8001e36:	2308      	movs	r3, #8
 8001e38:	73fb      	strb	r3, [r7, #15]
	}

	lcd_clear(lcd);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f000 f843 	bl	8001ec6 <lcd_clear>

	/* send first line data */
	lcd_write(lcd->addr, FIRST_CHAR_LINE_1, xpin);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	7bfa      	ldrb	r2, [r7, #15]
 8001e46:	2180      	movs	r1, #128	; 0x80
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7ff ffa1 	bl	8001d90 <lcd_write>
	while(lcd->f_line[i])
 8001e4e:	e00f      	b.n	8001e70 <lcd_display+0x54>
	{
		lcd_write(lcd->addr, lcd->f_line[i], (xpin | RS_PIN));
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	7818      	ldrb	r0, [r3, #0]
 8001e54:	7bbb      	ldrb	r3, [r7, #14]
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	4413      	add	r3, r2
 8001e5a:	7859      	ldrb	r1, [r3, #1]
 8001e5c:	7bfb      	ldrb	r3, [r7, #15]
 8001e5e:	f043 0301 	orr.w	r3, r3, #1
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	461a      	mov	r2, r3
 8001e66:	f7ff ff93 	bl	8001d90 <lcd_write>
		i++;
 8001e6a:	7bbb      	ldrb	r3, [r7, #14]
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	73bb      	strb	r3, [r7, #14]
	while(lcd->f_line[i])
 8001e70:	7bbb      	ldrb	r3, [r7, #14]
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	4413      	add	r3, r2
 8001e76:	785b      	ldrb	r3, [r3, #1]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d1e9      	bne.n	8001e50 <lcd_display+0x34>
	}

	/* send second line data */
	i = 0;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	73bb      	strb	r3, [r7, #14]
	lcd_write(lcd->addr, FIRST_CHAR_LINE_2, xpin);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	7bfa      	ldrb	r2, [r7, #15]
 8001e86:	21c0      	movs	r1, #192	; 0xc0
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7ff ff81 	bl	8001d90 <lcd_write>
	while(lcd->s_line[i])
 8001e8e:	e00f      	b.n	8001eb0 <lcd_display+0x94>
	{
		lcd_write(lcd->addr, lcd->s_line[i], (xpin | RS_PIN));
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	7818      	ldrb	r0, [r3, #0]
 8001e94:	7bbb      	ldrb	r3, [r7, #14]
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	4413      	add	r3, r2
 8001e9a:	7c99      	ldrb	r1, [r3, #18]
 8001e9c:	7bfb      	ldrb	r3, [r7, #15]
 8001e9e:	f043 0301 	orr.w	r3, r3, #1
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	f7ff ff73 	bl	8001d90 <lcd_write>
		i++;
 8001eaa:	7bbb      	ldrb	r3, [r7, #14]
 8001eac:	3301      	adds	r3, #1
 8001eae:	73bb      	strb	r3, [r7, #14]
	while(lcd->s_line[i])
 8001eb0:	7bbb      	ldrb	r3, [r7, #14]
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	7c9b      	ldrb	r3, [r3, #18]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d1e9      	bne.n	8001e90 <lcd_display+0x74>
	}
}
 8001ebc:	bf00      	nop
 8001ebe:	bf00      	nop
 8001ec0:	3710      	adds	r7, #16
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}

08001ec6 <lcd_clear>:

void lcd_clear(struct lcd_disp * lcd)
{
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	b084      	sub	sp, #16
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	73fb      	strb	r3, [r7, #15]

	/* set backlight */
	if(lcd->bl)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <lcd_clear+0x1a>
	{
		xpin = BL_PIN;
 8001edc:	2308      	movs	r3, #8
 8001ede:	73fb      	strb	r3, [r7, #15]
	}

	/* clear display */
	lcd_write(lcd->addr, CLEAR_LCD, xpin);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	7bfa      	ldrb	r2, [r7, #15]
 8001ee6:	2101      	movs	r1, #1
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7ff ff51 	bl	8001d90 <lcd_write>
}
 8001eee:	bf00      	nop
 8001ef0:	3710      	adds	r7, #16
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
	...

08001ef8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b08a      	sub	sp, #40	; 0x28
 8001efc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001efe:	f000 fb91 	bl	8002624 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f02:	f000 f867 	bl	8001fd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f06:	f7ff fe0f 	bl	8001b28 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001f0a:	f000 fab5 	bl	8002478 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8001f0e:	f7ff fe7b 	bl	8001c08 <MX_I2C2_Init>
  MX_TIM16_Init();
 8001f12:	f000 fa33 	bl	800237c <MX_TIM16_Init>
  MX_USART1_UART_Init();
 8001f16:	f000 fa7f 	bl	8002418 <MX_USART1_UART_Init>

  /* USER CODE BEGIN 2 */


   HAL_UART_Receive_IT(&huart1, &znak1, 1);  //inicjalzizacja uartu pod BT
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	4923      	ldr	r1, [pc, #140]	; (8001fac <main+0xb4>)
 8001f1e:	4824      	ldr	r0, [pc, #144]	; (8001fb0 <main+0xb8>)
 8001f20:	f003 fcbe 	bl	80058a0 <HAL_UART_Receive_IT>



   disp.addr = (0x3F << 1); // Podanie adresu wyświetlacza LCD na szynie I2C
 8001f24:	4b23      	ldr	r3, [pc, #140]	; (8001fb4 <main+0xbc>)
 8001f26:	227e      	movs	r2, #126	; 0x7e
 8001f28:	701a      	strb	r2, [r3, #0]
   disp.bl = true;			// Włączenie podświetlenia wyświetlacza
 8001f2a:	4b22      	ldr	r3, [pc, #136]	; (8001fb4 <main+0xbc>)
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

   bmp_state bmp = bmp_init(&hi2c2); // Inicjalizacja czujnika BMP
 8001f32:	463b      	mov	r3, r7
 8001f34:	4920      	ldr	r1, [pc, #128]	; (8001fb8 <main+0xc0>)
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7ff fb7c 	bl	8001634 <bmp_init>

   bmp_read_compensation_data(&bmp);	// Odczyt nieskompensowanych danych z BMP
 8001f3c:	463b      	mov	r3, r7
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7ff fbe2 	bl	8001708 <bmp_read_compensation_data>

   HAL_TIM_Base_Start_IT(&htim16); // Start Timera
 8001f44:	481d      	ldr	r0, [pc, #116]	; (8001fbc <main+0xc4>)
 8001f46:	f003 f959 	bl	80051fc <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(ReadDataFlag==1 || ButtonFlag==1){
 8001f4a:	4b1d      	ldr	r3, [pc, #116]	; (8001fc0 <main+0xc8>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d003      	beq.n	8001f5a <main+0x62>
 8001f52:	4b1c      	ldr	r3, [pc, #112]	; (8001fc4 <main+0xcc>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d11b      	bne.n	8001f92 <main+0x9a>
		  bmp_read_temp_and_pressure(&bmp);
 8001f5a:	463b      	mov	r3, r7
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7ff fca9 	bl	80018b4 <bmp_read_temp_and_pressure>
		  Weather_param.pressure = bmp_get_pressure(&bmp);
 8001f62:	463b      	mov	r3, r7
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7ff fd01 	bl	800196c <bmp_get_pressure>
 8001f6a:	eeb0 7a40 	vmov.f32	s14, s0
 8001f6e:	eef0 7a60 	vmov.f32	s15, s1
 8001f72:	4b15      	ldr	r3, [pc, #84]	; (8001fc8 <main+0xd0>)
 8001f74:	ed83 7b04 	vstr	d7, [r3, #16]
		  ReadDataFlag=0;
 8001f78:	4b11      	ldr	r3, [pc, #68]	; (8001fc0 <main+0xc8>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	601a      	str	r2, [r3, #0]
		  ButtonFlag=0;
 8001f7e:	4b11      	ldr	r3, [pc, #68]	; (8001fc4 <main+0xcc>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]
		  RunDisp(&disp, &Weather_param, position);
 8001f84:	4b11      	ldr	r3, [pc, #68]	; (8001fcc <main+0xd4>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	461a      	mov	r2, r3
 8001f8a:	490f      	ldr	r1, [pc, #60]	; (8001fc8 <main+0xd0>)
 8001f8c:	4809      	ldr	r0, [pc, #36]	; (8001fb4 <main+0xbc>)
 8001f8e:	f7ff fb25 	bl	80015dc <RunDisp>

	  }
	  if(SendDataFlag)
 8001f92:	4b0f      	ldr	r3, [pc, #60]	; (8001fd0 <main+0xd8>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d0d7      	beq.n	8001f4a <main+0x52>
	  {
		  SendDataFlag=0;
 8001f9a:	4b0d      	ldr	r3, [pc, #52]	; (8001fd0 <main+0xd8>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	601a      	str	r2, [r3, #0]
		  SendDataBT(&Weather_param, &huart1); // Wysłanie danych przez BT
 8001fa0:	4903      	ldr	r1, [pc, #12]	; (8001fb0 <main+0xb8>)
 8001fa2:	4809      	ldr	r0, [pc, #36]	; (8001fc8 <main+0xd0>)
 8001fa4:	f7fe ff5e 	bl	8000e64 <SendDataBT>
	  if(ReadDataFlag==1 || ButtonFlag==1){
 8001fa8:	e7cf      	b.n	8001f4a <main+0x52>
 8001faa:	bf00      	nop
 8001fac:	20000100 	.word	0x20000100
 8001fb0:	200001a0 	.word	0x200001a0
 8001fb4:	20000130 	.word	0x20000130
 8001fb8:	200000b4 	.word	0x200000b4
 8001fbc:	20000154 	.word	0x20000154
 8001fc0:	20000090 	.word	0x20000090
 8001fc4:	20000094 	.word	0x20000094
 8001fc8:	20000110 	.word	0x20000110
 8001fcc:	2000009c 	.word	0x2000009c
 8001fd0:	20000098 	.word	0x20000098

08001fd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b0b8      	sub	sp, #224	; 0xe0
 8001fd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fda:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001fde:	2244      	movs	r2, #68	; 0x44
 8001fe0:	2100      	movs	r1, #0
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f004 fca6 	bl	8006934 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fe8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001fec:	2200      	movs	r2, #0
 8001fee:	601a      	str	r2, [r3, #0]
 8001ff0:	605a      	str	r2, [r3, #4]
 8001ff2:	609a      	str	r2, [r3, #8]
 8001ff4:	60da      	str	r2, [r3, #12]
 8001ff6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ff8:	463b      	mov	r3, r7
 8001ffa:	2288      	movs	r2, #136	; 0x88
 8001ffc:	2100      	movs	r1, #0
 8001ffe:	4618      	mov	r0, r3
 8002000:	f004 fc98 	bl	8006934 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002004:	2302      	movs	r3, #2
 8002006:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800200a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800200e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002012:	2310      	movs	r3, #16
 8002014:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002018:	2302      	movs	r3, #2
 800201a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800201e:	2302      	movs	r3, #2
 8002020:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002024:	2301      	movs	r3, #1
 8002026:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 800202a:	230a      	movs	r3, #10
 800202c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002030:	2307      	movs	r3, #7
 8002032:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002036:	2302      	movs	r3, #2
 8002038:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800203c:	2302      	movs	r3, #2
 800203e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002042:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002046:	4618      	mov	r0, r3
 8002048:	f001 fdd8 	bl	8003bfc <HAL_RCC_OscConfig>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002052:	f000 f8b7 	bl	80021c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002056:	230f      	movs	r3, #15
 8002058:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800205c:	2303      	movs	r3, #3
 800205e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002062:	2300      	movs	r3, #0
 8002064:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002068:	2300      	movs	r3, #0
 800206a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800206e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002072:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002076:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800207a:	2104      	movs	r1, #4
 800207c:	4618      	mov	r0, r3
 800207e:	f002 f9a3 	bl	80043c8 <HAL_RCC_ClockConfig>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d001      	beq.n	800208c <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8002088:	f000 f89c 	bl	80021c4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 800208c:	2383      	movs	r3, #131	; 0x83
 800208e:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C2;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002090:	2300      	movs	r3, #0
 8002092:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002094:	2300      	movs	r3, #0
 8002096:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002098:	2300      	movs	r3, #0
 800209a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800209c:	463b      	mov	r3, r7
 800209e:	4618      	mov	r0, r3
 80020a0:	f002 fb98 	bl	80047d4 <HAL_RCCEx_PeriphCLKConfig>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <SystemClock_Config+0xda>
  {
    Error_Handler();
 80020aa:	f000 f88b 	bl	80021c4 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80020ae:	f44f 7000 	mov.w	r0, #512	; 0x200
 80020b2:	f001 fd4d 	bl	8003b50 <HAL_PWREx_ControlVoltageScaling>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <SystemClock_Config+0xec>
  {
    Error_Handler();
 80020bc:	f000 f882 	bl	80021c4 <Error_Handler>
  }
}
 80020c0:	bf00      	nop
 80020c2:	37e0      	adds	r7, #224	; 0xe0
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

//Calback obsługi przerwania przycisku
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	4603      	mov	r3, r0
 80020d0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == B1_Pin)
 80020d2:	88fb      	ldrh	r3, [r7, #6]
 80020d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020d8:	d10f      	bne.n	80020fa <HAL_GPIO_EXTI_Callback+0x32>
	{
		if(position == 2)
 80020da:	4b0b      	ldr	r3, [pc, #44]	; (8002108 <HAL_GPIO_EXTI_Callback+0x40>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d103      	bne.n	80020ea <HAL_GPIO_EXTI_Callback+0x22>
		{
			position = 0;
 80020e2:	4b09      	ldr	r3, [pc, #36]	; (8002108 <HAL_GPIO_EXTI_Callback+0x40>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	601a      	str	r2, [r3, #0]
 80020e8:	e004      	b.n	80020f4 <HAL_GPIO_EXTI_Callback+0x2c>
		}
		else
		{
			position++;
 80020ea:	4b07      	ldr	r3, [pc, #28]	; (8002108 <HAL_GPIO_EXTI_Callback+0x40>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	3301      	adds	r3, #1
 80020f0:	4a05      	ldr	r2, [pc, #20]	; (8002108 <HAL_GPIO_EXTI_Callback+0x40>)
 80020f2:	6013      	str	r3, [r2, #0]

		}
		ButtonFlag=1;
 80020f4:	4b05      	ldr	r3, [pc, #20]	; (800210c <HAL_GPIO_EXTI_Callback+0x44>)
 80020f6:	2201      	movs	r2, #1
 80020f8:	601a      	str	r2, [r3, #0]
	}
}
 80020fa:	bf00      	nop
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	2000009c 	.word	0x2000009c
 800210c:	20000094 	.word	0x20000094

08002110 <HAL_UART_RxCpltCallback>:

// przerwanie od BT (wywołuje się przy odebraniu znaku)
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a09      	ldr	r2, [pc, #36]	; (8002144 <HAL_UART_RxCpltCallback+0x34>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d10b      	bne.n	800213a <HAL_UART_RxCpltCallback+0x2a>

		if(znak1=='s') // Jeśli wysłane s do urządzenia, to przesyłane są zmierzone dane
 8002122:	4b09      	ldr	r3, [pc, #36]	; (8002148 <HAL_UART_RxCpltCallback+0x38>)
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	2b73      	cmp	r3, #115	; 0x73
 8002128:	d102      	bne.n	8002130 <HAL_UART_RxCpltCallback+0x20>
		{

			SendDataFlag = 1;
 800212a:	4b08      	ldr	r3, [pc, #32]	; (800214c <HAL_UART_RxCpltCallback+0x3c>)
 800212c:	2201      	movs	r2, #1
 800212e:	601a      	str	r2, [r3, #0]

		}

		HAL_UART_Receive_IT(&huart1, &znak1, 1); // "nasłuchiwanie" kolejnego znaku
 8002130:	2201      	movs	r2, #1
 8002132:	4905      	ldr	r1, [pc, #20]	; (8002148 <HAL_UART_RxCpltCallback+0x38>)
 8002134:	4806      	ldr	r0, [pc, #24]	; (8002150 <HAL_UART_RxCpltCallback+0x40>)
 8002136:	f003 fbb3 	bl	80058a0 <HAL_UART_Receive_IT>


	}
}
 800213a:	bf00      	nop
 800213c:	3708      	adds	r7, #8
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	40013800 	.word	0x40013800
 8002148:	20000100 	.word	0x20000100
 800214c:	20000098 	.word	0x20000098
 8002150:	200001a0 	.word	0x200001a0

08002154 <HAL_TIM_PeriodElapsedCallback>:
// Callback do obsługi timera (wywołuje się co określony czas)
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM16)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a14      	ldr	r2, [pc, #80]	; (80021b4 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d121      	bne.n	80021aa <HAL_TIM_PeriodElapsedCallback+0x56>
	{
		if(!ReadDataFlag)
 8002166:	4b14      	ldr	r3, [pc, #80]	; (80021b8 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d103      	bne.n	8002176 <HAL_TIM_PeriodElapsedCallback+0x22>
		{
			ReadDataFlag=1;
 800216e:	4b12      	ldr	r3, [pc, #72]	; (80021b8 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8002170:	2201      	movs	r2, #1
 8002172:	601a      	str	r2, [r3, #0]
 8002174:	e002      	b.n	800217c <HAL_TIM_PeriodElapsedCallback+0x28>
		}
		else ReadDataFlag=0;
 8002176:	4b10      	ldr	r3, [pc, #64]	; (80021b8 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8002178:	2200      	movs	r2, #0
 800217a:	601a      	str	r2, [r3, #0]
		DHT_GetData(&DHT_Data); // Pobranie danych z czujnika DHT
 800217c:	480f      	ldr	r0, [pc, #60]	; (80021bc <HAL_TIM_PeriodElapsedCallback+0x68>)
 800217e:	f7ff f903 	bl	8001388 <DHT_GetData>
		Weather_param.temperature=DHT_Data.Temperature;
 8002182:	4b0e      	ldr	r3, [pc, #56]	; (80021bc <HAL_TIM_PeriodElapsedCallback+0x68>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4618      	mov	r0, r3
 8002188:	f7fe f9d6 	bl	8000538 <__aeabi_f2d>
 800218c:	4602      	mov	r2, r0
 800218e:	460b      	mov	r3, r1
 8002190:	490b      	ldr	r1, [pc, #44]	; (80021c0 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8002192:	e9c1 2300 	strd	r2, r3, [r1]
		Weather_param.humidity=DHT_Data.Humidity;
 8002196:	4b09      	ldr	r3, [pc, #36]	; (80021bc <HAL_TIM_PeriodElapsedCallback+0x68>)
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	4618      	mov	r0, r3
 800219c:	f7fe f9cc 	bl	8000538 <__aeabi_f2d>
 80021a0:	4602      	mov	r2, r0
 80021a2:	460b      	mov	r3, r1
 80021a4:	4906      	ldr	r1, [pc, #24]	; (80021c0 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80021a6:	e9c1 2302 	strd	r2, r3, [r1, #8]


	}


}
 80021aa:	bf00      	nop
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	40014400 	.word	0x40014400
 80021b8:	20000090 	.word	0x20000090
 80021bc:	20000128 	.word	0x20000128
 80021c0:	20000110 	.word	0x20000110

080021c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021c8:	b672      	cpsid	i
}
 80021ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021cc:	e7fe      	b.n	80021cc <Error_Handler+0x8>
	...

080021d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021d6:	4b0f      	ldr	r3, [pc, #60]	; (8002214 <HAL_MspInit+0x44>)
 80021d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021da:	4a0e      	ldr	r2, [pc, #56]	; (8002214 <HAL_MspInit+0x44>)
 80021dc:	f043 0301 	orr.w	r3, r3, #1
 80021e0:	6613      	str	r3, [r2, #96]	; 0x60
 80021e2:	4b0c      	ldr	r3, [pc, #48]	; (8002214 <HAL_MspInit+0x44>)
 80021e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	607b      	str	r3, [r7, #4]
 80021ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021ee:	4b09      	ldr	r3, [pc, #36]	; (8002214 <HAL_MspInit+0x44>)
 80021f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021f2:	4a08      	ldr	r2, [pc, #32]	; (8002214 <HAL_MspInit+0x44>)
 80021f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021f8:	6593      	str	r3, [r2, #88]	; 0x58
 80021fa:	4b06      	ldr	r3, [pc, #24]	; (8002214 <HAL_MspInit+0x44>)
 80021fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002202:	603b      	str	r3, [r7, #0]
 8002204:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002206:	bf00      	nop
 8002208:	370c      	adds	r7, #12
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	40021000 	.word	0x40021000

08002218 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800221c:	e7fe      	b.n	800221c <NMI_Handler+0x4>

0800221e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800221e:	b480      	push	{r7}
 8002220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002222:	e7fe      	b.n	8002222 <HardFault_Handler+0x4>

08002224 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002228:	e7fe      	b.n	8002228 <MemManage_Handler+0x4>

0800222a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800222a:	b480      	push	{r7}
 800222c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800222e:	e7fe      	b.n	800222e <BusFault_Handler+0x4>

08002230 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002234:	e7fe      	b.n	8002234 <UsageFault_Handler+0x4>

08002236 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002236:	b480      	push	{r7}
 8002238:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800223a:	bf00      	nop
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002248:	bf00      	nop
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr

08002252 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002252:	b480      	push	{r7}
 8002254:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002256:	bf00      	nop
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002264:	f000 fa3a 	bl	80026dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002268:	bf00      	nop
 800226a:	bd80      	pop	{r7, pc}

0800226c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002270:	4802      	ldr	r0, [pc, #8]	; (800227c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8002272:	f003 f833 	bl	80052dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002276:	bf00      	nop
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	20000154 	.word	0x20000154

08002280 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002284:	4802      	ldr	r0, [pc, #8]	; (8002290 <USART1_IRQHandler+0x10>)
 8002286:	f003 fb4f 	bl	8005928 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800228a:	bf00      	nop
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	200001a0 	.word	0x200001a0

08002294 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002298:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800229c:	f000 fdcc 	bl	8002e38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80022a0:	bf00      	nop
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b086      	sub	sp, #24
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022ac:	4a14      	ldr	r2, [pc, #80]	; (8002300 <_sbrk+0x5c>)
 80022ae:	4b15      	ldr	r3, [pc, #84]	; (8002304 <_sbrk+0x60>)
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022b8:	4b13      	ldr	r3, [pc, #76]	; (8002308 <_sbrk+0x64>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d102      	bne.n	80022c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022c0:	4b11      	ldr	r3, [pc, #68]	; (8002308 <_sbrk+0x64>)
 80022c2:	4a12      	ldr	r2, [pc, #72]	; (800230c <_sbrk+0x68>)
 80022c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022c6:	4b10      	ldr	r3, [pc, #64]	; (8002308 <_sbrk+0x64>)
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4413      	add	r3, r2
 80022ce:	693a      	ldr	r2, [r7, #16]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d207      	bcs.n	80022e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022d4:	f004 fb04 	bl	80068e0 <__errno>
 80022d8:	4603      	mov	r3, r0
 80022da:	220c      	movs	r2, #12
 80022dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022de:	f04f 33ff 	mov.w	r3, #4294967295
 80022e2:	e009      	b.n	80022f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022e4:	4b08      	ldr	r3, [pc, #32]	; (8002308 <_sbrk+0x64>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022ea:	4b07      	ldr	r3, [pc, #28]	; (8002308 <_sbrk+0x64>)
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4413      	add	r3, r2
 80022f2:	4a05      	ldr	r2, [pc, #20]	; (8002308 <_sbrk+0x64>)
 80022f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022f6:	68fb      	ldr	r3, [r7, #12]
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3718      	adds	r7, #24
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	20018000 	.word	0x20018000
 8002304:	00000400 	.word	0x00000400
 8002308:	200000a0 	.word	0x200000a0
 800230c:	200002c0 	.word	0x200002c0

08002310 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002314:	4b17      	ldr	r3, [pc, #92]	; (8002374 <SystemInit+0x64>)
 8002316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800231a:	4a16      	ldr	r2, [pc, #88]	; (8002374 <SystemInit+0x64>)
 800231c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002320:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002324:	4b14      	ldr	r3, [pc, #80]	; (8002378 <SystemInit+0x68>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a13      	ldr	r2, [pc, #76]	; (8002378 <SystemInit+0x68>)
 800232a:	f043 0301 	orr.w	r3, r3, #1
 800232e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002330:	4b11      	ldr	r3, [pc, #68]	; (8002378 <SystemInit+0x68>)
 8002332:	2200      	movs	r2, #0
 8002334:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002336:	4b10      	ldr	r3, [pc, #64]	; (8002378 <SystemInit+0x68>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a0f      	ldr	r2, [pc, #60]	; (8002378 <SystemInit+0x68>)
 800233c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002340:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002344:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002346:	4b0c      	ldr	r3, [pc, #48]	; (8002378 <SystemInit+0x68>)
 8002348:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800234c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800234e:	4b0a      	ldr	r3, [pc, #40]	; (8002378 <SystemInit+0x68>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a09      	ldr	r2, [pc, #36]	; (8002378 <SystemInit+0x68>)
 8002354:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002358:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800235a:	4b07      	ldr	r3, [pc, #28]	; (8002378 <SystemInit+0x68>)
 800235c:	2200      	movs	r2, #0
 800235e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002360:	4b04      	ldr	r3, [pc, #16]	; (8002374 <SystemInit+0x64>)
 8002362:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002366:	609a      	str	r2, [r3, #8]
#endif
}
 8002368:	bf00      	nop
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	e000ed00 	.word	0xe000ed00
 8002378:	40021000 	.word	0x40021000

0800237c <MX_TIM16_Init>:

TIM_HandleTypeDef htim16;

/* TIM16 init function */
void MX_TIM16_Init(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002380:	4b10      	ldr	r3, [pc, #64]	; (80023c4 <MX_TIM16_Init+0x48>)
 8002382:	4a11      	ldr	r2, [pc, #68]	; (80023c8 <MX_TIM16_Init+0x4c>)
 8002384:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 7999;
 8002386:	4b0f      	ldr	r3, [pc, #60]	; (80023c4 <MX_TIM16_Init+0x48>)
 8002388:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800238c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800238e:	4b0d      	ldr	r3, [pc, #52]	; (80023c4 <MX_TIM16_Init+0x48>)
 8002390:	2200      	movs	r2, #0
 8002392:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 39999;
 8002394:	4b0b      	ldr	r3, [pc, #44]	; (80023c4 <MX_TIM16_Init+0x48>)
 8002396:	f649 423f 	movw	r2, #39999	; 0x9c3f
 800239a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 800239c:	4b09      	ldr	r3, [pc, #36]	; (80023c4 <MX_TIM16_Init+0x48>)
 800239e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023a2:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80023a4:	4b07      	ldr	r3, [pc, #28]	; (80023c4 <MX_TIM16_Init+0x48>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023aa:	4b06      	ldr	r3, [pc, #24]	; (80023c4 <MX_TIM16_Init+0x48>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80023b0:	4804      	ldr	r0, [pc, #16]	; (80023c4 <MX_TIM16_Init+0x48>)
 80023b2:	f002 fecb 	bl	800514c <HAL_TIM_Base_Init>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d001      	beq.n	80023c0 <MX_TIM16_Init+0x44>
  {
    Error_Handler();
 80023bc:	f7ff ff02 	bl	80021c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80023c0:	bf00      	nop
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	20000154 	.word	0x20000154
 80023c8:	40014400 	.word	0x40014400

080023cc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b084      	sub	sp, #16
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM16)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a0d      	ldr	r2, [pc, #52]	; (8002410 <HAL_TIM_Base_MspInit+0x44>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d113      	bne.n	8002406 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80023de:	4b0d      	ldr	r3, [pc, #52]	; (8002414 <HAL_TIM_Base_MspInit+0x48>)
 80023e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023e2:	4a0c      	ldr	r2, [pc, #48]	; (8002414 <HAL_TIM_Base_MspInit+0x48>)
 80023e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023e8:	6613      	str	r3, [r2, #96]	; 0x60
 80023ea:	4b0a      	ldr	r3, [pc, #40]	; (8002414 <HAL_TIM_Base_MspInit+0x48>)
 80023ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023f2:	60fb      	str	r3, [r7, #12]
 80023f4:	68fb      	ldr	r3, [r7, #12]

    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80023f6:	2200      	movs	r2, #0
 80023f8:	2100      	movs	r1, #0
 80023fa:	2019      	movs	r0, #25
 80023fc:	f000 fa8d 	bl	800291a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002400:	2019      	movs	r0, #25
 8002402:	f000 faa6 	bl	8002952 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8002406:	bf00      	nop
 8002408:	3710      	adds	r7, #16
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	40014400 	.word	0x40014400
 8002414:	40021000 	.word	0x40021000

08002418 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800241c:	4b14      	ldr	r3, [pc, #80]	; (8002470 <MX_USART1_UART_Init+0x58>)
 800241e:	4a15      	ldr	r2, [pc, #84]	; (8002474 <MX_USART1_UART_Init+0x5c>)
 8002420:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002422:	4b13      	ldr	r3, [pc, #76]	; (8002470 <MX_USART1_UART_Init+0x58>)
 8002424:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002428:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800242a:	4b11      	ldr	r3, [pc, #68]	; (8002470 <MX_USART1_UART_Init+0x58>)
 800242c:	2200      	movs	r2, #0
 800242e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002430:	4b0f      	ldr	r3, [pc, #60]	; (8002470 <MX_USART1_UART_Init+0x58>)
 8002432:	2200      	movs	r2, #0
 8002434:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002436:	4b0e      	ldr	r3, [pc, #56]	; (8002470 <MX_USART1_UART_Init+0x58>)
 8002438:	2200      	movs	r2, #0
 800243a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800243c:	4b0c      	ldr	r3, [pc, #48]	; (8002470 <MX_USART1_UART_Init+0x58>)
 800243e:	220c      	movs	r2, #12
 8002440:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002442:	4b0b      	ldr	r3, [pc, #44]	; (8002470 <MX_USART1_UART_Init+0x58>)
 8002444:	2200      	movs	r2, #0
 8002446:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002448:	4b09      	ldr	r3, [pc, #36]	; (8002470 <MX_USART1_UART_Init+0x58>)
 800244a:	2200      	movs	r2, #0
 800244c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800244e:	4b08      	ldr	r3, [pc, #32]	; (8002470 <MX_USART1_UART_Init+0x58>)
 8002450:	2200      	movs	r2, #0
 8002452:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002454:	4b06      	ldr	r3, [pc, #24]	; (8002470 <MX_USART1_UART_Init+0x58>)
 8002456:	2200      	movs	r2, #0
 8002458:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800245a:	4805      	ldr	r0, [pc, #20]	; (8002470 <MX_USART1_UART_Init+0x58>)
 800245c:	f003 f93e 	bl	80056dc <HAL_UART_Init>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d001      	beq.n	800246a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002466:	f7ff fead 	bl	80021c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800246a:	bf00      	nop
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	200001a0 	.word	0x200001a0
 8002474:	40013800 	.word	0x40013800

08002478 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800247c:	4b14      	ldr	r3, [pc, #80]	; (80024d0 <MX_USART2_UART_Init+0x58>)
 800247e:	4a15      	ldr	r2, [pc, #84]	; (80024d4 <MX_USART2_UART_Init+0x5c>)
 8002480:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002482:	4b13      	ldr	r3, [pc, #76]	; (80024d0 <MX_USART2_UART_Init+0x58>)
 8002484:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002488:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800248a:	4b11      	ldr	r3, [pc, #68]	; (80024d0 <MX_USART2_UART_Init+0x58>)
 800248c:	2200      	movs	r2, #0
 800248e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002490:	4b0f      	ldr	r3, [pc, #60]	; (80024d0 <MX_USART2_UART_Init+0x58>)
 8002492:	2200      	movs	r2, #0
 8002494:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002496:	4b0e      	ldr	r3, [pc, #56]	; (80024d0 <MX_USART2_UART_Init+0x58>)
 8002498:	2200      	movs	r2, #0
 800249a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800249c:	4b0c      	ldr	r3, [pc, #48]	; (80024d0 <MX_USART2_UART_Init+0x58>)
 800249e:	220c      	movs	r2, #12
 80024a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024a2:	4b0b      	ldr	r3, [pc, #44]	; (80024d0 <MX_USART2_UART_Init+0x58>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80024a8:	4b09      	ldr	r3, [pc, #36]	; (80024d0 <MX_USART2_UART_Init+0x58>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024ae:	4b08      	ldr	r3, [pc, #32]	; (80024d0 <MX_USART2_UART_Init+0x58>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024b4:	4b06      	ldr	r3, [pc, #24]	; (80024d0 <MX_USART2_UART_Init+0x58>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80024ba:	4805      	ldr	r0, [pc, #20]	; (80024d0 <MX_USART2_UART_Init+0x58>)
 80024bc:	f003 f90e 	bl	80056dc <HAL_UART_Init>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d001      	beq.n	80024ca <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80024c6:	f7ff fe7d 	bl	80021c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80024ca:	bf00      	nop
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	20000224 	.word	0x20000224
 80024d4:	40004400 	.word	0x40004400

080024d8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b08c      	sub	sp, #48	; 0x30
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024e0:	f107 031c 	add.w	r3, r7, #28
 80024e4:	2200      	movs	r2, #0
 80024e6:	601a      	str	r2, [r3, #0]
 80024e8:	605a      	str	r2, [r3, #4]
 80024ea:	609a      	str	r2, [r3, #8]
 80024ec:	60da      	str	r2, [r3, #12]
 80024ee:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a33      	ldr	r2, [pc, #204]	; (80025c4 <HAL_UART_MspInit+0xec>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d132      	bne.n	8002560 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80024fa:	4b33      	ldr	r3, [pc, #204]	; (80025c8 <HAL_UART_MspInit+0xf0>)
 80024fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024fe:	4a32      	ldr	r2, [pc, #200]	; (80025c8 <HAL_UART_MspInit+0xf0>)
 8002500:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002504:	6613      	str	r3, [r2, #96]	; 0x60
 8002506:	4b30      	ldr	r3, [pc, #192]	; (80025c8 <HAL_UART_MspInit+0xf0>)
 8002508:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800250a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800250e:	61bb      	str	r3, [r7, #24]
 8002510:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002512:	4b2d      	ldr	r3, [pc, #180]	; (80025c8 <HAL_UART_MspInit+0xf0>)
 8002514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002516:	4a2c      	ldr	r2, [pc, #176]	; (80025c8 <HAL_UART_MspInit+0xf0>)
 8002518:	f043 0301 	orr.w	r3, r3, #1
 800251c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800251e:	4b2a      	ldr	r3, [pc, #168]	; (80025c8 <HAL_UART_MspInit+0xf0>)
 8002520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002522:	f003 0301 	and.w	r3, r3, #1
 8002526:	617b      	str	r3, [r7, #20]
 8002528:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800252a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800252e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002530:	2302      	movs	r3, #2
 8002532:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002534:	2300      	movs	r3, #0
 8002536:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002538:	2303      	movs	r3, #3
 800253a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800253c:	2307      	movs	r3, #7
 800253e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002540:	f107 031c 	add.w	r3, r7, #28
 8002544:	4619      	mov	r1, r3
 8002546:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800254a:	f000 fa9b 	bl	8002a84 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800254e:	2200      	movs	r2, #0
 8002550:	2100      	movs	r1, #0
 8002552:	2025      	movs	r0, #37	; 0x25
 8002554:	f000 f9e1 	bl	800291a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002558:	2025      	movs	r0, #37	; 0x25
 800255a:	f000 f9fa 	bl	8002952 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800255e:	e02d      	b.n	80025bc <HAL_UART_MspInit+0xe4>
  else if(uartHandle->Instance==USART2)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a19      	ldr	r2, [pc, #100]	; (80025cc <HAL_UART_MspInit+0xf4>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d128      	bne.n	80025bc <HAL_UART_MspInit+0xe4>
    __HAL_RCC_USART2_CLK_ENABLE();
 800256a:	4b17      	ldr	r3, [pc, #92]	; (80025c8 <HAL_UART_MspInit+0xf0>)
 800256c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800256e:	4a16      	ldr	r2, [pc, #88]	; (80025c8 <HAL_UART_MspInit+0xf0>)
 8002570:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002574:	6593      	str	r3, [r2, #88]	; 0x58
 8002576:	4b14      	ldr	r3, [pc, #80]	; (80025c8 <HAL_UART_MspInit+0xf0>)
 8002578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800257a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800257e:	613b      	str	r3, [r7, #16]
 8002580:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002582:	4b11      	ldr	r3, [pc, #68]	; (80025c8 <HAL_UART_MspInit+0xf0>)
 8002584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002586:	4a10      	ldr	r2, [pc, #64]	; (80025c8 <HAL_UART_MspInit+0xf0>)
 8002588:	f043 0301 	orr.w	r3, r3, #1
 800258c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800258e:	4b0e      	ldr	r3, [pc, #56]	; (80025c8 <HAL_UART_MspInit+0xf0>)
 8002590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	60fb      	str	r3, [r7, #12]
 8002598:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800259a:	230c      	movs	r3, #12
 800259c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800259e:	2302      	movs	r3, #2
 80025a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a2:	2300      	movs	r3, #0
 80025a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025a6:	2303      	movs	r3, #3
 80025a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80025aa:	2307      	movs	r3, #7
 80025ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025ae:	f107 031c 	add.w	r3, r7, #28
 80025b2:	4619      	mov	r1, r3
 80025b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025b8:	f000 fa64 	bl	8002a84 <HAL_GPIO_Init>
}
 80025bc:	bf00      	nop
 80025be:	3730      	adds	r7, #48	; 0x30
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	40013800 	.word	0x40013800
 80025c8:	40021000 	.word	0x40021000
 80025cc:	40004400 	.word	0x40004400

080025d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80025d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002608 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80025d4:	f7ff fe9c 	bl	8002310 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80025d8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80025da:	e003      	b.n	80025e4 <LoopCopyDataInit>

080025dc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80025dc:	4b0b      	ldr	r3, [pc, #44]	; (800260c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80025de:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80025e0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80025e2:	3104      	adds	r1, #4

080025e4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80025e4:	480a      	ldr	r0, [pc, #40]	; (8002610 <LoopForever+0xa>)
	ldr	r3, =_edata
 80025e6:	4b0b      	ldr	r3, [pc, #44]	; (8002614 <LoopForever+0xe>)
	adds	r2, r0, r1
 80025e8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80025ea:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80025ec:	d3f6      	bcc.n	80025dc <CopyDataInit>
	ldr	r2, =_sbss
 80025ee:	4a0a      	ldr	r2, [pc, #40]	; (8002618 <LoopForever+0x12>)
	b	LoopFillZerobss
 80025f0:	e002      	b.n	80025f8 <LoopFillZerobss>

080025f2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80025f2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80025f4:	f842 3b04 	str.w	r3, [r2], #4

080025f8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80025f8:	4b08      	ldr	r3, [pc, #32]	; (800261c <LoopForever+0x16>)
	cmp	r2, r3
 80025fa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80025fc:	d3f9      	bcc.n	80025f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80025fe:	f004 f975 	bl	80068ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002602:	f7ff fc79 	bl	8001ef8 <main>

08002606 <LoopForever>:

LoopForever:
    b LoopForever
 8002606:	e7fe      	b.n	8002606 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002608:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800260c:	080072e0 	.word	0x080072e0
	ldr	r0, =_sdata
 8002610:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002614:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8002618:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 800261c:	200002bc 	.word	0x200002bc

08002620 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002620:	e7fe      	b.n	8002620 <ADC1_2_IRQHandler>
	...

08002624 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800262a:	2300      	movs	r3, #0
 800262c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800262e:	4b0c      	ldr	r3, [pc, #48]	; (8002660 <HAL_Init+0x3c>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a0b      	ldr	r2, [pc, #44]	; (8002660 <HAL_Init+0x3c>)
 8002634:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002638:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800263a:	2003      	movs	r0, #3
 800263c:	f000 f962 	bl	8002904 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002640:	2000      	movs	r0, #0
 8002642:	f000 f80f 	bl	8002664 <HAL_InitTick>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d002      	beq.n	8002652 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	71fb      	strb	r3, [r7, #7]
 8002650:	e001      	b.n	8002656 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002652:	f7ff fdbd 	bl	80021d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002656:	79fb      	ldrb	r3, [r7, #7]
}
 8002658:	4618      	mov	r0, r3
 800265a:	3708      	adds	r7, #8
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	40022000 	.word	0x40022000

08002664 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800266c:	2300      	movs	r3, #0
 800266e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002670:	4b17      	ldr	r3, [pc, #92]	; (80026d0 <HAL_InitTick+0x6c>)
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d023      	beq.n	80026c0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002678:	4b16      	ldr	r3, [pc, #88]	; (80026d4 <HAL_InitTick+0x70>)
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	4b14      	ldr	r3, [pc, #80]	; (80026d0 <HAL_InitTick+0x6c>)
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	4619      	mov	r1, r3
 8002682:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002686:	fbb3 f3f1 	udiv	r3, r3, r1
 800268a:	fbb2 f3f3 	udiv	r3, r2, r3
 800268e:	4618      	mov	r0, r3
 8002690:	f000 f96d 	bl	800296e <HAL_SYSTICK_Config>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d10f      	bne.n	80026ba <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2b0f      	cmp	r3, #15
 800269e:	d809      	bhi.n	80026b4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026a0:	2200      	movs	r2, #0
 80026a2:	6879      	ldr	r1, [r7, #4]
 80026a4:	f04f 30ff 	mov.w	r0, #4294967295
 80026a8:	f000 f937 	bl	800291a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80026ac:	4a0a      	ldr	r2, [pc, #40]	; (80026d8 <HAL_InitTick+0x74>)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6013      	str	r3, [r2, #0]
 80026b2:	e007      	b.n	80026c4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	73fb      	strb	r3, [r7, #15]
 80026b8:	e004      	b.n	80026c4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	73fb      	strb	r3, [r7, #15]
 80026be:	e001      	b.n	80026c4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80026c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3710      	adds	r7, #16
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	20000008 	.word	0x20000008
 80026d4:	20000000 	.word	0x20000000
 80026d8:	20000004 	.word	0x20000004

080026dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026dc:	b480      	push	{r7}
 80026de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80026e0:	4b06      	ldr	r3, [pc, #24]	; (80026fc <HAL_IncTick+0x20>)
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	461a      	mov	r2, r3
 80026e6:	4b06      	ldr	r3, [pc, #24]	; (8002700 <HAL_IncTick+0x24>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4413      	add	r3, r2
 80026ec:	4a04      	ldr	r2, [pc, #16]	; (8002700 <HAL_IncTick+0x24>)
 80026ee:	6013      	str	r3, [r2, #0]
}
 80026f0:	bf00      	nop
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	20000008 	.word	0x20000008
 8002700:	200002a8 	.word	0x200002a8

08002704 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  return uwTick;
 8002708:	4b03      	ldr	r3, [pc, #12]	; (8002718 <HAL_GetTick+0x14>)
 800270a:	681b      	ldr	r3, [r3, #0]
}
 800270c:	4618      	mov	r0, r3
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	200002a8 	.word	0x200002a8

0800271c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002724:	f7ff ffee 	bl	8002704 <HAL_GetTick>
 8002728:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002734:	d005      	beq.n	8002742 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002736:	4b0a      	ldr	r3, [pc, #40]	; (8002760 <HAL_Delay+0x44>)
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	461a      	mov	r2, r3
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	4413      	add	r3, r2
 8002740:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002742:	bf00      	nop
 8002744:	f7ff ffde 	bl	8002704 <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	68fa      	ldr	r2, [r7, #12]
 8002750:	429a      	cmp	r2, r3
 8002752:	d8f7      	bhi.n	8002744 <HAL_Delay+0x28>
  {
  }
}
 8002754:	bf00      	nop
 8002756:	bf00      	nop
 8002758:	3710      	adds	r7, #16
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	20000008 	.word	0x20000008

08002764 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002764:	b480      	push	{r7}
 8002766:	b085      	sub	sp, #20
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f003 0307 	and.w	r3, r3, #7
 8002772:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002774:	4b0c      	ldr	r3, [pc, #48]	; (80027a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800277a:	68ba      	ldr	r2, [r7, #8]
 800277c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002780:	4013      	ands	r3, r2
 8002782:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800278c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002790:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002794:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002796:	4a04      	ldr	r2, [pc, #16]	; (80027a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	60d3      	str	r3, [r2, #12]
}
 800279c:	bf00      	nop
 800279e:	3714      	adds	r7, #20
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr
 80027a8:	e000ed00 	.word	0xe000ed00

080027ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027b0:	4b04      	ldr	r3, [pc, #16]	; (80027c4 <__NVIC_GetPriorityGrouping+0x18>)
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	0a1b      	lsrs	r3, r3, #8
 80027b6:	f003 0307 	and.w	r3, r3, #7
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr
 80027c4:	e000ed00 	.word	0xe000ed00

080027c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	4603      	mov	r3, r0
 80027d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	db0b      	blt.n	80027f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027da:	79fb      	ldrb	r3, [r7, #7]
 80027dc:	f003 021f 	and.w	r2, r3, #31
 80027e0:	4907      	ldr	r1, [pc, #28]	; (8002800 <__NVIC_EnableIRQ+0x38>)
 80027e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e6:	095b      	lsrs	r3, r3, #5
 80027e8:	2001      	movs	r0, #1
 80027ea:	fa00 f202 	lsl.w	r2, r0, r2
 80027ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80027f2:	bf00      	nop
 80027f4:	370c      	adds	r7, #12
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	e000e100 	.word	0xe000e100

08002804 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	4603      	mov	r3, r0
 800280c:	6039      	str	r1, [r7, #0]
 800280e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002810:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002814:	2b00      	cmp	r3, #0
 8002816:	db0a      	blt.n	800282e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	b2da      	uxtb	r2, r3
 800281c:	490c      	ldr	r1, [pc, #48]	; (8002850 <__NVIC_SetPriority+0x4c>)
 800281e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002822:	0112      	lsls	r2, r2, #4
 8002824:	b2d2      	uxtb	r2, r2
 8002826:	440b      	add	r3, r1
 8002828:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800282c:	e00a      	b.n	8002844 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	b2da      	uxtb	r2, r3
 8002832:	4908      	ldr	r1, [pc, #32]	; (8002854 <__NVIC_SetPriority+0x50>)
 8002834:	79fb      	ldrb	r3, [r7, #7]
 8002836:	f003 030f 	and.w	r3, r3, #15
 800283a:	3b04      	subs	r3, #4
 800283c:	0112      	lsls	r2, r2, #4
 800283e:	b2d2      	uxtb	r2, r2
 8002840:	440b      	add	r3, r1
 8002842:	761a      	strb	r2, [r3, #24]
}
 8002844:	bf00      	nop
 8002846:	370c      	adds	r7, #12
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr
 8002850:	e000e100 	.word	0xe000e100
 8002854:	e000ed00 	.word	0xe000ed00

08002858 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002858:	b480      	push	{r7}
 800285a:	b089      	sub	sp, #36	; 0x24
 800285c:	af00      	add	r7, sp, #0
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	60b9      	str	r1, [r7, #8]
 8002862:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f003 0307 	and.w	r3, r3, #7
 800286a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	f1c3 0307 	rsb	r3, r3, #7
 8002872:	2b04      	cmp	r3, #4
 8002874:	bf28      	it	cs
 8002876:	2304      	movcs	r3, #4
 8002878:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	3304      	adds	r3, #4
 800287e:	2b06      	cmp	r3, #6
 8002880:	d902      	bls.n	8002888 <NVIC_EncodePriority+0x30>
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	3b03      	subs	r3, #3
 8002886:	e000      	b.n	800288a <NVIC_EncodePriority+0x32>
 8002888:	2300      	movs	r3, #0
 800288a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800288c:	f04f 32ff 	mov.w	r2, #4294967295
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	fa02 f303 	lsl.w	r3, r2, r3
 8002896:	43da      	mvns	r2, r3
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	401a      	ands	r2, r3
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028a0:	f04f 31ff 	mov.w	r1, #4294967295
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	fa01 f303 	lsl.w	r3, r1, r3
 80028aa:	43d9      	mvns	r1, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028b0:	4313      	orrs	r3, r2
         );
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3724      	adds	r7, #36	; 0x24
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
	...

080028c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	3b01      	subs	r3, #1
 80028cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028d0:	d301      	bcc.n	80028d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028d2:	2301      	movs	r3, #1
 80028d4:	e00f      	b.n	80028f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028d6:	4a0a      	ldr	r2, [pc, #40]	; (8002900 <SysTick_Config+0x40>)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	3b01      	subs	r3, #1
 80028dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028de:	210f      	movs	r1, #15
 80028e0:	f04f 30ff 	mov.w	r0, #4294967295
 80028e4:	f7ff ff8e 	bl	8002804 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028e8:	4b05      	ldr	r3, [pc, #20]	; (8002900 <SysTick_Config+0x40>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028ee:	4b04      	ldr	r3, [pc, #16]	; (8002900 <SysTick_Config+0x40>)
 80028f0:	2207      	movs	r2, #7
 80028f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3708      	adds	r7, #8
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	e000e010 	.word	0xe000e010

08002904 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f7ff ff29 	bl	8002764 <__NVIC_SetPriorityGrouping>
}
 8002912:	bf00      	nop
 8002914:	3708      	adds	r7, #8
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}

0800291a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800291a:	b580      	push	{r7, lr}
 800291c:	b086      	sub	sp, #24
 800291e:	af00      	add	r7, sp, #0
 8002920:	4603      	mov	r3, r0
 8002922:	60b9      	str	r1, [r7, #8]
 8002924:	607a      	str	r2, [r7, #4]
 8002926:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002928:	2300      	movs	r3, #0
 800292a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800292c:	f7ff ff3e 	bl	80027ac <__NVIC_GetPriorityGrouping>
 8002930:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	68b9      	ldr	r1, [r7, #8]
 8002936:	6978      	ldr	r0, [r7, #20]
 8002938:	f7ff ff8e 	bl	8002858 <NVIC_EncodePriority>
 800293c:	4602      	mov	r2, r0
 800293e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002942:	4611      	mov	r1, r2
 8002944:	4618      	mov	r0, r3
 8002946:	f7ff ff5d 	bl	8002804 <__NVIC_SetPriority>
}
 800294a:	bf00      	nop
 800294c:	3718      	adds	r7, #24
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}

08002952 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002952:	b580      	push	{r7, lr}
 8002954:	b082      	sub	sp, #8
 8002956:	af00      	add	r7, sp, #0
 8002958:	4603      	mov	r3, r0
 800295a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800295c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002960:	4618      	mov	r0, r3
 8002962:	f7ff ff31 	bl	80027c8 <__NVIC_EnableIRQ>
}
 8002966:	bf00      	nop
 8002968:	3708      	adds	r7, #8
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}

0800296e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800296e:	b580      	push	{r7, lr}
 8002970:	b082      	sub	sp, #8
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f7ff ffa2 	bl	80028c0 <SysTick_Config>
 800297c:	4603      	mov	r3, r0
}
 800297e:	4618      	mov	r0, r3
 8002980:	3708      	adds	r7, #8
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}

08002986 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002986:	b480      	push	{r7}
 8002988:	b085      	sub	sp, #20
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800298e:	2300      	movs	r3, #0
 8002990:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002998:	b2db      	uxtb	r3, r3
 800299a:	2b02      	cmp	r3, #2
 800299c:	d008      	beq.n	80029b0 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2204      	movs	r2, #4
 80029a2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e022      	b.n	80029f6 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f022 020e 	bic.w	r2, r2, #14
 80029be:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f022 0201 	bic.w	r2, r2, #1
 80029ce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d4:	f003 021c 	and.w	r2, r3, #28
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029dc:	2101      	movs	r1, #1
 80029de:	fa01 f202 	lsl.w	r2, r1, r2
 80029e2:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80029f4:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3714      	adds	r7, #20
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr

08002a02 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b084      	sub	sp, #16
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d005      	beq.n	8002a26 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2204      	movs	r2, #4
 8002a1e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	73fb      	strb	r3, [r7, #15]
 8002a24:	e029      	b.n	8002a7a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f022 020e 	bic.w	r2, r2, #14
 8002a34:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f022 0201 	bic.w	r2, r2, #1
 8002a44:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a4a:	f003 021c 	and.w	r2, r3, #28
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a52:	2101      	movs	r1, #1
 8002a54:	fa01 f202 	lsl.w	r2, r1, r2
 8002a58:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2200      	movs	r2, #0
 8002a66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d003      	beq.n	8002a7a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	4798      	blx	r3
    }
  }
  return status;
 8002a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3710      	adds	r7, #16
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b087      	sub	sp, #28
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a92:	e17f      	b.n	8002d94 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	2101      	movs	r1, #1
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	f000 8171 	beq.w	8002d8e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d00b      	beq.n	8002acc <HAL_GPIO_Init+0x48>
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d007      	beq.n	8002acc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ac0:	2b11      	cmp	r3, #17
 8002ac2:	d003      	beq.n	8002acc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	2b12      	cmp	r3, #18
 8002aca:	d130      	bne.n	8002b2e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	005b      	lsls	r3, r3, #1
 8002ad6:	2203      	movs	r2, #3
 8002ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8002adc:	43db      	mvns	r3, r3
 8002ade:	693a      	ldr	r2, [r7, #16]
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	68da      	ldr	r2, [r3, #12]
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	005b      	lsls	r3, r3, #1
 8002aec:	fa02 f303 	lsl.w	r3, r2, r3
 8002af0:	693a      	ldr	r2, [r7, #16]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	693a      	ldr	r2, [r7, #16]
 8002afa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b02:	2201      	movs	r2, #1
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0a:	43db      	mvns	r3, r3
 8002b0c:	693a      	ldr	r2, [r7, #16]
 8002b0e:	4013      	ands	r3, r2
 8002b10:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	091b      	lsrs	r3, r3, #4
 8002b18:	f003 0201 	and.w	r2, r3, #1
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b22:	693a      	ldr	r2, [r7, #16]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	693a      	ldr	r2, [r7, #16]
 8002b2c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f003 0303 	and.w	r3, r3, #3
 8002b36:	2b03      	cmp	r3, #3
 8002b38:	d118      	bne.n	8002b6c <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b3e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002b40:	2201      	movs	r2, #1
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	fa02 f303 	lsl.w	r3, r2, r3
 8002b48:	43db      	mvns	r3, r3
 8002b4a:	693a      	ldr	r2, [r7, #16]
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	08db      	lsrs	r3, r3, #3
 8002b56:	f003 0201 	and.w	r2, r3, #1
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b60:	693a      	ldr	r2, [r7, #16]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	693a      	ldr	r2, [r7, #16]
 8002b6a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	005b      	lsls	r3, r3, #1
 8002b76:	2203      	movs	r2, #3
 8002b78:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7c:	43db      	mvns	r3, r3
 8002b7e:	693a      	ldr	r2, [r7, #16]
 8002b80:	4013      	ands	r3, r2
 8002b82:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	689a      	ldr	r2, [r3, #8]
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	005b      	lsls	r3, r3, #1
 8002b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b90:	693a      	ldr	r2, [r7, #16]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	693a      	ldr	r2, [r7, #16]
 8002b9a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d003      	beq.n	8002bac <HAL_GPIO_Init+0x128>
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	2b12      	cmp	r3, #18
 8002baa:	d123      	bne.n	8002bf4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	08da      	lsrs	r2, r3, #3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	3208      	adds	r2, #8
 8002bb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bb8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	f003 0307 	and.w	r3, r3, #7
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	220f      	movs	r2, #15
 8002bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc8:	43db      	mvns	r3, r3
 8002bca:	693a      	ldr	r2, [r7, #16]
 8002bcc:	4013      	ands	r3, r2
 8002bce:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	691a      	ldr	r2, [r3, #16]
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	f003 0307 	and.w	r3, r3, #7
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002be0:	693a      	ldr	r2, [r7, #16]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	08da      	lsrs	r2, r3, #3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	3208      	adds	r2, #8
 8002bee:	6939      	ldr	r1, [r7, #16]
 8002bf0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	005b      	lsls	r3, r3, #1
 8002bfe:	2203      	movs	r2, #3
 8002c00:	fa02 f303 	lsl.w	r3, r2, r3
 8002c04:	43db      	mvns	r3, r3
 8002c06:	693a      	ldr	r2, [r7, #16]
 8002c08:	4013      	ands	r3, r2
 8002c0a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f003 0203 	and.w	r2, r3, #3
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	005b      	lsls	r3, r3, #1
 8002c18:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1c:	693a      	ldr	r2, [r7, #16]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	693a      	ldr	r2, [r7, #16]
 8002c26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	f000 80ac 	beq.w	8002d8e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c36:	4b5f      	ldr	r3, [pc, #380]	; (8002db4 <HAL_GPIO_Init+0x330>)
 8002c38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c3a:	4a5e      	ldr	r2, [pc, #376]	; (8002db4 <HAL_GPIO_Init+0x330>)
 8002c3c:	f043 0301 	orr.w	r3, r3, #1
 8002c40:	6613      	str	r3, [r2, #96]	; 0x60
 8002c42:	4b5c      	ldr	r3, [pc, #368]	; (8002db4 <HAL_GPIO_Init+0x330>)
 8002c44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c46:	f003 0301 	and.w	r3, r3, #1
 8002c4a:	60bb      	str	r3, [r7, #8]
 8002c4c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002c4e:	4a5a      	ldr	r2, [pc, #360]	; (8002db8 <HAL_GPIO_Init+0x334>)
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	089b      	lsrs	r3, r3, #2
 8002c54:	3302      	adds	r3, #2
 8002c56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c5a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	f003 0303 	and.w	r3, r3, #3
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	220f      	movs	r2, #15
 8002c66:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6a:	43db      	mvns	r3, r3
 8002c6c:	693a      	ldr	r2, [r7, #16]
 8002c6e:	4013      	ands	r3, r2
 8002c70:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002c78:	d025      	beq.n	8002cc6 <HAL_GPIO_Init+0x242>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4a4f      	ldr	r2, [pc, #316]	; (8002dbc <HAL_GPIO_Init+0x338>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d01f      	beq.n	8002cc2 <HAL_GPIO_Init+0x23e>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4a4e      	ldr	r2, [pc, #312]	; (8002dc0 <HAL_GPIO_Init+0x33c>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d019      	beq.n	8002cbe <HAL_GPIO_Init+0x23a>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a4d      	ldr	r2, [pc, #308]	; (8002dc4 <HAL_GPIO_Init+0x340>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d013      	beq.n	8002cba <HAL_GPIO_Init+0x236>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a4c      	ldr	r2, [pc, #304]	; (8002dc8 <HAL_GPIO_Init+0x344>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d00d      	beq.n	8002cb6 <HAL_GPIO_Init+0x232>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a4b      	ldr	r2, [pc, #300]	; (8002dcc <HAL_GPIO_Init+0x348>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d007      	beq.n	8002cb2 <HAL_GPIO_Init+0x22e>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a4a      	ldr	r2, [pc, #296]	; (8002dd0 <HAL_GPIO_Init+0x34c>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d101      	bne.n	8002cae <HAL_GPIO_Init+0x22a>
 8002caa:	2306      	movs	r3, #6
 8002cac:	e00c      	b.n	8002cc8 <HAL_GPIO_Init+0x244>
 8002cae:	2307      	movs	r3, #7
 8002cb0:	e00a      	b.n	8002cc8 <HAL_GPIO_Init+0x244>
 8002cb2:	2305      	movs	r3, #5
 8002cb4:	e008      	b.n	8002cc8 <HAL_GPIO_Init+0x244>
 8002cb6:	2304      	movs	r3, #4
 8002cb8:	e006      	b.n	8002cc8 <HAL_GPIO_Init+0x244>
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e004      	b.n	8002cc8 <HAL_GPIO_Init+0x244>
 8002cbe:	2302      	movs	r3, #2
 8002cc0:	e002      	b.n	8002cc8 <HAL_GPIO_Init+0x244>
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e000      	b.n	8002cc8 <HAL_GPIO_Init+0x244>
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	697a      	ldr	r2, [r7, #20]
 8002cca:	f002 0203 	and.w	r2, r2, #3
 8002cce:	0092      	lsls	r2, r2, #2
 8002cd0:	4093      	lsls	r3, r2
 8002cd2:	693a      	ldr	r2, [r7, #16]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002cd8:	4937      	ldr	r1, [pc, #220]	; (8002db8 <HAL_GPIO_Init+0x334>)
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	089b      	lsrs	r3, r3, #2
 8002cde:	3302      	adds	r3, #2
 8002ce0:	693a      	ldr	r2, [r7, #16]
 8002ce2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002ce6:	4b3b      	ldr	r3, [pc, #236]	; (8002dd4 <HAL_GPIO_Init+0x350>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	43db      	mvns	r3, r3
 8002cf0:	693a      	ldr	r2, [r7, #16]
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d003      	beq.n	8002d0a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002d02:	693a      	ldr	r2, [r7, #16]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002d0a:	4a32      	ldr	r2, [pc, #200]	; (8002dd4 <HAL_GPIO_Init+0x350>)
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002d10:	4b30      	ldr	r3, [pc, #192]	; (8002dd4 <HAL_GPIO_Init+0x350>)
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	43db      	mvns	r3, r3
 8002d1a:	693a      	ldr	r2, [r7, #16]
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d003      	beq.n	8002d34 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002d2c:	693a      	ldr	r2, [r7, #16]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002d34:	4a27      	ldr	r2, [pc, #156]	; (8002dd4 <HAL_GPIO_Init+0x350>)
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002d3a:	4b26      	ldr	r3, [pc, #152]	; (8002dd4 <HAL_GPIO_Init+0x350>)
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	43db      	mvns	r3, r3
 8002d44:	693a      	ldr	r2, [r7, #16]
 8002d46:	4013      	ands	r3, r2
 8002d48:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d003      	beq.n	8002d5e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002d56:	693a      	ldr	r2, [r7, #16]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002d5e:	4a1d      	ldr	r2, [pc, #116]	; (8002dd4 <HAL_GPIO_Init+0x350>)
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002d64:	4b1b      	ldr	r3, [pc, #108]	; (8002dd4 <HAL_GPIO_Init+0x350>)
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	43db      	mvns	r3, r3
 8002d6e:	693a      	ldr	r2, [r7, #16]
 8002d70:	4013      	ands	r3, r2
 8002d72:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d003      	beq.n	8002d88 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002d80:	693a      	ldr	r2, [r7, #16]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002d88:	4a12      	ldr	r2, [pc, #72]	; (8002dd4 <HAL_GPIO_Init+0x350>)
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	3301      	adds	r3, #1
 8002d92:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	fa22 f303 	lsr.w	r3, r2, r3
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	f47f ae78 	bne.w	8002a94 <HAL_GPIO_Init+0x10>
  }
}
 8002da4:	bf00      	nop
 8002da6:	bf00      	nop
 8002da8:	371c      	adds	r7, #28
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
 8002db2:	bf00      	nop
 8002db4:	40021000 	.word	0x40021000
 8002db8:	40010000 	.word	0x40010000
 8002dbc:	48000400 	.word	0x48000400
 8002dc0:	48000800 	.word	0x48000800
 8002dc4:	48000c00 	.word	0x48000c00
 8002dc8:	48001000 	.word	0x48001000
 8002dcc:	48001400 	.word	0x48001400
 8002dd0:	48001800 	.word	0x48001800
 8002dd4:	40010400 	.word	0x40010400

08002dd8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b085      	sub	sp, #20
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	460b      	mov	r3, r1
 8002de2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	691a      	ldr	r2, [r3, #16]
 8002de8:	887b      	ldrh	r3, [r7, #2]
 8002dea:	4013      	ands	r3, r2
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d002      	beq.n	8002df6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002df0:	2301      	movs	r3, #1
 8002df2:	73fb      	strb	r3, [r7, #15]
 8002df4:	e001      	b.n	8002dfa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002df6:	2300      	movs	r3, #0
 8002df8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002dfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3714      	adds	r7, #20
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr

08002e08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	460b      	mov	r3, r1
 8002e12:	807b      	strh	r3, [r7, #2]
 8002e14:	4613      	mov	r3, r2
 8002e16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e18:	787b      	ldrb	r3, [r7, #1]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d003      	beq.n	8002e26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e1e:	887a      	ldrh	r2, [r7, #2]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e24:	e002      	b.n	8002e2c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e26:	887a      	ldrh	r2, [r7, #2]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002e2c:	bf00      	nop
 8002e2e:	370c      	adds	r7, #12
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr

08002e38 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	4603      	mov	r3, r0
 8002e40:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002e42:	4b08      	ldr	r3, [pc, #32]	; (8002e64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e44:	695a      	ldr	r2, [r3, #20]
 8002e46:	88fb      	ldrh	r3, [r7, #6]
 8002e48:	4013      	ands	r3, r2
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d006      	beq.n	8002e5c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e4e:	4a05      	ldr	r2, [pc, #20]	; (8002e64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e50:	88fb      	ldrh	r3, [r7, #6]
 8002e52:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e54:	88fb      	ldrh	r3, [r7, #6]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7ff f936 	bl	80020c8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002e5c:	bf00      	nop
 8002e5e:	3708      	adds	r7, #8
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	40010400 	.word	0x40010400

08002e68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d101      	bne.n	8002e7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e081      	b.n	8002f7e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d106      	bne.n	8002e94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f7fe fefa 	bl	8001c88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2224      	movs	r2, #36	; 0x24
 8002e98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f022 0201 	bic.w	r2, r2, #1
 8002eaa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	685a      	ldr	r2, [r3, #4]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002eb8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	689a      	ldr	r2, [r3, #8]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ec8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d107      	bne.n	8002ee2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	689a      	ldr	r2, [r3, #8]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ede:	609a      	str	r2, [r3, #8]
 8002ee0:	e006      	b.n	8002ef0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	689a      	ldr	r2, [r3, #8]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002eee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d104      	bne.n	8002f02 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f00:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	687a      	ldr	r2, [r7, #4]
 8002f0a:	6812      	ldr	r2, [r2, #0]
 8002f0c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f14:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	68da      	ldr	r2, [r3, #12]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f24:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	691a      	ldr	r2, [r3, #16]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	695b      	ldr	r3, [r3, #20]
 8002f2e:	ea42 0103 	orr.w	r1, r2, r3
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	699b      	ldr	r3, [r3, #24]
 8002f36:	021a      	lsls	r2, r3, #8
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	430a      	orrs	r2, r1
 8002f3e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	69d9      	ldr	r1, [r3, #28]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6a1a      	ldr	r2, [r3, #32]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	430a      	orrs	r2, r1
 8002f4e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f042 0201 	orr.w	r2, r2, #1
 8002f5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2220      	movs	r2, #32
 8002f6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3708      	adds	r7, #8
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
	...

08002f88 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b088      	sub	sp, #32
 8002f8c:	af02      	add	r7, sp, #8
 8002f8e:	60f8      	str	r0, [r7, #12]
 8002f90:	607a      	str	r2, [r7, #4]
 8002f92:	461a      	mov	r2, r3
 8002f94:	460b      	mov	r3, r1
 8002f96:	817b      	strh	r3, [r7, #10]
 8002f98:	4613      	mov	r3, r2
 8002f9a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	2b20      	cmp	r3, #32
 8002fa6:	f040 80da 	bne.w	800315e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d101      	bne.n	8002fb8 <HAL_I2C_Master_Transmit+0x30>
 8002fb4:	2302      	movs	r3, #2
 8002fb6:	e0d3      	b.n	8003160 <HAL_I2C_Master_Transmit+0x1d8>
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002fc0:	f7ff fba0 	bl	8002704 <HAL_GetTick>
 8002fc4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	9300      	str	r3, [sp, #0]
 8002fca:	2319      	movs	r3, #25
 8002fcc:	2201      	movs	r2, #1
 8002fce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002fd2:	68f8      	ldr	r0, [r7, #12]
 8002fd4:	f000 fbc6 	bl	8003764 <I2C_WaitOnFlagUntilTimeout>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d001      	beq.n	8002fe2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e0be      	b.n	8003160 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2221      	movs	r2, #33	; 0x21
 8002fe6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2210      	movs	r2, #16
 8002fee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	893a      	ldrh	r2, [r7, #8]
 8003002:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2200      	movs	r2, #0
 8003008:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800300e:	b29b      	uxth	r3, r3
 8003010:	2bff      	cmp	r3, #255	; 0xff
 8003012:	d90e      	bls.n	8003032 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	22ff      	movs	r2, #255	; 0xff
 8003018:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800301e:	b2da      	uxtb	r2, r3
 8003020:	8979      	ldrh	r1, [r7, #10]
 8003022:	4b51      	ldr	r3, [pc, #324]	; (8003168 <HAL_I2C_Master_Transmit+0x1e0>)
 8003024:	9300      	str	r3, [sp, #0]
 8003026:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800302a:	68f8      	ldr	r0, [r7, #12]
 800302c:	f000 fcbc 	bl	80039a8 <I2C_TransferConfig>
 8003030:	e06c      	b.n	800310c <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003036:	b29a      	uxth	r2, r3
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003040:	b2da      	uxtb	r2, r3
 8003042:	8979      	ldrh	r1, [r7, #10]
 8003044:	4b48      	ldr	r3, [pc, #288]	; (8003168 <HAL_I2C_Master_Transmit+0x1e0>)
 8003046:	9300      	str	r3, [sp, #0]
 8003048:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800304c:	68f8      	ldr	r0, [r7, #12]
 800304e:	f000 fcab 	bl	80039a8 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8003052:	e05b      	b.n	800310c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003054:	697a      	ldr	r2, [r7, #20]
 8003056:	6a39      	ldr	r1, [r7, #32]
 8003058:	68f8      	ldr	r0, [r7, #12]
 800305a:	f000 fbc3 	bl	80037e4 <I2C_WaitOnTXISFlagUntilTimeout>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d001      	beq.n	8003068 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e07b      	b.n	8003160 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306c:	781a      	ldrb	r2, [r3, #0]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003078:	1c5a      	adds	r2, r3, #1
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003082:	b29b      	uxth	r3, r3
 8003084:	3b01      	subs	r3, #1
 8003086:	b29a      	uxth	r2, r3
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003090:	3b01      	subs	r3, #1
 8003092:	b29a      	uxth	r2, r3
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800309c:	b29b      	uxth	r3, r3
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d034      	beq.n	800310c <HAL_I2C_Master_Transmit+0x184>
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d130      	bne.n	800310c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	9300      	str	r3, [sp, #0]
 80030ae:	6a3b      	ldr	r3, [r7, #32]
 80030b0:	2200      	movs	r2, #0
 80030b2:	2180      	movs	r1, #128	; 0x80
 80030b4:	68f8      	ldr	r0, [r7, #12]
 80030b6:	f000 fb55 	bl	8003764 <I2C_WaitOnFlagUntilTimeout>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d001      	beq.n	80030c4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e04d      	b.n	8003160 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	2bff      	cmp	r3, #255	; 0xff
 80030cc:	d90e      	bls.n	80030ec <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	22ff      	movs	r2, #255	; 0xff
 80030d2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030d8:	b2da      	uxtb	r2, r3
 80030da:	8979      	ldrh	r1, [r7, #10]
 80030dc:	2300      	movs	r3, #0
 80030de:	9300      	str	r3, [sp, #0]
 80030e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030e4:	68f8      	ldr	r0, [r7, #12]
 80030e6:	f000 fc5f 	bl	80039a8 <I2C_TransferConfig>
 80030ea:	e00f      	b.n	800310c <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030f0:	b29a      	uxth	r2, r3
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030fa:	b2da      	uxtb	r2, r3
 80030fc:	8979      	ldrh	r1, [r7, #10]
 80030fe:	2300      	movs	r3, #0
 8003100:	9300      	str	r3, [sp, #0]
 8003102:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003106:	68f8      	ldr	r0, [r7, #12]
 8003108:	f000 fc4e 	bl	80039a8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003110:	b29b      	uxth	r3, r3
 8003112:	2b00      	cmp	r3, #0
 8003114:	d19e      	bne.n	8003054 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003116:	697a      	ldr	r2, [r7, #20]
 8003118:	6a39      	ldr	r1, [r7, #32]
 800311a:	68f8      	ldr	r0, [r7, #12]
 800311c:	f000 fba2 	bl	8003864 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d001      	beq.n	800312a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e01a      	b.n	8003160 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2220      	movs	r2, #32
 8003130:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	6859      	ldr	r1, [r3, #4]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	4b0b      	ldr	r3, [pc, #44]	; (800316c <HAL_I2C_Master_Transmit+0x1e4>)
 800313e:	400b      	ands	r3, r1
 8003140:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2220      	movs	r2, #32
 8003146:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2200      	movs	r2, #0
 8003156:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800315a:	2300      	movs	r3, #0
 800315c:	e000      	b.n	8003160 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800315e:	2302      	movs	r3, #2
  }
}
 8003160:	4618      	mov	r0, r3
 8003162:	3718      	adds	r7, #24
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}
 8003168:	80002000 	.word	0x80002000
 800316c:	fe00e800 	.word	0xfe00e800

08003170 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b088      	sub	sp, #32
 8003174:	af02      	add	r7, sp, #8
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	4608      	mov	r0, r1
 800317a:	4611      	mov	r1, r2
 800317c:	461a      	mov	r2, r3
 800317e:	4603      	mov	r3, r0
 8003180:	817b      	strh	r3, [r7, #10]
 8003182:	460b      	mov	r3, r1
 8003184:	813b      	strh	r3, [r7, #8]
 8003186:	4613      	mov	r3, r2
 8003188:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003190:	b2db      	uxtb	r3, r3
 8003192:	2b20      	cmp	r3, #32
 8003194:	f040 80f9 	bne.w	800338a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003198:	6a3b      	ldr	r3, [r7, #32]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d002      	beq.n	80031a4 <HAL_I2C_Mem_Write+0x34>
 800319e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d105      	bne.n	80031b0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031aa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e0ed      	b.n	800338c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d101      	bne.n	80031be <HAL_I2C_Mem_Write+0x4e>
 80031ba:	2302      	movs	r3, #2
 80031bc:	e0e6      	b.n	800338c <HAL_I2C_Mem_Write+0x21c>
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2201      	movs	r2, #1
 80031c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80031c6:	f7ff fa9d 	bl	8002704 <HAL_GetTick>
 80031ca:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	9300      	str	r3, [sp, #0]
 80031d0:	2319      	movs	r3, #25
 80031d2:	2201      	movs	r2, #1
 80031d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80031d8:	68f8      	ldr	r0, [r7, #12]
 80031da:	f000 fac3 	bl	8003764 <I2C_WaitOnFlagUntilTimeout>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d001      	beq.n	80031e8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e0d1      	b.n	800338c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2221      	movs	r2, #33	; 0x21
 80031ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2240      	movs	r2, #64	; 0x40
 80031f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2200      	movs	r2, #0
 80031fc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6a3a      	ldr	r2, [r7, #32]
 8003202:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003208:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2200      	movs	r2, #0
 800320e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003210:	88f8      	ldrh	r0, [r7, #6]
 8003212:	893a      	ldrh	r2, [r7, #8]
 8003214:	8979      	ldrh	r1, [r7, #10]
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	9301      	str	r3, [sp, #4]
 800321a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800321c:	9300      	str	r3, [sp, #0]
 800321e:	4603      	mov	r3, r0
 8003220:	68f8      	ldr	r0, [r7, #12]
 8003222:	f000 f9d3 	bl	80035cc <I2C_RequestMemoryWrite>
 8003226:	4603      	mov	r3, r0
 8003228:	2b00      	cmp	r3, #0
 800322a:	d005      	beq.n	8003238 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2200      	movs	r2, #0
 8003230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e0a9      	b.n	800338c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800323c:	b29b      	uxth	r3, r3
 800323e:	2bff      	cmp	r3, #255	; 0xff
 8003240:	d90e      	bls.n	8003260 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	22ff      	movs	r2, #255	; 0xff
 8003246:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800324c:	b2da      	uxtb	r2, r3
 800324e:	8979      	ldrh	r1, [r7, #10]
 8003250:	2300      	movs	r3, #0
 8003252:	9300      	str	r3, [sp, #0]
 8003254:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003258:	68f8      	ldr	r0, [r7, #12]
 800325a:	f000 fba5 	bl	80039a8 <I2C_TransferConfig>
 800325e:	e00f      	b.n	8003280 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003264:	b29a      	uxth	r2, r3
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800326e:	b2da      	uxtb	r2, r3
 8003270:	8979      	ldrh	r1, [r7, #10]
 8003272:	2300      	movs	r3, #0
 8003274:	9300      	str	r3, [sp, #0]
 8003276:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800327a:	68f8      	ldr	r0, [r7, #12]
 800327c:	f000 fb94 	bl	80039a8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003280:	697a      	ldr	r2, [r7, #20]
 8003282:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003284:	68f8      	ldr	r0, [r7, #12]
 8003286:	f000 faad 	bl	80037e4 <I2C_WaitOnTXISFlagUntilTimeout>
 800328a:	4603      	mov	r3, r0
 800328c:	2b00      	cmp	r3, #0
 800328e:	d001      	beq.n	8003294 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e07b      	b.n	800338c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003298:	781a      	ldrb	r2, [r3, #0]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a4:	1c5a      	adds	r2, r3, #1
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	3b01      	subs	r3, #1
 80032b2:	b29a      	uxth	r2, r3
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032bc:	3b01      	subs	r3, #1
 80032be:	b29a      	uxth	r2, r3
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d034      	beq.n	8003338 <HAL_I2C_Mem_Write+0x1c8>
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d130      	bne.n	8003338 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	9300      	str	r3, [sp, #0]
 80032da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032dc:	2200      	movs	r2, #0
 80032de:	2180      	movs	r1, #128	; 0x80
 80032e0:	68f8      	ldr	r0, [r7, #12]
 80032e2:	f000 fa3f 	bl	8003764 <I2C_WaitOnFlagUntilTimeout>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d001      	beq.n	80032f0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e04d      	b.n	800338c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	2bff      	cmp	r3, #255	; 0xff
 80032f8:	d90e      	bls.n	8003318 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	22ff      	movs	r2, #255	; 0xff
 80032fe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003304:	b2da      	uxtb	r2, r3
 8003306:	8979      	ldrh	r1, [r7, #10]
 8003308:	2300      	movs	r3, #0
 800330a:	9300      	str	r3, [sp, #0]
 800330c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003310:	68f8      	ldr	r0, [r7, #12]
 8003312:	f000 fb49 	bl	80039a8 <I2C_TransferConfig>
 8003316:	e00f      	b.n	8003338 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800331c:	b29a      	uxth	r2, r3
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003326:	b2da      	uxtb	r2, r3
 8003328:	8979      	ldrh	r1, [r7, #10]
 800332a:	2300      	movs	r3, #0
 800332c:	9300      	str	r3, [sp, #0]
 800332e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003332:	68f8      	ldr	r0, [r7, #12]
 8003334:	f000 fb38 	bl	80039a8 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800333c:	b29b      	uxth	r3, r3
 800333e:	2b00      	cmp	r3, #0
 8003340:	d19e      	bne.n	8003280 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003342:	697a      	ldr	r2, [r7, #20]
 8003344:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003346:	68f8      	ldr	r0, [r7, #12]
 8003348:	f000 fa8c 	bl	8003864 <I2C_WaitOnSTOPFlagUntilTimeout>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d001      	beq.n	8003356 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e01a      	b.n	800338c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2220      	movs	r2, #32
 800335c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	6859      	ldr	r1, [r3, #4]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	4b0a      	ldr	r3, [pc, #40]	; (8003394 <HAL_I2C_Mem_Write+0x224>)
 800336a:	400b      	ands	r3, r1
 800336c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2220      	movs	r2, #32
 8003372:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2200      	movs	r2, #0
 800337a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003386:	2300      	movs	r3, #0
 8003388:	e000      	b.n	800338c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800338a:	2302      	movs	r3, #2
  }
}
 800338c:	4618      	mov	r0, r3
 800338e:	3718      	adds	r7, #24
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}
 8003394:	fe00e800 	.word	0xfe00e800

08003398 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b088      	sub	sp, #32
 800339c:	af02      	add	r7, sp, #8
 800339e:	60f8      	str	r0, [r7, #12]
 80033a0:	4608      	mov	r0, r1
 80033a2:	4611      	mov	r1, r2
 80033a4:	461a      	mov	r2, r3
 80033a6:	4603      	mov	r3, r0
 80033a8:	817b      	strh	r3, [r7, #10]
 80033aa:	460b      	mov	r3, r1
 80033ac:	813b      	strh	r3, [r7, #8]
 80033ae:	4613      	mov	r3, r2
 80033b0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	2b20      	cmp	r3, #32
 80033bc:	f040 80fd 	bne.w	80035ba <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80033c0:	6a3b      	ldr	r3, [r7, #32]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d002      	beq.n	80033cc <HAL_I2C_Mem_Read+0x34>
 80033c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d105      	bne.n	80033d8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033d2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e0f1      	b.n	80035bc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d101      	bne.n	80033e6 <HAL_I2C_Mem_Read+0x4e>
 80033e2:	2302      	movs	r3, #2
 80033e4:	e0ea      	b.n	80035bc <HAL_I2C_Mem_Read+0x224>
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2201      	movs	r2, #1
 80033ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80033ee:	f7ff f989 	bl	8002704 <HAL_GetTick>
 80033f2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	9300      	str	r3, [sp, #0]
 80033f8:	2319      	movs	r3, #25
 80033fa:	2201      	movs	r2, #1
 80033fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003400:	68f8      	ldr	r0, [r7, #12]
 8003402:	f000 f9af 	bl	8003764 <I2C_WaitOnFlagUntilTimeout>
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d001      	beq.n	8003410 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e0d5      	b.n	80035bc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2222      	movs	r2, #34	; 0x22
 8003414:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2240      	movs	r2, #64	; 0x40
 800341c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2200      	movs	r2, #0
 8003424:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6a3a      	ldr	r2, [r7, #32]
 800342a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003430:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2200      	movs	r2, #0
 8003436:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003438:	88f8      	ldrh	r0, [r7, #6]
 800343a:	893a      	ldrh	r2, [r7, #8]
 800343c:	8979      	ldrh	r1, [r7, #10]
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	9301      	str	r3, [sp, #4]
 8003442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003444:	9300      	str	r3, [sp, #0]
 8003446:	4603      	mov	r3, r0
 8003448:	68f8      	ldr	r0, [r7, #12]
 800344a:	f000 f913 	bl	8003674 <I2C_RequestMemoryRead>
 800344e:	4603      	mov	r3, r0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d005      	beq.n	8003460 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2200      	movs	r2, #0
 8003458:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e0ad      	b.n	80035bc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003464:	b29b      	uxth	r3, r3
 8003466:	2bff      	cmp	r3, #255	; 0xff
 8003468:	d90e      	bls.n	8003488 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	22ff      	movs	r2, #255	; 0xff
 800346e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003474:	b2da      	uxtb	r2, r3
 8003476:	8979      	ldrh	r1, [r7, #10]
 8003478:	4b52      	ldr	r3, [pc, #328]	; (80035c4 <HAL_I2C_Mem_Read+0x22c>)
 800347a:	9300      	str	r3, [sp, #0]
 800347c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003480:	68f8      	ldr	r0, [r7, #12]
 8003482:	f000 fa91 	bl	80039a8 <I2C_TransferConfig>
 8003486:	e00f      	b.n	80034a8 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800348c:	b29a      	uxth	r2, r3
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003496:	b2da      	uxtb	r2, r3
 8003498:	8979      	ldrh	r1, [r7, #10]
 800349a:	4b4a      	ldr	r3, [pc, #296]	; (80035c4 <HAL_I2C_Mem_Read+0x22c>)
 800349c:	9300      	str	r3, [sp, #0]
 800349e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034a2:	68f8      	ldr	r0, [r7, #12]
 80034a4:	f000 fa80 	bl	80039a8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	9300      	str	r3, [sp, #0]
 80034ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ae:	2200      	movs	r2, #0
 80034b0:	2104      	movs	r1, #4
 80034b2:	68f8      	ldr	r0, [r7, #12]
 80034b4:	f000 f956 	bl	8003764 <I2C_WaitOnFlagUntilTimeout>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d001      	beq.n	80034c2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e07c      	b.n	80035bc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034cc:	b2d2      	uxtb	r2, r2
 80034ce:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d4:	1c5a      	adds	r2, r3, #1
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034de:	3b01      	subs	r3, #1
 80034e0:	b29a      	uxth	r2, r3
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	3b01      	subs	r3, #1
 80034ee:	b29a      	uxth	r2, r3
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d034      	beq.n	8003568 <HAL_I2C_Mem_Read+0x1d0>
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003502:	2b00      	cmp	r3, #0
 8003504:	d130      	bne.n	8003568 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	9300      	str	r3, [sp, #0]
 800350a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800350c:	2200      	movs	r2, #0
 800350e:	2180      	movs	r1, #128	; 0x80
 8003510:	68f8      	ldr	r0, [r7, #12]
 8003512:	f000 f927 	bl	8003764 <I2C_WaitOnFlagUntilTimeout>
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d001      	beq.n	8003520 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e04d      	b.n	80035bc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003524:	b29b      	uxth	r3, r3
 8003526:	2bff      	cmp	r3, #255	; 0xff
 8003528:	d90e      	bls.n	8003548 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	22ff      	movs	r2, #255	; 0xff
 800352e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003534:	b2da      	uxtb	r2, r3
 8003536:	8979      	ldrh	r1, [r7, #10]
 8003538:	2300      	movs	r3, #0
 800353a:	9300      	str	r3, [sp, #0]
 800353c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003540:	68f8      	ldr	r0, [r7, #12]
 8003542:	f000 fa31 	bl	80039a8 <I2C_TransferConfig>
 8003546:	e00f      	b.n	8003568 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800354c:	b29a      	uxth	r2, r3
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003556:	b2da      	uxtb	r2, r3
 8003558:	8979      	ldrh	r1, [r7, #10]
 800355a:	2300      	movs	r3, #0
 800355c:	9300      	str	r3, [sp, #0]
 800355e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003562:	68f8      	ldr	r0, [r7, #12]
 8003564:	f000 fa20 	bl	80039a8 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800356c:	b29b      	uxth	r3, r3
 800356e:	2b00      	cmp	r3, #0
 8003570:	d19a      	bne.n	80034a8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003572:	697a      	ldr	r2, [r7, #20]
 8003574:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003576:	68f8      	ldr	r0, [r7, #12]
 8003578:	f000 f974 	bl	8003864 <I2C_WaitOnSTOPFlagUntilTimeout>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d001      	beq.n	8003586 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e01a      	b.n	80035bc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	2220      	movs	r2, #32
 800358c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	6859      	ldr	r1, [r3, #4]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	4b0b      	ldr	r3, [pc, #44]	; (80035c8 <HAL_I2C_Mem_Read+0x230>)
 800359a:	400b      	ands	r3, r1
 800359c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2220      	movs	r2, #32
 80035a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2200      	movs	r2, #0
 80035aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2200      	movs	r2, #0
 80035b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80035b6:	2300      	movs	r3, #0
 80035b8:	e000      	b.n	80035bc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80035ba:	2302      	movs	r3, #2
  }
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3718      	adds	r7, #24
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	80002400 	.word	0x80002400
 80035c8:	fe00e800 	.word	0xfe00e800

080035cc <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b086      	sub	sp, #24
 80035d0:	af02      	add	r7, sp, #8
 80035d2:	60f8      	str	r0, [r7, #12]
 80035d4:	4608      	mov	r0, r1
 80035d6:	4611      	mov	r1, r2
 80035d8:	461a      	mov	r2, r3
 80035da:	4603      	mov	r3, r0
 80035dc:	817b      	strh	r3, [r7, #10]
 80035de:	460b      	mov	r3, r1
 80035e0:	813b      	strh	r3, [r7, #8]
 80035e2:	4613      	mov	r3, r2
 80035e4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80035e6:	88fb      	ldrh	r3, [r7, #6]
 80035e8:	b2da      	uxtb	r2, r3
 80035ea:	8979      	ldrh	r1, [r7, #10]
 80035ec:	4b20      	ldr	r3, [pc, #128]	; (8003670 <I2C_RequestMemoryWrite+0xa4>)
 80035ee:	9300      	str	r3, [sp, #0]
 80035f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80035f4:	68f8      	ldr	r0, [r7, #12]
 80035f6:	f000 f9d7 	bl	80039a8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035fa:	69fa      	ldr	r2, [r7, #28]
 80035fc:	69b9      	ldr	r1, [r7, #24]
 80035fe:	68f8      	ldr	r0, [r7, #12]
 8003600:	f000 f8f0 	bl	80037e4 <I2C_WaitOnTXISFlagUntilTimeout>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d001      	beq.n	800360e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e02c      	b.n	8003668 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800360e:	88fb      	ldrh	r3, [r7, #6]
 8003610:	2b01      	cmp	r3, #1
 8003612:	d105      	bne.n	8003620 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003614:	893b      	ldrh	r3, [r7, #8]
 8003616:	b2da      	uxtb	r2, r3
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	629a      	str	r2, [r3, #40]	; 0x28
 800361e:	e015      	b.n	800364c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003620:	893b      	ldrh	r3, [r7, #8]
 8003622:	0a1b      	lsrs	r3, r3, #8
 8003624:	b29b      	uxth	r3, r3
 8003626:	b2da      	uxtb	r2, r3
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800362e:	69fa      	ldr	r2, [r7, #28]
 8003630:	69b9      	ldr	r1, [r7, #24]
 8003632:	68f8      	ldr	r0, [r7, #12]
 8003634:	f000 f8d6 	bl	80037e4 <I2C_WaitOnTXISFlagUntilTimeout>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d001      	beq.n	8003642 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e012      	b.n	8003668 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003642:	893b      	ldrh	r3, [r7, #8]
 8003644:	b2da      	uxtb	r2, r3
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	9300      	str	r3, [sp, #0]
 8003650:	69bb      	ldr	r3, [r7, #24]
 8003652:	2200      	movs	r2, #0
 8003654:	2180      	movs	r1, #128	; 0x80
 8003656:	68f8      	ldr	r0, [r7, #12]
 8003658:	f000 f884 	bl	8003764 <I2C_WaitOnFlagUntilTimeout>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d001      	beq.n	8003666 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e000      	b.n	8003668 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003666:	2300      	movs	r3, #0
}
 8003668:	4618      	mov	r0, r3
 800366a:	3710      	adds	r7, #16
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}
 8003670:	80002000 	.word	0x80002000

08003674 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b086      	sub	sp, #24
 8003678:	af02      	add	r7, sp, #8
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	4608      	mov	r0, r1
 800367e:	4611      	mov	r1, r2
 8003680:	461a      	mov	r2, r3
 8003682:	4603      	mov	r3, r0
 8003684:	817b      	strh	r3, [r7, #10]
 8003686:	460b      	mov	r3, r1
 8003688:	813b      	strh	r3, [r7, #8]
 800368a:	4613      	mov	r3, r2
 800368c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800368e:	88fb      	ldrh	r3, [r7, #6]
 8003690:	b2da      	uxtb	r2, r3
 8003692:	8979      	ldrh	r1, [r7, #10]
 8003694:	4b20      	ldr	r3, [pc, #128]	; (8003718 <I2C_RequestMemoryRead+0xa4>)
 8003696:	9300      	str	r3, [sp, #0]
 8003698:	2300      	movs	r3, #0
 800369a:	68f8      	ldr	r0, [r7, #12]
 800369c:	f000 f984 	bl	80039a8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036a0:	69fa      	ldr	r2, [r7, #28]
 80036a2:	69b9      	ldr	r1, [r7, #24]
 80036a4:	68f8      	ldr	r0, [r7, #12]
 80036a6:	f000 f89d 	bl	80037e4 <I2C_WaitOnTXISFlagUntilTimeout>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d001      	beq.n	80036b4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e02c      	b.n	800370e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80036b4:	88fb      	ldrh	r3, [r7, #6]
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d105      	bne.n	80036c6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80036ba:	893b      	ldrh	r3, [r7, #8]
 80036bc:	b2da      	uxtb	r2, r3
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	629a      	str	r2, [r3, #40]	; 0x28
 80036c4:	e015      	b.n	80036f2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80036c6:	893b      	ldrh	r3, [r7, #8]
 80036c8:	0a1b      	lsrs	r3, r3, #8
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	b2da      	uxtb	r2, r3
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036d4:	69fa      	ldr	r2, [r7, #28]
 80036d6:	69b9      	ldr	r1, [r7, #24]
 80036d8:	68f8      	ldr	r0, [r7, #12]
 80036da:	f000 f883 	bl	80037e4 <I2C_WaitOnTXISFlagUntilTimeout>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d001      	beq.n	80036e8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e012      	b.n	800370e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80036e8:	893b      	ldrh	r3, [r7, #8]
 80036ea:	b2da      	uxtb	r2, r3
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	9300      	str	r3, [sp, #0]
 80036f6:	69bb      	ldr	r3, [r7, #24]
 80036f8:	2200      	movs	r2, #0
 80036fa:	2140      	movs	r1, #64	; 0x40
 80036fc:	68f8      	ldr	r0, [r7, #12]
 80036fe:	f000 f831 	bl	8003764 <I2C_WaitOnFlagUntilTimeout>
 8003702:	4603      	mov	r3, r0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d001      	beq.n	800370c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e000      	b.n	800370e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800370c:	2300      	movs	r3, #0
}
 800370e:	4618      	mov	r0, r3
 8003710:	3710      	adds	r7, #16
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	80002000 	.word	0x80002000

0800371c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	699b      	ldr	r3, [r3, #24]
 800372a:	f003 0302 	and.w	r3, r3, #2
 800372e:	2b02      	cmp	r3, #2
 8003730:	d103      	bne.n	800373a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2200      	movs	r2, #0
 8003738:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	699b      	ldr	r3, [r3, #24]
 8003740:	f003 0301 	and.w	r3, r3, #1
 8003744:	2b01      	cmp	r3, #1
 8003746:	d007      	beq.n	8003758 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	699a      	ldr	r2, [r3, #24]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f042 0201 	orr.w	r2, r2, #1
 8003756:	619a      	str	r2, [r3, #24]
  }
}
 8003758:	bf00      	nop
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr

08003764 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
 800376a:	60f8      	str	r0, [r7, #12]
 800376c:	60b9      	str	r1, [r7, #8]
 800376e:	603b      	str	r3, [r7, #0]
 8003770:	4613      	mov	r3, r2
 8003772:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003774:	e022      	b.n	80037bc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800377c:	d01e      	beq.n	80037bc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800377e:	f7fe ffc1 	bl	8002704 <HAL_GetTick>
 8003782:	4602      	mov	r2, r0
 8003784:	69bb      	ldr	r3, [r7, #24]
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	683a      	ldr	r2, [r7, #0]
 800378a:	429a      	cmp	r2, r3
 800378c:	d302      	bcc.n	8003794 <I2C_WaitOnFlagUntilTimeout+0x30>
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d113      	bne.n	80037bc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003798:	f043 0220 	orr.w	r2, r3, #32
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2220      	movs	r2, #32
 80037a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2200      	movs	r2, #0
 80037b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e00f      	b.n	80037dc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	699a      	ldr	r2, [r3, #24]
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	4013      	ands	r3, r2
 80037c6:	68ba      	ldr	r2, [r7, #8]
 80037c8:	429a      	cmp	r2, r3
 80037ca:	bf0c      	ite	eq
 80037cc:	2301      	moveq	r3, #1
 80037ce:	2300      	movne	r3, #0
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	461a      	mov	r2, r3
 80037d4:	79fb      	ldrb	r3, [r7, #7]
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d0cd      	beq.n	8003776 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80037da:	2300      	movs	r3, #0
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3710      	adds	r7, #16
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	60f8      	str	r0, [r7, #12]
 80037ec:	60b9      	str	r1, [r7, #8]
 80037ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80037f0:	e02c      	b.n	800384c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	68b9      	ldr	r1, [r7, #8]
 80037f6:	68f8      	ldr	r0, [r7, #12]
 80037f8:	f000 f870 	bl	80038dc <I2C_IsAcknowledgeFailed>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d001      	beq.n	8003806 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e02a      	b.n	800385c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800380c:	d01e      	beq.n	800384c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800380e:	f7fe ff79 	bl	8002704 <HAL_GetTick>
 8003812:	4602      	mov	r2, r0
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	1ad3      	subs	r3, r2, r3
 8003818:	68ba      	ldr	r2, [r7, #8]
 800381a:	429a      	cmp	r2, r3
 800381c:	d302      	bcc.n	8003824 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d113      	bne.n	800384c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003828:	f043 0220 	orr.w	r2, r3, #32
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2220      	movs	r2, #32
 8003834:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2200      	movs	r2, #0
 800383c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2200      	movs	r2, #0
 8003844:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e007      	b.n	800385c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	699b      	ldr	r3, [r3, #24]
 8003852:	f003 0302 	and.w	r3, r3, #2
 8003856:	2b02      	cmp	r3, #2
 8003858:	d1cb      	bne.n	80037f2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800385a:	2300      	movs	r3, #0
}
 800385c:	4618      	mov	r0, r3
 800385e:	3710      	adds	r7, #16
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}

08003864 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b084      	sub	sp, #16
 8003868:	af00      	add	r7, sp, #0
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	60b9      	str	r1, [r7, #8]
 800386e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003870:	e028      	b.n	80038c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	68b9      	ldr	r1, [r7, #8]
 8003876:	68f8      	ldr	r0, [r7, #12]
 8003878:	f000 f830 	bl	80038dc <I2C_IsAcknowledgeFailed>
 800387c:	4603      	mov	r3, r0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d001      	beq.n	8003886 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e026      	b.n	80038d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003886:	f7fe ff3d 	bl	8002704 <HAL_GetTick>
 800388a:	4602      	mov	r2, r0
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	1ad3      	subs	r3, r2, r3
 8003890:	68ba      	ldr	r2, [r7, #8]
 8003892:	429a      	cmp	r2, r3
 8003894:	d302      	bcc.n	800389c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d113      	bne.n	80038c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a0:	f043 0220 	orr.w	r2, r3, #32
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2220      	movs	r2, #32
 80038ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2200      	movs	r2, #0
 80038bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e007      	b.n	80038d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	699b      	ldr	r3, [r3, #24]
 80038ca:	f003 0320 	and.w	r3, r3, #32
 80038ce:	2b20      	cmp	r3, #32
 80038d0:	d1cf      	bne.n	8003872 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80038d2:	2300      	movs	r3, #0
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3710      	adds	r7, #16
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}

080038dc <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b084      	sub	sp, #16
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	60f8      	str	r0, [r7, #12]
 80038e4:	60b9      	str	r1, [r7, #8]
 80038e6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	699b      	ldr	r3, [r3, #24]
 80038ee:	f003 0310 	and.w	r3, r3, #16
 80038f2:	2b10      	cmp	r3, #16
 80038f4:	d151      	bne.n	800399a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80038f6:	e022      	b.n	800393e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038fe:	d01e      	beq.n	800393e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003900:	f7fe ff00 	bl	8002704 <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	68ba      	ldr	r2, [r7, #8]
 800390c:	429a      	cmp	r2, r3
 800390e:	d302      	bcc.n	8003916 <I2C_IsAcknowledgeFailed+0x3a>
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d113      	bne.n	800393e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800391a:	f043 0220 	orr.w	r2, r3, #32
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2220      	movs	r2, #32
 8003926:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2200      	movs	r2, #0
 800392e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2200      	movs	r2, #0
 8003936:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e02e      	b.n	800399c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	699b      	ldr	r3, [r3, #24]
 8003944:	f003 0320 	and.w	r3, r3, #32
 8003948:	2b20      	cmp	r3, #32
 800394a:	d1d5      	bne.n	80038f8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2210      	movs	r2, #16
 8003952:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	2220      	movs	r2, #32
 800395a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800395c:	68f8      	ldr	r0, [r7, #12]
 800395e:	f7ff fedd 	bl	800371c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	6859      	ldr	r1, [r3, #4]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	4b0d      	ldr	r3, [pc, #52]	; (80039a4 <I2C_IsAcknowledgeFailed+0xc8>)
 800396e:	400b      	ands	r3, r1
 8003970:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003976:	f043 0204 	orr.w	r2, r3, #4
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2220      	movs	r2, #32
 8003982:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2200      	movs	r2, #0
 800398a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2200      	movs	r2, #0
 8003992:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e000      	b.n	800399c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800399a:	2300      	movs	r3, #0
}
 800399c:	4618      	mov	r0, r3
 800399e:	3710      	adds	r7, #16
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	fe00e800 	.word	0xfe00e800

080039a8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b085      	sub	sp, #20
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	607b      	str	r3, [r7, #4]
 80039b2:	460b      	mov	r3, r1
 80039b4:	817b      	strh	r3, [r7, #10]
 80039b6:	4613      	mov	r3, r2
 80039b8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	685a      	ldr	r2, [r3, #4]
 80039c0:	69bb      	ldr	r3, [r7, #24]
 80039c2:	0d5b      	lsrs	r3, r3, #21
 80039c4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80039c8:	4b0d      	ldr	r3, [pc, #52]	; (8003a00 <I2C_TransferConfig+0x58>)
 80039ca:	430b      	orrs	r3, r1
 80039cc:	43db      	mvns	r3, r3
 80039ce:	ea02 0103 	and.w	r1, r2, r3
 80039d2:	897b      	ldrh	r3, [r7, #10]
 80039d4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80039d8:	7a7b      	ldrb	r3, [r7, #9]
 80039da:	041b      	lsls	r3, r3, #16
 80039dc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80039e0:	431a      	orrs	r2, r3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	431a      	orrs	r2, r3
 80039e6:	69bb      	ldr	r3, [r7, #24]
 80039e8:	431a      	orrs	r2, r3
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	430a      	orrs	r2, r1
 80039f0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80039f2:	bf00      	nop
 80039f4:	3714      	adds	r7, #20
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr
 80039fe:	bf00      	nop
 8003a00:	03ff63ff 	.word	0x03ff63ff

08003a04 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	2b20      	cmp	r3, #32
 8003a18:	d138      	bne.n	8003a8c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d101      	bne.n	8003a28 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003a24:	2302      	movs	r3, #2
 8003a26:	e032      	b.n	8003a8e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2224      	movs	r2, #36	; 0x24
 8003a34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f022 0201 	bic.w	r2, r2, #1
 8003a46:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003a56:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	6819      	ldr	r1, [r3, #0]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	683a      	ldr	r2, [r7, #0]
 8003a64:	430a      	orrs	r2, r1
 8003a66:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f042 0201 	orr.w	r2, r2, #1
 8003a76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2220      	movs	r2, #32
 8003a7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	e000      	b.n	8003a8e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003a8c:	2302      	movs	r3, #2
  }
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	370c      	adds	r7, #12
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr

08003a9a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003a9a:	b480      	push	{r7}
 8003a9c:	b085      	sub	sp, #20
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6078      	str	r0, [r7, #4]
 8003aa2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	2b20      	cmp	r3, #32
 8003aae:	d139      	bne.n	8003b24 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d101      	bne.n	8003abe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003aba:	2302      	movs	r3, #2
 8003abc:	e033      	b.n	8003b26 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2224      	movs	r2, #36	; 0x24
 8003aca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f022 0201 	bic.w	r2, r2, #1
 8003adc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003aec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	021b      	lsls	r3, r3, #8
 8003af2:	68fa      	ldr	r2, [r7, #12]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	68fa      	ldr	r2, [r7, #12]
 8003afe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f042 0201 	orr.w	r2, r2, #1
 8003b0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2220      	movs	r2, #32
 8003b14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003b20:	2300      	movs	r3, #0
 8003b22:	e000      	b.n	8003b26 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003b24:	2302      	movs	r3, #2
  }
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3714      	adds	r7, #20
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
	...

08003b34 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003b34:	b480      	push	{r7}
 8003b36:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003b38:	4b04      	ldr	r3, [pc, #16]	; (8003b4c <HAL_PWREx_GetVoltageRange+0x18>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr
 8003b4a:	bf00      	nop
 8003b4c:	40007000 	.word	0x40007000

08003b50 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b085      	sub	sp, #20
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b5e:	d130      	bne.n	8003bc2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b60:	4b23      	ldr	r3, [pc, #140]	; (8003bf0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003b68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b6c:	d038      	beq.n	8003be0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b6e:	4b20      	ldr	r3, [pc, #128]	; (8003bf0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003b76:	4a1e      	ldr	r2, [pc, #120]	; (8003bf0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b78:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b7c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003b7e:	4b1d      	ldr	r3, [pc, #116]	; (8003bf4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	2232      	movs	r2, #50	; 0x32
 8003b84:	fb02 f303 	mul.w	r3, r2, r3
 8003b88:	4a1b      	ldr	r2, [pc, #108]	; (8003bf8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b8e:	0c9b      	lsrs	r3, r3, #18
 8003b90:	3301      	adds	r3, #1
 8003b92:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b94:	e002      	b.n	8003b9c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	3b01      	subs	r3, #1
 8003b9a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b9c:	4b14      	ldr	r3, [pc, #80]	; (8003bf0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b9e:	695b      	ldr	r3, [r3, #20]
 8003ba0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ba4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ba8:	d102      	bne.n	8003bb0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d1f2      	bne.n	8003b96 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003bb0:	4b0f      	ldr	r3, [pc, #60]	; (8003bf0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bb2:	695b      	ldr	r3, [r3, #20]
 8003bb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bbc:	d110      	bne.n	8003be0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e00f      	b.n	8003be2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003bc2:	4b0b      	ldr	r3, [pc, #44]	; (8003bf0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003bca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bce:	d007      	beq.n	8003be0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003bd0:	4b07      	ldr	r3, [pc, #28]	; (8003bf0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003bd8:	4a05      	ldr	r2, [pc, #20]	; (8003bf0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003bde:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003be0:	2300      	movs	r3, #0
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3714      	adds	r7, #20
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr
 8003bee:	bf00      	nop
 8003bf0:	40007000 	.word	0x40007000
 8003bf4:	20000000 	.word	0x20000000
 8003bf8:	431bde83 	.word	0x431bde83

08003bfc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b088      	sub	sp, #32
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d101      	bne.n	8003c0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e3d4      	b.n	80043b8 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c0e:	4ba1      	ldr	r3, [pc, #644]	; (8003e94 <HAL_RCC_OscConfig+0x298>)
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	f003 030c 	and.w	r3, r3, #12
 8003c16:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c18:	4b9e      	ldr	r3, [pc, #632]	; (8003e94 <HAL_RCC_OscConfig+0x298>)
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	f003 0303 	and.w	r3, r3, #3
 8003c20:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0310 	and.w	r3, r3, #16
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	f000 80e4 	beq.w	8003df8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003c30:	69bb      	ldr	r3, [r7, #24]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d007      	beq.n	8003c46 <HAL_RCC_OscConfig+0x4a>
 8003c36:	69bb      	ldr	r3, [r7, #24]
 8003c38:	2b0c      	cmp	r3, #12
 8003c3a:	f040 808b 	bne.w	8003d54 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	f040 8087 	bne.w	8003d54 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003c46:	4b93      	ldr	r3, [pc, #588]	; (8003e94 <HAL_RCC_OscConfig+0x298>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0302 	and.w	r3, r3, #2
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d005      	beq.n	8003c5e <HAL_RCC_OscConfig+0x62>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	699b      	ldr	r3, [r3, #24]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d101      	bne.n	8003c5e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e3ac      	b.n	80043b8 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6a1a      	ldr	r2, [r3, #32]
 8003c62:	4b8c      	ldr	r3, [pc, #560]	; (8003e94 <HAL_RCC_OscConfig+0x298>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0308 	and.w	r3, r3, #8
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d004      	beq.n	8003c78 <HAL_RCC_OscConfig+0x7c>
 8003c6e:	4b89      	ldr	r3, [pc, #548]	; (8003e94 <HAL_RCC_OscConfig+0x298>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c76:	e005      	b.n	8003c84 <HAL_RCC_OscConfig+0x88>
 8003c78:	4b86      	ldr	r3, [pc, #536]	; (8003e94 <HAL_RCC_OscConfig+0x298>)
 8003c7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c7e:	091b      	lsrs	r3, r3, #4
 8003c80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d223      	bcs.n	8003cd0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6a1b      	ldr	r3, [r3, #32]
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f000 fd41 	bl	8004714 <RCC_SetFlashLatencyFromMSIRange>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d001      	beq.n	8003c9c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e38d      	b.n	80043b8 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c9c:	4b7d      	ldr	r3, [pc, #500]	; (8003e94 <HAL_RCC_OscConfig+0x298>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a7c      	ldr	r2, [pc, #496]	; (8003e94 <HAL_RCC_OscConfig+0x298>)
 8003ca2:	f043 0308 	orr.w	r3, r3, #8
 8003ca6:	6013      	str	r3, [r2, #0]
 8003ca8:	4b7a      	ldr	r3, [pc, #488]	; (8003e94 <HAL_RCC_OscConfig+0x298>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6a1b      	ldr	r3, [r3, #32]
 8003cb4:	4977      	ldr	r1, [pc, #476]	; (8003e94 <HAL_RCC_OscConfig+0x298>)
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003cba:	4b76      	ldr	r3, [pc, #472]	; (8003e94 <HAL_RCC_OscConfig+0x298>)
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	69db      	ldr	r3, [r3, #28]
 8003cc6:	021b      	lsls	r3, r3, #8
 8003cc8:	4972      	ldr	r1, [pc, #456]	; (8003e94 <HAL_RCC_OscConfig+0x298>)
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	604b      	str	r3, [r1, #4]
 8003cce:	e025      	b.n	8003d1c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003cd0:	4b70      	ldr	r3, [pc, #448]	; (8003e94 <HAL_RCC_OscConfig+0x298>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a6f      	ldr	r2, [pc, #444]	; (8003e94 <HAL_RCC_OscConfig+0x298>)
 8003cd6:	f043 0308 	orr.w	r3, r3, #8
 8003cda:	6013      	str	r3, [r2, #0]
 8003cdc:	4b6d      	ldr	r3, [pc, #436]	; (8003e94 <HAL_RCC_OscConfig+0x298>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a1b      	ldr	r3, [r3, #32]
 8003ce8:	496a      	ldr	r1, [pc, #424]	; (8003e94 <HAL_RCC_OscConfig+0x298>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003cee:	4b69      	ldr	r3, [pc, #420]	; (8003e94 <HAL_RCC_OscConfig+0x298>)
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	69db      	ldr	r3, [r3, #28]
 8003cfa:	021b      	lsls	r3, r3, #8
 8003cfc:	4965      	ldr	r1, [pc, #404]	; (8003e94 <HAL_RCC_OscConfig+0x298>)
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d02:	69bb      	ldr	r3, [r7, #24]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d109      	bne.n	8003d1c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6a1b      	ldr	r3, [r3, #32]
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f000 fd01 	bl	8004714 <RCC_SetFlashLatencyFromMSIRange>
 8003d12:	4603      	mov	r3, r0
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d001      	beq.n	8003d1c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e34d      	b.n	80043b8 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d1c:	f000 fc36 	bl	800458c <HAL_RCC_GetSysClockFreq>
 8003d20:	4602      	mov	r2, r0
 8003d22:	4b5c      	ldr	r3, [pc, #368]	; (8003e94 <HAL_RCC_OscConfig+0x298>)
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	091b      	lsrs	r3, r3, #4
 8003d28:	f003 030f 	and.w	r3, r3, #15
 8003d2c:	495a      	ldr	r1, [pc, #360]	; (8003e98 <HAL_RCC_OscConfig+0x29c>)
 8003d2e:	5ccb      	ldrb	r3, [r1, r3]
 8003d30:	f003 031f 	and.w	r3, r3, #31
 8003d34:	fa22 f303 	lsr.w	r3, r2, r3
 8003d38:	4a58      	ldr	r2, [pc, #352]	; (8003e9c <HAL_RCC_OscConfig+0x2a0>)
 8003d3a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003d3c:	4b58      	ldr	r3, [pc, #352]	; (8003ea0 <HAL_RCC_OscConfig+0x2a4>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4618      	mov	r0, r3
 8003d42:	f7fe fc8f 	bl	8002664 <HAL_InitTick>
 8003d46:	4603      	mov	r3, r0
 8003d48:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003d4a:	7bfb      	ldrb	r3, [r7, #15]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d052      	beq.n	8003df6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003d50:	7bfb      	ldrb	r3, [r7, #15]
 8003d52:	e331      	b.n	80043b8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	699b      	ldr	r3, [r3, #24]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d032      	beq.n	8003dc2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003d5c:	4b4d      	ldr	r3, [pc, #308]	; (8003e94 <HAL_RCC_OscConfig+0x298>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a4c      	ldr	r2, [pc, #304]	; (8003e94 <HAL_RCC_OscConfig+0x298>)
 8003d62:	f043 0301 	orr.w	r3, r3, #1
 8003d66:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003d68:	f7fe fccc 	bl	8002704 <HAL_GetTick>
 8003d6c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d6e:	e008      	b.n	8003d82 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d70:	f7fe fcc8 	bl	8002704 <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d901      	bls.n	8003d82 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	e31a      	b.n	80043b8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d82:	4b44      	ldr	r3, [pc, #272]	; (8003e94 <HAL_RCC_OscConfig+0x298>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0302 	and.w	r3, r3, #2
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d0f0      	beq.n	8003d70 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d8e:	4b41      	ldr	r3, [pc, #260]	; (8003e94 <HAL_RCC_OscConfig+0x298>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a40      	ldr	r2, [pc, #256]	; (8003e94 <HAL_RCC_OscConfig+0x298>)
 8003d94:	f043 0308 	orr.w	r3, r3, #8
 8003d98:	6013      	str	r3, [r2, #0]
 8003d9a:	4b3e      	ldr	r3, [pc, #248]	; (8003e94 <HAL_RCC_OscConfig+0x298>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6a1b      	ldr	r3, [r3, #32]
 8003da6:	493b      	ldr	r1, [pc, #236]	; (8003e94 <HAL_RCC_OscConfig+0x298>)
 8003da8:	4313      	orrs	r3, r2
 8003daa:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003dac:	4b39      	ldr	r3, [pc, #228]	; (8003e94 <HAL_RCC_OscConfig+0x298>)
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	69db      	ldr	r3, [r3, #28]
 8003db8:	021b      	lsls	r3, r3, #8
 8003dba:	4936      	ldr	r1, [pc, #216]	; (8003e94 <HAL_RCC_OscConfig+0x298>)
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	604b      	str	r3, [r1, #4]
 8003dc0:	e01a      	b.n	8003df8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003dc2:	4b34      	ldr	r3, [pc, #208]	; (8003e94 <HAL_RCC_OscConfig+0x298>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a33      	ldr	r2, [pc, #204]	; (8003e94 <HAL_RCC_OscConfig+0x298>)
 8003dc8:	f023 0301 	bic.w	r3, r3, #1
 8003dcc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003dce:	f7fe fc99 	bl	8002704 <HAL_GetTick>
 8003dd2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003dd4:	e008      	b.n	8003de8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003dd6:	f7fe fc95 	bl	8002704 <HAL_GetTick>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	2b02      	cmp	r3, #2
 8003de2:	d901      	bls.n	8003de8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003de4:	2303      	movs	r3, #3
 8003de6:	e2e7      	b.n	80043b8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003de8:	4b2a      	ldr	r3, [pc, #168]	; (8003e94 <HAL_RCC_OscConfig+0x298>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0302 	and.w	r3, r3, #2
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d1f0      	bne.n	8003dd6 <HAL_RCC_OscConfig+0x1da>
 8003df4:	e000      	b.n	8003df8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003df6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 0301 	and.w	r3, r3, #1
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d074      	beq.n	8003eee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	2b08      	cmp	r3, #8
 8003e08:	d005      	beq.n	8003e16 <HAL_RCC_OscConfig+0x21a>
 8003e0a:	69bb      	ldr	r3, [r7, #24]
 8003e0c:	2b0c      	cmp	r3, #12
 8003e0e:	d10e      	bne.n	8003e2e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	2b03      	cmp	r3, #3
 8003e14:	d10b      	bne.n	8003e2e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e16:	4b1f      	ldr	r3, [pc, #124]	; (8003e94 <HAL_RCC_OscConfig+0x298>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d064      	beq.n	8003eec <HAL_RCC_OscConfig+0x2f0>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d160      	bne.n	8003eec <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e2c4      	b.n	80043b8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e36:	d106      	bne.n	8003e46 <HAL_RCC_OscConfig+0x24a>
 8003e38:	4b16      	ldr	r3, [pc, #88]	; (8003e94 <HAL_RCC_OscConfig+0x298>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a15      	ldr	r2, [pc, #84]	; (8003e94 <HAL_RCC_OscConfig+0x298>)
 8003e3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e42:	6013      	str	r3, [r2, #0]
 8003e44:	e01d      	b.n	8003e82 <HAL_RCC_OscConfig+0x286>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e4e:	d10c      	bne.n	8003e6a <HAL_RCC_OscConfig+0x26e>
 8003e50:	4b10      	ldr	r3, [pc, #64]	; (8003e94 <HAL_RCC_OscConfig+0x298>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a0f      	ldr	r2, [pc, #60]	; (8003e94 <HAL_RCC_OscConfig+0x298>)
 8003e56:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e5a:	6013      	str	r3, [r2, #0]
 8003e5c:	4b0d      	ldr	r3, [pc, #52]	; (8003e94 <HAL_RCC_OscConfig+0x298>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a0c      	ldr	r2, [pc, #48]	; (8003e94 <HAL_RCC_OscConfig+0x298>)
 8003e62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e66:	6013      	str	r3, [r2, #0]
 8003e68:	e00b      	b.n	8003e82 <HAL_RCC_OscConfig+0x286>
 8003e6a:	4b0a      	ldr	r3, [pc, #40]	; (8003e94 <HAL_RCC_OscConfig+0x298>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a09      	ldr	r2, [pc, #36]	; (8003e94 <HAL_RCC_OscConfig+0x298>)
 8003e70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e74:	6013      	str	r3, [r2, #0]
 8003e76:	4b07      	ldr	r3, [pc, #28]	; (8003e94 <HAL_RCC_OscConfig+0x298>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a06      	ldr	r2, [pc, #24]	; (8003e94 <HAL_RCC_OscConfig+0x298>)
 8003e7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e80:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d01c      	beq.n	8003ec4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e8a:	f7fe fc3b 	bl	8002704 <HAL_GetTick>
 8003e8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e90:	e011      	b.n	8003eb6 <HAL_RCC_OscConfig+0x2ba>
 8003e92:	bf00      	nop
 8003e94:	40021000 	.word	0x40021000
 8003e98:	08007254 	.word	0x08007254
 8003e9c:	20000000 	.word	0x20000000
 8003ea0:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ea4:	f7fe fc2e 	bl	8002704 <HAL_GetTick>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	2b64      	cmp	r3, #100	; 0x64
 8003eb0:	d901      	bls.n	8003eb6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	e280      	b.n	80043b8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003eb6:	4baf      	ldr	r3, [pc, #700]	; (8004174 <HAL_RCC_OscConfig+0x578>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d0f0      	beq.n	8003ea4 <HAL_RCC_OscConfig+0x2a8>
 8003ec2:	e014      	b.n	8003eee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ec4:	f7fe fc1e 	bl	8002704 <HAL_GetTick>
 8003ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003eca:	e008      	b.n	8003ede <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ecc:	f7fe fc1a 	bl	8002704 <HAL_GetTick>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	2b64      	cmp	r3, #100	; 0x64
 8003ed8:	d901      	bls.n	8003ede <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e26c      	b.n	80043b8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ede:	4ba5      	ldr	r3, [pc, #660]	; (8004174 <HAL_RCC_OscConfig+0x578>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d1f0      	bne.n	8003ecc <HAL_RCC_OscConfig+0x2d0>
 8003eea:	e000      	b.n	8003eee <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003eec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0302 	and.w	r3, r3, #2
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d060      	beq.n	8003fbc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003efa:	69bb      	ldr	r3, [r7, #24]
 8003efc:	2b04      	cmp	r3, #4
 8003efe:	d005      	beq.n	8003f0c <HAL_RCC_OscConfig+0x310>
 8003f00:	69bb      	ldr	r3, [r7, #24]
 8003f02:	2b0c      	cmp	r3, #12
 8003f04:	d119      	bne.n	8003f3a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	2b02      	cmp	r3, #2
 8003f0a:	d116      	bne.n	8003f3a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f0c:	4b99      	ldr	r3, [pc, #612]	; (8004174 <HAL_RCC_OscConfig+0x578>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d005      	beq.n	8003f24 <HAL_RCC_OscConfig+0x328>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d101      	bne.n	8003f24 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e249      	b.n	80043b8 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f24:	4b93      	ldr	r3, [pc, #588]	; (8004174 <HAL_RCC_OscConfig+0x578>)
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	691b      	ldr	r3, [r3, #16]
 8003f30:	061b      	lsls	r3, r3, #24
 8003f32:	4990      	ldr	r1, [pc, #576]	; (8004174 <HAL_RCC_OscConfig+0x578>)
 8003f34:	4313      	orrs	r3, r2
 8003f36:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f38:	e040      	b.n	8003fbc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d023      	beq.n	8003f8a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f42:	4b8c      	ldr	r3, [pc, #560]	; (8004174 <HAL_RCC_OscConfig+0x578>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a8b      	ldr	r2, [pc, #556]	; (8004174 <HAL_RCC_OscConfig+0x578>)
 8003f48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f4e:	f7fe fbd9 	bl	8002704 <HAL_GetTick>
 8003f52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f54:	e008      	b.n	8003f68 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f56:	f7fe fbd5 	bl	8002704 <HAL_GetTick>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	d901      	bls.n	8003f68 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003f64:	2303      	movs	r3, #3
 8003f66:	e227      	b.n	80043b8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f68:	4b82      	ldr	r3, [pc, #520]	; (8004174 <HAL_RCC_OscConfig+0x578>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d0f0      	beq.n	8003f56 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f74:	4b7f      	ldr	r3, [pc, #508]	; (8004174 <HAL_RCC_OscConfig+0x578>)
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	691b      	ldr	r3, [r3, #16]
 8003f80:	061b      	lsls	r3, r3, #24
 8003f82:	497c      	ldr	r1, [pc, #496]	; (8004174 <HAL_RCC_OscConfig+0x578>)
 8003f84:	4313      	orrs	r3, r2
 8003f86:	604b      	str	r3, [r1, #4]
 8003f88:	e018      	b.n	8003fbc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f8a:	4b7a      	ldr	r3, [pc, #488]	; (8004174 <HAL_RCC_OscConfig+0x578>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a79      	ldr	r2, [pc, #484]	; (8004174 <HAL_RCC_OscConfig+0x578>)
 8003f90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f96:	f7fe fbb5 	bl	8002704 <HAL_GetTick>
 8003f9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f9c:	e008      	b.n	8003fb0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f9e:	f7fe fbb1 	bl	8002704 <HAL_GetTick>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	2b02      	cmp	r3, #2
 8003faa:	d901      	bls.n	8003fb0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003fac:	2303      	movs	r3, #3
 8003fae:	e203      	b.n	80043b8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003fb0:	4b70      	ldr	r3, [pc, #448]	; (8004174 <HAL_RCC_OscConfig+0x578>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d1f0      	bne.n	8003f9e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0308 	and.w	r3, r3, #8
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d03c      	beq.n	8004042 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	695b      	ldr	r3, [r3, #20]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d01c      	beq.n	800400a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fd0:	4b68      	ldr	r3, [pc, #416]	; (8004174 <HAL_RCC_OscConfig+0x578>)
 8003fd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fd6:	4a67      	ldr	r2, [pc, #412]	; (8004174 <HAL_RCC_OscConfig+0x578>)
 8003fd8:	f043 0301 	orr.w	r3, r3, #1
 8003fdc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fe0:	f7fe fb90 	bl	8002704 <HAL_GetTick>
 8003fe4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003fe6:	e008      	b.n	8003ffa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fe8:	f7fe fb8c 	bl	8002704 <HAL_GetTick>
 8003fec:	4602      	mov	r2, r0
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	2b02      	cmp	r3, #2
 8003ff4:	d901      	bls.n	8003ffa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e1de      	b.n	80043b8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ffa:	4b5e      	ldr	r3, [pc, #376]	; (8004174 <HAL_RCC_OscConfig+0x578>)
 8003ffc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004000:	f003 0302 	and.w	r3, r3, #2
 8004004:	2b00      	cmp	r3, #0
 8004006:	d0ef      	beq.n	8003fe8 <HAL_RCC_OscConfig+0x3ec>
 8004008:	e01b      	b.n	8004042 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800400a:	4b5a      	ldr	r3, [pc, #360]	; (8004174 <HAL_RCC_OscConfig+0x578>)
 800400c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004010:	4a58      	ldr	r2, [pc, #352]	; (8004174 <HAL_RCC_OscConfig+0x578>)
 8004012:	f023 0301 	bic.w	r3, r3, #1
 8004016:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800401a:	f7fe fb73 	bl	8002704 <HAL_GetTick>
 800401e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004020:	e008      	b.n	8004034 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004022:	f7fe fb6f 	bl	8002704 <HAL_GetTick>
 8004026:	4602      	mov	r2, r0
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	1ad3      	subs	r3, r2, r3
 800402c:	2b02      	cmp	r3, #2
 800402e:	d901      	bls.n	8004034 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004030:	2303      	movs	r3, #3
 8004032:	e1c1      	b.n	80043b8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004034:	4b4f      	ldr	r3, [pc, #316]	; (8004174 <HAL_RCC_OscConfig+0x578>)
 8004036:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800403a:	f003 0302 	and.w	r3, r3, #2
 800403e:	2b00      	cmp	r3, #0
 8004040:	d1ef      	bne.n	8004022 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 0304 	and.w	r3, r3, #4
 800404a:	2b00      	cmp	r3, #0
 800404c:	f000 80a6 	beq.w	800419c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004050:	2300      	movs	r3, #0
 8004052:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004054:	4b47      	ldr	r3, [pc, #284]	; (8004174 <HAL_RCC_OscConfig+0x578>)
 8004056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004058:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800405c:	2b00      	cmp	r3, #0
 800405e:	d10d      	bne.n	800407c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004060:	4b44      	ldr	r3, [pc, #272]	; (8004174 <HAL_RCC_OscConfig+0x578>)
 8004062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004064:	4a43      	ldr	r2, [pc, #268]	; (8004174 <HAL_RCC_OscConfig+0x578>)
 8004066:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800406a:	6593      	str	r3, [r2, #88]	; 0x58
 800406c:	4b41      	ldr	r3, [pc, #260]	; (8004174 <HAL_RCC_OscConfig+0x578>)
 800406e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004070:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004074:	60bb      	str	r3, [r7, #8]
 8004076:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004078:	2301      	movs	r3, #1
 800407a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800407c:	4b3e      	ldr	r3, [pc, #248]	; (8004178 <HAL_RCC_OscConfig+0x57c>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004084:	2b00      	cmp	r3, #0
 8004086:	d118      	bne.n	80040ba <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004088:	4b3b      	ldr	r3, [pc, #236]	; (8004178 <HAL_RCC_OscConfig+0x57c>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a3a      	ldr	r2, [pc, #232]	; (8004178 <HAL_RCC_OscConfig+0x57c>)
 800408e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004092:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004094:	f7fe fb36 	bl	8002704 <HAL_GetTick>
 8004098:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800409a:	e008      	b.n	80040ae <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800409c:	f7fe fb32 	bl	8002704 <HAL_GetTick>
 80040a0:	4602      	mov	r2, r0
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	2b02      	cmp	r3, #2
 80040a8:	d901      	bls.n	80040ae <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80040aa:	2303      	movs	r3, #3
 80040ac:	e184      	b.n	80043b8 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040ae:	4b32      	ldr	r3, [pc, #200]	; (8004178 <HAL_RCC_OscConfig+0x57c>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d0f0      	beq.n	800409c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d108      	bne.n	80040d4 <HAL_RCC_OscConfig+0x4d8>
 80040c2:	4b2c      	ldr	r3, [pc, #176]	; (8004174 <HAL_RCC_OscConfig+0x578>)
 80040c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040c8:	4a2a      	ldr	r2, [pc, #168]	; (8004174 <HAL_RCC_OscConfig+0x578>)
 80040ca:	f043 0301 	orr.w	r3, r3, #1
 80040ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80040d2:	e024      	b.n	800411e <HAL_RCC_OscConfig+0x522>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	2b05      	cmp	r3, #5
 80040da:	d110      	bne.n	80040fe <HAL_RCC_OscConfig+0x502>
 80040dc:	4b25      	ldr	r3, [pc, #148]	; (8004174 <HAL_RCC_OscConfig+0x578>)
 80040de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040e2:	4a24      	ldr	r2, [pc, #144]	; (8004174 <HAL_RCC_OscConfig+0x578>)
 80040e4:	f043 0304 	orr.w	r3, r3, #4
 80040e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80040ec:	4b21      	ldr	r3, [pc, #132]	; (8004174 <HAL_RCC_OscConfig+0x578>)
 80040ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040f2:	4a20      	ldr	r2, [pc, #128]	; (8004174 <HAL_RCC_OscConfig+0x578>)
 80040f4:	f043 0301 	orr.w	r3, r3, #1
 80040f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80040fc:	e00f      	b.n	800411e <HAL_RCC_OscConfig+0x522>
 80040fe:	4b1d      	ldr	r3, [pc, #116]	; (8004174 <HAL_RCC_OscConfig+0x578>)
 8004100:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004104:	4a1b      	ldr	r2, [pc, #108]	; (8004174 <HAL_RCC_OscConfig+0x578>)
 8004106:	f023 0301 	bic.w	r3, r3, #1
 800410a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800410e:	4b19      	ldr	r3, [pc, #100]	; (8004174 <HAL_RCC_OscConfig+0x578>)
 8004110:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004114:	4a17      	ldr	r2, [pc, #92]	; (8004174 <HAL_RCC_OscConfig+0x578>)
 8004116:	f023 0304 	bic.w	r3, r3, #4
 800411a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d016      	beq.n	8004154 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004126:	f7fe faed 	bl	8002704 <HAL_GetTick>
 800412a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800412c:	e00a      	b.n	8004144 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800412e:	f7fe fae9 	bl	8002704 <HAL_GetTick>
 8004132:	4602      	mov	r2, r0
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	1ad3      	subs	r3, r2, r3
 8004138:	f241 3288 	movw	r2, #5000	; 0x1388
 800413c:	4293      	cmp	r3, r2
 800413e:	d901      	bls.n	8004144 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004140:	2303      	movs	r3, #3
 8004142:	e139      	b.n	80043b8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004144:	4b0b      	ldr	r3, [pc, #44]	; (8004174 <HAL_RCC_OscConfig+0x578>)
 8004146:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800414a:	f003 0302 	and.w	r3, r3, #2
 800414e:	2b00      	cmp	r3, #0
 8004150:	d0ed      	beq.n	800412e <HAL_RCC_OscConfig+0x532>
 8004152:	e01a      	b.n	800418a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004154:	f7fe fad6 	bl	8002704 <HAL_GetTick>
 8004158:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800415a:	e00f      	b.n	800417c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800415c:	f7fe fad2 	bl	8002704 <HAL_GetTick>
 8004160:	4602      	mov	r2, r0
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	f241 3288 	movw	r2, #5000	; 0x1388
 800416a:	4293      	cmp	r3, r2
 800416c:	d906      	bls.n	800417c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e122      	b.n	80043b8 <HAL_RCC_OscConfig+0x7bc>
 8004172:	bf00      	nop
 8004174:	40021000 	.word	0x40021000
 8004178:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800417c:	4b90      	ldr	r3, [pc, #576]	; (80043c0 <HAL_RCC_OscConfig+0x7c4>)
 800417e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004182:	f003 0302 	and.w	r3, r3, #2
 8004186:	2b00      	cmp	r3, #0
 8004188:	d1e8      	bne.n	800415c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800418a:	7ffb      	ldrb	r3, [r7, #31]
 800418c:	2b01      	cmp	r3, #1
 800418e:	d105      	bne.n	800419c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004190:	4b8b      	ldr	r3, [pc, #556]	; (80043c0 <HAL_RCC_OscConfig+0x7c4>)
 8004192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004194:	4a8a      	ldr	r2, [pc, #552]	; (80043c0 <HAL_RCC_OscConfig+0x7c4>)
 8004196:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800419a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	f000 8108 	beq.w	80043b6 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	f040 80d0 	bne.w	8004350 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80041b0:	4b83      	ldr	r3, [pc, #524]	; (80043c0 <HAL_RCC_OscConfig+0x7c4>)
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	f003 0203 	and.w	r2, r3, #3
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d130      	bne.n	8004226 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ce:	3b01      	subs	r3, #1
 80041d0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d127      	bne.n	8004226 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041e0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d11f      	bne.n	8004226 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80041f0:	2a07      	cmp	r2, #7
 80041f2:	bf14      	ite	ne
 80041f4:	2201      	movne	r2, #1
 80041f6:	2200      	moveq	r2, #0
 80041f8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d113      	bne.n	8004226 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004208:	085b      	lsrs	r3, r3, #1
 800420a:	3b01      	subs	r3, #1
 800420c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800420e:	429a      	cmp	r2, r3
 8004210:	d109      	bne.n	8004226 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421c:	085b      	lsrs	r3, r3, #1
 800421e:	3b01      	subs	r3, #1
 8004220:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004222:	429a      	cmp	r2, r3
 8004224:	d06e      	beq.n	8004304 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004226:	69bb      	ldr	r3, [r7, #24]
 8004228:	2b0c      	cmp	r3, #12
 800422a:	d069      	beq.n	8004300 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800422c:	4b64      	ldr	r3, [pc, #400]	; (80043c0 <HAL_RCC_OscConfig+0x7c4>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004234:	2b00      	cmp	r3, #0
 8004236:	d105      	bne.n	8004244 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004238:	4b61      	ldr	r3, [pc, #388]	; (80043c0 <HAL_RCC_OscConfig+0x7c4>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004240:	2b00      	cmp	r3, #0
 8004242:	d001      	beq.n	8004248 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	e0b7      	b.n	80043b8 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004248:	4b5d      	ldr	r3, [pc, #372]	; (80043c0 <HAL_RCC_OscConfig+0x7c4>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a5c      	ldr	r2, [pc, #368]	; (80043c0 <HAL_RCC_OscConfig+0x7c4>)
 800424e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004252:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004254:	f7fe fa56 	bl	8002704 <HAL_GetTick>
 8004258:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800425a:	e008      	b.n	800426e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800425c:	f7fe fa52 	bl	8002704 <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	2b02      	cmp	r3, #2
 8004268:	d901      	bls.n	800426e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	e0a4      	b.n	80043b8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800426e:	4b54      	ldr	r3, [pc, #336]	; (80043c0 <HAL_RCC_OscConfig+0x7c4>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004276:	2b00      	cmp	r3, #0
 8004278:	d1f0      	bne.n	800425c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800427a:	4b51      	ldr	r3, [pc, #324]	; (80043c0 <HAL_RCC_OscConfig+0x7c4>)
 800427c:	68da      	ldr	r2, [r3, #12]
 800427e:	4b51      	ldr	r3, [pc, #324]	; (80043c4 <HAL_RCC_OscConfig+0x7c8>)
 8004280:	4013      	ands	r3, r2
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800428a:	3a01      	subs	r2, #1
 800428c:	0112      	lsls	r2, r2, #4
 800428e:	4311      	orrs	r1, r2
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004294:	0212      	lsls	r2, r2, #8
 8004296:	4311      	orrs	r1, r2
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800429c:	0852      	lsrs	r2, r2, #1
 800429e:	3a01      	subs	r2, #1
 80042a0:	0552      	lsls	r2, r2, #21
 80042a2:	4311      	orrs	r1, r2
 80042a4:	687a      	ldr	r2, [r7, #4]
 80042a6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80042a8:	0852      	lsrs	r2, r2, #1
 80042aa:	3a01      	subs	r2, #1
 80042ac:	0652      	lsls	r2, r2, #25
 80042ae:	4311      	orrs	r1, r2
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80042b4:	0912      	lsrs	r2, r2, #4
 80042b6:	0452      	lsls	r2, r2, #17
 80042b8:	430a      	orrs	r2, r1
 80042ba:	4941      	ldr	r1, [pc, #260]	; (80043c0 <HAL_RCC_OscConfig+0x7c4>)
 80042bc:	4313      	orrs	r3, r2
 80042be:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80042c0:	4b3f      	ldr	r3, [pc, #252]	; (80043c0 <HAL_RCC_OscConfig+0x7c4>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a3e      	ldr	r2, [pc, #248]	; (80043c0 <HAL_RCC_OscConfig+0x7c4>)
 80042c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042ca:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80042cc:	4b3c      	ldr	r3, [pc, #240]	; (80043c0 <HAL_RCC_OscConfig+0x7c4>)
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	4a3b      	ldr	r2, [pc, #236]	; (80043c0 <HAL_RCC_OscConfig+0x7c4>)
 80042d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042d6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80042d8:	f7fe fa14 	bl	8002704 <HAL_GetTick>
 80042dc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042de:	e008      	b.n	80042f2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042e0:	f7fe fa10 	bl	8002704 <HAL_GetTick>
 80042e4:	4602      	mov	r2, r0
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	1ad3      	subs	r3, r2, r3
 80042ea:	2b02      	cmp	r3, #2
 80042ec:	d901      	bls.n	80042f2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80042ee:	2303      	movs	r3, #3
 80042f0:	e062      	b.n	80043b8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042f2:	4b33      	ldr	r3, [pc, #204]	; (80043c0 <HAL_RCC_OscConfig+0x7c4>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d0f0      	beq.n	80042e0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80042fe:	e05a      	b.n	80043b6 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	e059      	b.n	80043b8 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004304:	4b2e      	ldr	r3, [pc, #184]	; (80043c0 <HAL_RCC_OscConfig+0x7c4>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800430c:	2b00      	cmp	r3, #0
 800430e:	d152      	bne.n	80043b6 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004310:	4b2b      	ldr	r3, [pc, #172]	; (80043c0 <HAL_RCC_OscConfig+0x7c4>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a2a      	ldr	r2, [pc, #168]	; (80043c0 <HAL_RCC_OscConfig+0x7c4>)
 8004316:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800431a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800431c:	4b28      	ldr	r3, [pc, #160]	; (80043c0 <HAL_RCC_OscConfig+0x7c4>)
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	4a27      	ldr	r2, [pc, #156]	; (80043c0 <HAL_RCC_OscConfig+0x7c4>)
 8004322:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004326:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004328:	f7fe f9ec 	bl	8002704 <HAL_GetTick>
 800432c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800432e:	e008      	b.n	8004342 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004330:	f7fe f9e8 	bl	8002704 <HAL_GetTick>
 8004334:	4602      	mov	r2, r0
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	2b02      	cmp	r3, #2
 800433c:	d901      	bls.n	8004342 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	e03a      	b.n	80043b8 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004342:	4b1f      	ldr	r3, [pc, #124]	; (80043c0 <HAL_RCC_OscConfig+0x7c4>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800434a:	2b00      	cmp	r3, #0
 800434c:	d0f0      	beq.n	8004330 <HAL_RCC_OscConfig+0x734>
 800434e:	e032      	b.n	80043b6 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004350:	69bb      	ldr	r3, [r7, #24]
 8004352:	2b0c      	cmp	r3, #12
 8004354:	d02d      	beq.n	80043b2 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004356:	4b1a      	ldr	r3, [pc, #104]	; (80043c0 <HAL_RCC_OscConfig+0x7c4>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a19      	ldr	r2, [pc, #100]	; (80043c0 <HAL_RCC_OscConfig+0x7c4>)
 800435c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004360:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004362:	4b17      	ldr	r3, [pc, #92]	; (80043c0 <HAL_RCC_OscConfig+0x7c4>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800436a:	2b00      	cmp	r3, #0
 800436c:	d105      	bne.n	800437a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800436e:	4b14      	ldr	r3, [pc, #80]	; (80043c0 <HAL_RCC_OscConfig+0x7c4>)
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	4a13      	ldr	r2, [pc, #76]	; (80043c0 <HAL_RCC_OscConfig+0x7c4>)
 8004374:	f023 0303 	bic.w	r3, r3, #3
 8004378:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800437a:	4b11      	ldr	r3, [pc, #68]	; (80043c0 <HAL_RCC_OscConfig+0x7c4>)
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	4a10      	ldr	r2, [pc, #64]	; (80043c0 <HAL_RCC_OscConfig+0x7c4>)
 8004380:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004384:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004388:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800438a:	f7fe f9bb 	bl	8002704 <HAL_GetTick>
 800438e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004390:	e008      	b.n	80043a4 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004392:	f7fe f9b7 	bl	8002704 <HAL_GetTick>
 8004396:	4602      	mov	r2, r0
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	1ad3      	subs	r3, r2, r3
 800439c:	2b02      	cmp	r3, #2
 800439e:	d901      	bls.n	80043a4 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80043a0:	2303      	movs	r3, #3
 80043a2:	e009      	b.n	80043b8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043a4:	4b06      	ldr	r3, [pc, #24]	; (80043c0 <HAL_RCC_OscConfig+0x7c4>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d1f0      	bne.n	8004392 <HAL_RCC_OscConfig+0x796>
 80043b0:	e001      	b.n	80043b6 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e000      	b.n	80043b8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80043b6:	2300      	movs	r3, #0
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3720      	adds	r7, #32
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}
 80043c0:	40021000 	.word	0x40021000
 80043c4:	f99d808c 	.word	0xf99d808c

080043c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b084      	sub	sp, #16
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d101      	bne.n	80043dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	e0c8      	b.n	800456e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80043dc:	4b66      	ldr	r3, [pc, #408]	; (8004578 <HAL_RCC_ClockConfig+0x1b0>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 0307 	and.w	r3, r3, #7
 80043e4:	683a      	ldr	r2, [r7, #0]
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d910      	bls.n	800440c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043ea:	4b63      	ldr	r3, [pc, #396]	; (8004578 <HAL_RCC_ClockConfig+0x1b0>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f023 0207 	bic.w	r2, r3, #7
 80043f2:	4961      	ldr	r1, [pc, #388]	; (8004578 <HAL_RCC_ClockConfig+0x1b0>)
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043fa:	4b5f      	ldr	r3, [pc, #380]	; (8004578 <HAL_RCC_ClockConfig+0x1b0>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 0307 	and.w	r3, r3, #7
 8004402:	683a      	ldr	r2, [r7, #0]
 8004404:	429a      	cmp	r2, r3
 8004406:	d001      	beq.n	800440c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e0b0      	b.n	800456e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0301 	and.w	r3, r3, #1
 8004414:	2b00      	cmp	r3, #0
 8004416:	d04c      	beq.n	80044b2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	2b03      	cmp	r3, #3
 800441e:	d107      	bne.n	8004430 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004420:	4b56      	ldr	r3, [pc, #344]	; (800457c <HAL_RCC_ClockConfig+0x1b4>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004428:	2b00      	cmp	r3, #0
 800442a:	d121      	bne.n	8004470 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	e09e      	b.n	800456e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	2b02      	cmp	r3, #2
 8004436:	d107      	bne.n	8004448 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004438:	4b50      	ldr	r3, [pc, #320]	; (800457c <HAL_RCC_ClockConfig+0x1b4>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004440:	2b00      	cmp	r3, #0
 8004442:	d115      	bne.n	8004470 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	e092      	b.n	800456e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d107      	bne.n	8004460 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004450:	4b4a      	ldr	r3, [pc, #296]	; (800457c <HAL_RCC_ClockConfig+0x1b4>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 0302 	and.w	r3, r3, #2
 8004458:	2b00      	cmp	r3, #0
 800445a:	d109      	bne.n	8004470 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	e086      	b.n	800456e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004460:	4b46      	ldr	r3, [pc, #280]	; (800457c <HAL_RCC_ClockConfig+0x1b4>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004468:	2b00      	cmp	r3, #0
 800446a:	d101      	bne.n	8004470 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	e07e      	b.n	800456e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004470:	4b42      	ldr	r3, [pc, #264]	; (800457c <HAL_RCC_ClockConfig+0x1b4>)
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	f023 0203 	bic.w	r2, r3, #3
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	493f      	ldr	r1, [pc, #252]	; (800457c <HAL_RCC_ClockConfig+0x1b4>)
 800447e:	4313      	orrs	r3, r2
 8004480:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004482:	f7fe f93f 	bl	8002704 <HAL_GetTick>
 8004486:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004488:	e00a      	b.n	80044a0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800448a:	f7fe f93b 	bl	8002704 <HAL_GetTick>
 800448e:	4602      	mov	r2, r0
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	1ad3      	subs	r3, r2, r3
 8004494:	f241 3288 	movw	r2, #5000	; 0x1388
 8004498:	4293      	cmp	r3, r2
 800449a:	d901      	bls.n	80044a0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800449c:	2303      	movs	r3, #3
 800449e:	e066      	b.n	800456e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044a0:	4b36      	ldr	r3, [pc, #216]	; (800457c <HAL_RCC_ClockConfig+0x1b4>)
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	f003 020c 	and.w	r2, r3, #12
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	009b      	lsls	r3, r3, #2
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d1eb      	bne.n	800448a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 0302 	and.w	r3, r3, #2
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d008      	beq.n	80044d0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044be:	4b2f      	ldr	r3, [pc, #188]	; (800457c <HAL_RCC_ClockConfig+0x1b4>)
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	492c      	ldr	r1, [pc, #176]	; (800457c <HAL_RCC_ClockConfig+0x1b4>)
 80044cc:	4313      	orrs	r3, r2
 80044ce:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80044d0:	4b29      	ldr	r3, [pc, #164]	; (8004578 <HAL_RCC_ClockConfig+0x1b0>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 0307 	and.w	r3, r3, #7
 80044d8:	683a      	ldr	r2, [r7, #0]
 80044da:	429a      	cmp	r2, r3
 80044dc:	d210      	bcs.n	8004500 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044de:	4b26      	ldr	r3, [pc, #152]	; (8004578 <HAL_RCC_ClockConfig+0x1b0>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f023 0207 	bic.w	r2, r3, #7
 80044e6:	4924      	ldr	r1, [pc, #144]	; (8004578 <HAL_RCC_ClockConfig+0x1b0>)
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044ee:	4b22      	ldr	r3, [pc, #136]	; (8004578 <HAL_RCC_ClockConfig+0x1b0>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 0307 	and.w	r3, r3, #7
 80044f6:	683a      	ldr	r2, [r7, #0]
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d001      	beq.n	8004500 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e036      	b.n	800456e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0304 	and.w	r3, r3, #4
 8004508:	2b00      	cmp	r3, #0
 800450a:	d008      	beq.n	800451e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800450c:	4b1b      	ldr	r3, [pc, #108]	; (800457c <HAL_RCC_ClockConfig+0x1b4>)
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	4918      	ldr	r1, [pc, #96]	; (800457c <HAL_RCC_ClockConfig+0x1b4>)
 800451a:	4313      	orrs	r3, r2
 800451c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 0308 	and.w	r3, r3, #8
 8004526:	2b00      	cmp	r3, #0
 8004528:	d009      	beq.n	800453e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800452a:	4b14      	ldr	r3, [pc, #80]	; (800457c <HAL_RCC_ClockConfig+0x1b4>)
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	691b      	ldr	r3, [r3, #16]
 8004536:	00db      	lsls	r3, r3, #3
 8004538:	4910      	ldr	r1, [pc, #64]	; (800457c <HAL_RCC_ClockConfig+0x1b4>)
 800453a:	4313      	orrs	r3, r2
 800453c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800453e:	f000 f825 	bl	800458c <HAL_RCC_GetSysClockFreq>
 8004542:	4602      	mov	r2, r0
 8004544:	4b0d      	ldr	r3, [pc, #52]	; (800457c <HAL_RCC_ClockConfig+0x1b4>)
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	091b      	lsrs	r3, r3, #4
 800454a:	f003 030f 	and.w	r3, r3, #15
 800454e:	490c      	ldr	r1, [pc, #48]	; (8004580 <HAL_RCC_ClockConfig+0x1b8>)
 8004550:	5ccb      	ldrb	r3, [r1, r3]
 8004552:	f003 031f 	and.w	r3, r3, #31
 8004556:	fa22 f303 	lsr.w	r3, r2, r3
 800455a:	4a0a      	ldr	r2, [pc, #40]	; (8004584 <HAL_RCC_ClockConfig+0x1bc>)
 800455c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800455e:	4b0a      	ldr	r3, [pc, #40]	; (8004588 <HAL_RCC_ClockConfig+0x1c0>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4618      	mov	r0, r3
 8004564:	f7fe f87e 	bl	8002664 <HAL_InitTick>
 8004568:	4603      	mov	r3, r0
 800456a:	72fb      	strb	r3, [r7, #11]

  return status;
 800456c:	7afb      	ldrb	r3, [r7, #11]
}
 800456e:	4618      	mov	r0, r3
 8004570:	3710      	adds	r7, #16
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
 8004576:	bf00      	nop
 8004578:	40022000 	.word	0x40022000
 800457c:	40021000 	.word	0x40021000
 8004580:	08007254 	.word	0x08007254
 8004584:	20000000 	.word	0x20000000
 8004588:	20000004 	.word	0x20000004

0800458c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800458c:	b480      	push	{r7}
 800458e:	b089      	sub	sp, #36	; 0x24
 8004590:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004592:	2300      	movs	r3, #0
 8004594:	61fb      	str	r3, [r7, #28]
 8004596:	2300      	movs	r3, #0
 8004598:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800459a:	4b3e      	ldr	r3, [pc, #248]	; (8004694 <HAL_RCC_GetSysClockFreq+0x108>)
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	f003 030c 	and.w	r3, r3, #12
 80045a2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80045a4:	4b3b      	ldr	r3, [pc, #236]	; (8004694 <HAL_RCC_GetSysClockFreq+0x108>)
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	f003 0303 	and.w	r3, r3, #3
 80045ac:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d005      	beq.n	80045c0 <HAL_RCC_GetSysClockFreq+0x34>
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	2b0c      	cmp	r3, #12
 80045b8:	d121      	bne.n	80045fe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d11e      	bne.n	80045fe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80045c0:	4b34      	ldr	r3, [pc, #208]	; (8004694 <HAL_RCC_GetSysClockFreq+0x108>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 0308 	and.w	r3, r3, #8
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d107      	bne.n	80045dc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80045cc:	4b31      	ldr	r3, [pc, #196]	; (8004694 <HAL_RCC_GetSysClockFreq+0x108>)
 80045ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045d2:	0a1b      	lsrs	r3, r3, #8
 80045d4:	f003 030f 	and.w	r3, r3, #15
 80045d8:	61fb      	str	r3, [r7, #28]
 80045da:	e005      	b.n	80045e8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80045dc:	4b2d      	ldr	r3, [pc, #180]	; (8004694 <HAL_RCC_GetSysClockFreq+0x108>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	091b      	lsrs	r3, r3, #4
 80045e2:	f003 030f 	and.w	r3, r3, #15
 80045e6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80045e8:	4a2b      	ldr	r2, [pc, #172]	; (8004698 <HAL_RCC_GetSysClockFreq+0x10c>)
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045f0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d10d      	bne.n	8004614 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80045f8:	69fb      	ldr	r3, [r7, #28]
 80045fa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80045fc:	e00a      	b.n	8004614 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	2b04      	cmp	r3, #4
 8004602:	d102      	bne.n	800460a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004604:	4b25      	ldr	r3, [pc, #148]	; (800469c <HAL_RCC_GetSysClockFreq+0x110>)
 8004606:	61bb      	str	r3, [r7, #24]
 8004608:	e004      	b.n	8004614 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	2b08      	cmp	r3, #8
 800460e:	d101      	bne.n	8004614 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004610:	4b23      	ldr	r3, [pc, #140]	; (80046a0 <HAL_RCC_GetSysClockFreq+0x114>)
 8004612:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	2b0c      	cmp	r3, #12
 8004618:	d134      	bne.n	8004684 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800461a:	4b1e      	ldr	r3, [pc, #120]	; (8004694 <HAL_RCC_GetSysClockFreq+0x108>)
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	f003 0303 	and.w	r3, r3, #3
 8004622:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	2b02      	cmp	r3, #2
 8004628:	d003      	beq.n	8004632 <HAL_RCC_GetSysClockFreq+0xa6>
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	2b03      	cmp	r3, #3
 800462e:	d003      	beq.n	8004638 <HAL_RCC_GetSysClockFreq+0xac>
 8004630:	e005      	b.n	800463e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004632:	4b1a      	ldr	r3, [pc, #104]	; (800469c <HAL_RCC_GetSysClockFreq+0x110>)
 8004634:	617b      	str	r3, [r7, #20]
      break;
 8004636:	e005      	b.n	8004644 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004638:	4b19      	ldr	r3, [pc, #100]	; (80046a0 <HAL_RCC_GetSysClockFreq+0x114>)
 800463a:	617b      	str	r3, [r7, #20]
      break;
 800463c:	e002      	b.n	8004644 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800463e:	69fb      	ldr	r3, [r7, #28]
 8004640:	617b      	str	r3, [r7, #20]
      break;
 8004642:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004644:	4b13      	ldr	r3, [pc, #76]	; (8004694 <HAL_RCC_GetSysClockFreq+0x108>)
 8004646:	68db      	ldr	r3, [r3, #12]
 8004648:	091b      	lsrs	r3, r3, #4
 800464a:	f003 0307 	and.w	r3, r3, #7
 800464e:	3301      	adds	r3, #1
 8004650:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004652:	4b10      	ldr	r3, [pc, #64]	; (8004694 <HAL_RCC_GetSysClockFreq+0x108>)
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	0a1b      	lsrs	r3, r3, #8
 8004658:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800465c:	697a      	ldr	r2, [r7, #20]
 800465e:	fb02 f203 	mul.w	r2, r2, r3
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	fbb2 f3f3 	udiv	r3, r2, r3
 8004668:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800466a:	4b0a      	ldr	r3, [pc, #40]	; (8004694 <HAL_RCC_GetSysClockFreq+0x108>)
 800466c:	68db      	ldr	r3, [r3, #12]
 800466e:	0e5b      	lsrs	r3, r3, #25
 8004670:	f003 0303 	and.w	r3, r3, #3
 8004674:	3301      	adds	r3, #1
 8004676:	005b      	lsls	r3, r3, #1
 8004678:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800467a:	697a      	ldr	r2, [r7, #20]
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004682:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004684:	69bb      	ldr	r3, [r7, #24]
}
 8004686:	4618      	mov	r0, r3
 8004688:	3724      	adds	r7, #36	; 0x24
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr
 8004692:	bf00      	nop
 8004694:	40021000 	.word	0x40021000
 8004698:	0800726c 	.word	0x0800726c
 800469c:	00f42400 	.word	0x00f42400
 80046a0:	007a1200 	.word	0x007a1200

080046a4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046a4:	b480      	push	{r7}
 80046a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046a8:	4b03      	ldr	r3, [pc, #12]	; (80046b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80046aa:	681b      	ldr	r3, [r3, #0]
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr
 80046b6:	bf00      	nop
 80046b8:	20000000 	.word	0x20000000

080046bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80046c0:	f7ff fff0 	bl	80046a4 <HAL_RCC_GetHCLKFreq>
 80046c4:	4602      	mov	r2, r0
 80046c6:	4b06      	ldr	r3, [pc, #24]	; (80046e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	0a1b      	lsrs	r3, r3, #8
 80046cc:	f003 0307 	and.w	r3, r3, #7
 80046d0:	4904      	ldr	r1, [pc, #16]	; (80046e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80046d2:	5ccb      	ldrb	r3, [r1, r3]
 80046d4:	f003 031f 	and.w	r3, r3, #31
 80046d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046dc:	4618      	mov	r0, r3
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	40021000 	.word	0x40021000
 80046e4:	08007264 	.word	0x08007264

080046e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80046ec:	f7ff ffda 	bl	80046a4 <HAL_RCC_GetHCLKFreq>
 80046f0:	4602      	mov	r2, r0
 80046f2:	4b06      	ldr	r3, [pc, #24]	; (800470c <HAL_RCC_GetPCLK2Freq+0x24>)
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	0adb      	lsrs	r3, r3, #11
 80046f8:	f003 0307 	and.w	r3, r3, #7
 80046fc:	4904      	ldr	r1, [pc, #16]	; (8004710 <HAL_RCC_GetPCLK2Freq+0x28>)
 80046fe:	5ccb      	ldrb	r3, [r1, r3]
 8004700:	f003 031f 	and.w	r3, r3, #31
 8004704:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004708:	4618      	mov	r0, r3
 800470a:	bd80      	pop	{r7, pc}
 800470c:	40021000 	.word	0x40021000
 8004710:	08007264 	.word	0x08007264

08004714 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b086      	sub	sp, #24
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800471c:	2300      	movs	r3, #0
 800471e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004720:	4b2a      	ldr	r3, [pc, #168]	; (80047cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004724:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004728:	2b00      	cmp	r3, #0
 800472a:	d003      	beq.n	8004734 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800472c:	f7ff fa02 	bl	8003b34 <HAL_PWREx_GetVoltageRange>
 8004730:	6178      	str	r0, [r7, #20]
 8004732:	e014      	b.n	800475e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004734:	4b25      	ldr	r3, [pc, #148]	; (80047cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004738:	4a24      	ldr	r2, [pc, #144]	; (80047cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800473a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800473e:	6593      	str	r3, [r2, #88]	; 0x58
 8004740:	4b22      	ldr	r3, [pc, #136]	; (80047cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004744:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004748:	60fb      	str	r3, [r7, #12]
 800474a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800474c:	f7ff f9f2 	bl	8003b34 <HAL_PWREx_GetVoltageRange>
 8004750:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004752:	4b1e      	ldr	r3, [pc, #120]	; (80047cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004756:	4a1d      	ldr	r2, [pc, #116]	; (80047cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004758:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800475c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004764:	d10b      	bne.n	800477e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2b80      	cmp	r3, #128	; 0x80
 800476a:	d919      	bls.n	80047a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2ba0      	cmp	r3, #160	; 0xa0
 8004770:	d902      	bls.n	8004778 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004772:	2302      	movs	r3, #2
 8004774:	613b      	str	r3, [r7, #16]
 8004776:	e013      	b.n	80047a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004778:	2301      	movs	r3, #1
 800477a:	613b      	str	r3, [r7, #16]
 800477c:	e010      	b.n	80047a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2b80      	cmp	r3, #128	; 0x80
 8004782:	d902      	bls.n	800478a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004784:	2303      	movs	r3, #3
 8004786:	613b      	str	r3, [r7, #16]
 8004788:	e00a      	b.n	80047a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2b80      	cmp	r3, #128	; 0x80
 800478e:	d102      	bne.n	8004796 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004790:	2302      	movs	r3, #2
 8004792:	613b      	str	r3, [r7, #16]
 8004794:	e004      	b.n	80047a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2b70      	cmp	r3, #112	; 0x70
 800479a:	d101      	bne.n	80047a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800479c:	2301      	movs	r3, #1
 800479e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80047a0:	4b0b      	ldr	r3, [pc, #44]	; (80047d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f023 0207 	bic.w	r2, r3, #7
 80047a8:	4909      	ldr	r1, [pc, #36]	; (80047d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	4313      	orrs	r3, r2
 80047ae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80047b0:	4b07      	ldr	r3, [pc, #28]	; (80047d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 0307 	and.w	r3, r3, #7
 80047b8:	693a      	ldr	r2, [r7, #16]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d001      	beq.n	80047c2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e000      	b.n	80047c4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80047c2:	2300      	movs	r3, #0
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3718      	adds	r7, #24
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	40021000 	.word	0x40021000
 80047d0:	40022000 	.word	0x40022000

080047d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b086      	sub	sp, #24
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80047dc:	2300      	movs	r3, #0
 80047de:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80047e0:	2300      	movs	r3, #0
 80047e2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d041      	beq.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047f4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80047f8:	d02a      	beq.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80047fa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80047fe:	d824      	bhi.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004800:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004804:	d008      	beq.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004806:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800480a:	d81e      	bhi.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800480c:	2b00      	cmp	r3, #0
 800480e:	d00a      	beq.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004810:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004814:	d010      	beq.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004816:	e018      	b.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004818:	4b86      	ldr	r3, [pc, #536]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	4a85      	ldr	r2, [pc, #532]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800481e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004822:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004824:	e015      	b.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	3304      	adds	r3, #4
 800482a:	2100      	movs	r1, #0
 800482c:	4618      	mov	r0, r3
 800482e:	f000 fabb 	bl	8004da8 <RCCEx_PLLSAI1_Config>
 8004832:	4603      	mov	r3, r0
 8004834:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004836:	e00c      	b.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	3320      	adds	r3, #32
 800483c:	2100      	movs	r1, #0
 800483e:	4618      	mov	r0, r3
 8004840:	f000 fba6 	bl	8004f90 <RCCEx_PLLSAI2_Config>
 8004844:	4603      	mov	r3, r0
 8004846:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004848:	e003      	b.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	74fb      	strb	r3, [r7, #19]
      break;
 800484e:	e000      	b.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004850:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004852:	7cfb      	ldrb	r3, [r7, #19]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d10b      	bne.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004858:	4b76      	ldr	r3, [pc, #472]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800485a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800485e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004866:	4973      	ldr	r1, [pc, #460]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004868:	4313      	orrs	r3, r2
 800486a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800486e:	e001      	b.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004870:	7cfb      	ldrb	r3, [r7, #19]
 8004872:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800487c:	2b00      	cmp	r3, #0
 800487e:	d041      	beq.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004884:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004888:	d02a      	beq.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800488a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800488e:	d824      	bhi.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004890:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004894:	d008      	beq.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004896:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800489a:	d81e      	bhi.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x106>
 800489c:	2b00      	cmp	r3, #0
 800489e:	d00a      	beq.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80048a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80048a4:	d010      	beq.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80048a6:	e018      	b.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80048a8:	4b62      	ldr	r3, [pc, #392]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048aa:	68db      	ldr	r3, [r3, #12]
 80048ac:	4a61      	ldr	r2, [pc, #388]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048b2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80048b4:	e015      	b.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	3304      	adds	r3, #4
 80048ba:	2100      	movs	r1, #0
 80048bc:	4618      	mov	r0, r3
 80048be:	f000 fa73 	bl	8004da8 <RCCEx_PLLSAI1_Config>
 80048c2:	4603      	mov	r3, r0
 80048c4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80048c6:	e00c      	b.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	3320      	adds	r3, #32
 80048cc:	2100      	movs	r1, #0
 80048ce:	4618      	mov	r0, r3
 80048d0:	f000 fb5e 	bl	8004f90 <RCCEx_PLLSAI2_Config>
 80048d4:	4603      	mov	r3, r0
 80048d6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80048d8:	e003      	b.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	74fb      	strb	r3, [r7, #19]
      break;
 80048de:	e000      	b.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80048e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048e2:	7cfb      	ldrb	r3, [r7, #19]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d10b      	bne.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80048e8:	4b52      	ldr	r3, [pc, #328]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048ee:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80048f6:	494f      	ldr	r1, [pc, #316]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048f8:	4313      	orrs	r3, r2
 80048fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80048fe:	e001      	b.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004900:	7cfb      	ldrb	r3, [r7, #19]
 8004902:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800490c:	2b00      	cmp	r3, #0
 800490e:	f000 80a0 	beq.w	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004912:	2300      	movs	r3, #0
 8004914:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004916:	4b47      	ldr	r3, [pc, #284]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800491a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d101      	bne.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004922:	2301      	movs	r3, #1
 8004924:	e000      	b.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004926:	2300      	movs	r3, #0
 8004928:	2b00      	cmp	r3, #0
 800492a:	d00d      	beq.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800492c:	4b41      	ldr	r3, [pc, #260]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800492e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004930:	4a40      	ldr	r2, [pc, #256]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004932:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004936:	6593      	str	r3, [r2, #88]	; 0x58
 8004938:	4b3e      	ldr	r3, [pc, #248]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800493a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800493c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004940:	60bb      	str	r3, [r7, #8]
 8004942:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004944:	2301      	movs	r3, #1
 8004946:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004948:	4b3b      	ldr	r3, [pc, #236]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a3a      	ldr	r2, [pc, #232]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800494e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004952:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004954:	f7fd fed6 	bl	8002704 <HAL_GetTick>
 8004958:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800495a:	e009      	b.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800495c:	f7fd fed2 	bl	8002704 <HAL_GetTick>
 8004960:	4602      	mov	r2, r0
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	1ad3      	subs	r3, r2, r3
 8004966:	2b02      	cmp	r3, #2
 8004968:	d902      	bls.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800496a:	2303      	movs	r3, #3
 800496c:	74fb      	strb	r3, [r7, #19]
        break;
 800496e:	e005      	b.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004970:	4b31      	ldr	r3, [pc, #196]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004978:	2b00      	cmp	r3, #0
 800497a:	d0ef      	beq.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800497c:	7cfb      	ldrb	r3, [r7, #19]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d15c      	bne.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004982:	4b2c      	ldr	r3, [pc, #176]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004984:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004988:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800498c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d01f      	beq.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800499a:	697a      	ldr	r2, [r7, #20]
 800499c:	429a      	cmp	r2, r3
 800499e:	d019      	beq.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80049a0:	4b24      	ldr	r3, [pc, #144]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049aa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80049ac:	4b21      	ldr	r3, [pc, #132]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049b2:	4a20      	ldr	r2, [pc, #128]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80049bc:	4b1d      	ldr	r3, [pc, #116]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049c2:	4a1c      	ldr	r2, [pc, #112]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80049cc:	4a19      	ldr	r2, [pc, #100]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	f003 0301 	and.w	r3, r3, #1
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d016      	beq.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049de:	f7fd fe91 	bl	8002704 <HAL_GetTick>
 80049e2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049e4:	e00b      	b.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049e6:	f7fd fe8d 	bl	8002704 <HAL_GetTick>
 80049ea:	4602      	mov	r2, r0
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	1ad3      	subs	r3, r2, r3
 80049f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d902      	bls.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80049f8:	2303      	movs	r3, #3
 80049fa:	74fb      	strb	r3, [r7, #19]
            break;
 80049fc:	e006      	b.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049fe:	4b0d      	ldr	r3, [pc, #52]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a04:	f003 0302 	and.w	r3, r3, #2
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d0ec      	beq.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004a0c:	7cfb      	ldrb	r3, [r7, #19]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d10c      	bne.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a12:	4b08      	ldr	r3, [pc, #32]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a18:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a22:	4904      	ldr	r1, [pc, #16]	; (8004a34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a24:	4313      	orrs	r3, r2
 8004a26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004a2a:	e009      	b.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004a2c:	7cfb      	ldrb	r3, [r7, #19]
 8004a2e:	74bb      	strb	r3, [r7, #18]
 8004a30:	e006      	b.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004a32:	bf00      	nop
 8004a34:	40021000 	.word	0x40021000
 8004a38:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a3c:	7cfb      	ldrb	r3, [r7, #19]
 8004a3e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a40:	7c7b      	ldrb	r3, [r7, #17]
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d105      	bne.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a46:	4b9e      	ldr	r3, [pc, #632]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a4a:	4a9d      	ldr	r2, [pc, #628]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a50:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0301 	and.w	r3, r3, #1
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d00a      	beq.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a5e:	4b98      	ldr	r3, [pc, #608]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a64:	f023 0203 	bic.w	r2, r3, #3
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a6c:	4994      	ldr	r1, [pc, #592]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 0302 	and.w	r3, r3, #2
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d00a      	beq.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a80:	4b8f      	ldr	r3, [pc, #572]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a86:	f023 020c 	bic.w	r2, r3, #12
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a8e:	498c      	ldr	r1, [pc, #560]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a90:	4313      	orrs	r3, r2
 8004a92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 0304 	and.w	r3, r3, #4
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d00a      	beq.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004aa2:	4b87      	ldr	r3, [pc, #540]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aa8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab0:	4983      	ldr	r1, [pc, #524]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f003 0308 	and.w	r3, r3, #8
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d00a      	beq.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004ac4:	4b7e      	ldr	r3, [pc, #504]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ad2:	497b      	ldr	r1, [pc, #492]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 0310 	and.w	r3, r3, #16
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d00a      	beq.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004ae6:	4b76      	ldr	r3, [pc, #472]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004af4:	4972      	ldr	r1, [pc, #456]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004af6:	4313      	orrs	r3, r2
 8004af8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 0320 	and.w	r3, r3, #32
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d00a      	beq.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b08:	4b6d      	ldr	r3, [pc, #436]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b0e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b16:	496a      	ldr	r1, [pc, #424]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d00a      	beq.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b2a:	4b65      	ldr	r3, [pc, #404]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b30:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b38:	4961      	ldr	r1, [pc, #388]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d00a      	beq.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004b4c:	4b5c      	ldr	r3, [pc, #368]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b52:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b5a:	4959      	ldr	r1, [pc, #356]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d00a      	beq.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b6e:	4b54      	ldr	r3, [pc, #336]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b74:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b7c:	4950      	ldr	r1, [pc, #320]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d00a      	beq.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004b90:	4b4b      	ldr	r3, [pc, #300]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b96:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b9e:	4948      	ldr	r1, [pc, #288]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d00a      	beq.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004bb2:	4b43      	ldr	r3, [pc, #268]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bb8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bc0:	493f      	ldr	r1, [pc, #252]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d028      	beq.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004bd4:	4b3a      	ldr	r3, [pc, #232]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bda:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004be2:	4937      	ldr	r1, [pc, #220]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004be4:	4313      	orrs	r3, r2
 8004be6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004bf2:	d106      	bne.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bf4:	4b32      	ldr	r3, [pc, #200]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	4a31      	ldr	r2, [pc, #196]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bfa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004bfe:	60d3      	str	r3, [r2, #12]
 8004c00:	e011      	b.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c06:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004c0a:	d10c      	bne.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	3304      	adds	r3, #4
 8004c10:	2101      	movs	r1, #1
 8004c12:	4618      	mov	r0, r3
 8004c14:	f000 f8c8 	bl	8004da8 <RCCEx_PLLSAI1_Config>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004c1c:	7cfb      	ldrb	r3, [r7, #19]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d001      	beq.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004c22:	7cfb      	ldrb	r3, [r7, #19]
 8004c24:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d028      	beq.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004c32:	4b23      	ldr	r3, [pc, #140]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c38:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c40:	491f      	ldr	r1, [pc, #124]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c42:	4313      	orrs	r3, r2
 8004c44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c4c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c50:	d106      	bne.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c52:	4b1b      	ldr	r3, [pc, #108]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	4a1a      	ldr	r2, [pc, #104]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c58:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c5c:	60d3      	str	r3, [r2, #12]
 8004c5e:	e011      	b.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c64:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004c68:	d10c      	bne.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	3304      	adds	r3, #4
 8004c6e:	2101      	movs	r1, #1
 8004c70:	4618      	mov	r0, r3
 8004c72:	f000 f899 	bl	8004da8 <RCCEx_PLLSAI1_Config>
 8004c76:	4603      	mov	r3, r0
 8004c78:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004c7a:	7cfb      	ldrb	r3, [r7, #19]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d001      	beq.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004c80:	7cfb      	ldrb	r3, [r7, #19]
 8004c82:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d02b      	beq.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004c90:	4b0b      	ldr	r3, [pc, #44]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c96:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c9e:	4908      	ldr	r1, [pc, #32]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004caa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004cae:	d109      	bne.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cb0:	4b03      	ldr	r3, [pc, #12]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	4a02      	ldr	r2, [pc, #8]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cb6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cba:	60d3      	str	r3, [r2, #12]
 8004cbc:	e014      	b.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004cbe:	bf00      	nop
 8004cc0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cc8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ccc:	d10c      	bne.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	3304      	adds	r3, #4
 8004cd2:	2101      	movs	r1, #1
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f000 f867 	bl	8004da8 <RCCEx_PLLSAI1_Config>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004cde:	7cfb      	ldrb	r3, [r7, #19]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d001      	beq.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004ce4:	7cfb      	ldrb	r3, [r7, #19]
 8004ce6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d02f      	beq.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004cf4:	4b2b      	ldr	r3, [pc, #172]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cfa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d02:	4928      	ldr	r1, [pc, #160]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004d04:	4313      	orrs	r3, r2
 8004d06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d12:	d10d      	bne.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	3304      	adds	r3, #4
 8004d18:	2102      	movs	r1, #2
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f000 f844 	bl	8004da8 <RCCEx_PLLSAI1_Config>
 8004d20:	4603      	mov	r3, r0
 8004d22:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d24:	7cfb      	ldrb	r3, [r7, #19]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d014      	beq.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004d2a:	7cfb      	ldrb	r3, [r7, #19]
 8004d2c:	74bb      	strb	r3, [r7, #18]
 8004d2e:	e011      	b.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d38:	d10c      	bne.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	3320      	adds	r3, #32
 8004d3e:	2102      	movs	r1, #2
 8004d40:	4618      	mov	r0, r3
 8004d42:	f000 f925 	bl	8004f90 <RCCEx_PLLSAI2_Config>
 8004d46:	4603      	mov	r3, r0
 8004d48:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d4a:	7cfb      	ldrb	r3, [r7, #19]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d001      	beq.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004d50:	7cfb      	ldrb	r3, [r7, #19]
 8004d52:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d00a      	beq.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004d60:	4b10      	ldr	r3, [pc, #64]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d66:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d6e:	490d      	ldr	r1, [pc, #52]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004d70:	4313      	orrs	r3, r2
 8004d72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d00b      	beq.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004d82:	4b08      	ldr	r3, [pc, #32]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d88:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d92:	4904      	ldr	r1, [pc, #16]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004d94:	4313      	orrs	r3, r2
 8004d96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004d9a:	7cbb      	ldrb	r3, [r7, #18]
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3718      	adds	r7, #24
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}
 8004da4:	40021000 	.word	0x40021000

08004da8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b084      	sub	sp, #16
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004db2:	2300      	movs	r3, #0
 8004db4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004db6:	4b75      	ldr	r3, [pc, #468]	; (8004f8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	f003 0303 	and.w	r3, r3, #3
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d018      	beq.n	8004df4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004dc2:	4b72      	ldr	r3, [pc, #456]	; (8004f8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	f003 0203 	and.w	r2, r3, #3
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d10d      	bne.n	8004dee <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
       ||
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d009      	beq.n	8004dee <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004dda:	4b6c      	ldr	r3, [pc, #432]	; (8004f8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ddc:	68db      	ldr	r3, [r3, #12]
 8004dde:	091b      	lsrs	r3, r3, #4
 8004de0:	f003 0307 	and.w	r3, r3, #7
 8004de4:	1c5a      	adds	r2, r3, #1
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	685b      	ldr	r3, [r3, #4]
       ||
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d047      	beq.n	8004e7e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	73fb      	strb	r3, [r7, #15]
 8004df2:	e044      	b.n	8004e7e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	2b03      	cmp	r3, #3
 8004dfa:	d018      	beq.n	8004e2e <RCCEx_PLLSAI1_Config+0x86>
 8004dfc:	2b03      	cmp	r3, #3
 8004dfe:	d825      	bhi.n	8004e4c <RCCEx_PLLSAI1_Config+0xa4>
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d002      	beq.n	8004e0a <RCCEx_PLLSAI1_Config+0x62>
 8004e04:	2b02      	cmp	r3, #2
 8004e06:	d009      	beq.n	8004e1c <RCCEx_PLLSAI1_Config+0x74>
 8004e08:	e020      	b.n	8004e4c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004e0a:	4b60      	ldr	r3, [pc, #384]	; (8004f8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f003 0302 	and.w	r3, r3, #2
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d11d      	bne.n	8004e52 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e1a:	e01a      	b.n	8004e52 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004e1c:	4b5b      	ldr	r3, [pc, #364]	; (8004f8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d116      	bne.n	8004e56 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e2c:	e013      	b.n	8004e56 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004e2e:	4b57      	ldr	r3, [pc, #348]	; (8004f8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d10f      	bne.n	8004e5a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004e3a:	4b54      	ldr	r3, [pc, #336]	; (8004f8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d109      	bne.n	8004e5a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004e4a:	e006      	b.n	8004e5a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	73fb      	strb	r3, [r7, #15]
      break;
 8004e50:	e004      	b.n	8004e5c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004e52:	bf00      	nop
 8004e54:	e002      	b.n	8004e5c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004e56:	bf00      	nop
 8004e58:	e000      	b.n	8004e5c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004e5a:	bf00      	nop
    }

    if(status == HAL_OK)
 8004e5c:	7bfb      	ldrb	r3, [r7, #15]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d10d      	bne.n	8004e7e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004e62:	4b4a      	ldr	r3, [pc, #296]	; (8004f8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e64:	68db      	ldr	r3, [r3, #12]
 8004e66:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6819      	ldr	r1, [r3, #0]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	3b01      	subs	r3, #1
 8004e74:	011b      	lsls	r3, r3, #4
 8004e76:	430b      	orrs	r3, r1
 8004e78:	4944      	ldr	r1, [pc, #272]	; (8004f8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004e7e:	7bfb      	ldrb	r3, [r7, #15]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d17d      	bne.n	8004f80 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004e84:	4b41      	ldr	r3, [pc, #260]	; (8004f8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a40      	ldr	r2, [pc, #256]	; (8004f8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e8a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004e8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e90:	f7fd fc38 	bl	8002704 <HAL_GetTick>
 8004e94:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004e96:	e009      	b.n	8004eac <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004e98:	f7fd fc34 	bl	8002704 <HAL_GetTick>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	1ad3      	subs	r3, r2, r3
 8004ea2:	2b02      	cmp	r3, #2
 8004ea4:	d902      	bls.n	8004eac <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004ea6:	2303      	movs	r3, #3
 8004ea8:	73fb      	strb	r3, [r7, #15]
        break;
 8004eaa:	e005      	b.n	8004eb8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004eac:	4b37      	ldr	r3, [pc, #220]	; (8004f8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d1ef      	bne.n	8004e98 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004eb8:	7bfb      	ldrb	r3, [r7, #15]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d160      	bne.n	8004f80 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d111      	bne.n	8004ee8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ec4:	4b31      	ldr	r3, [pc, #196]	; (8004f8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ec6:	691b      	ldr	r3, [r3, #16]
 8004ec8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004ecc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ed0:	687a      	ldr	r2, [r7, #4]
 8004ed2:	6892      	ldr	r2, [r2, #8]
 8004ed4:	0211      	lsls	r1, r2, #8
 8004ed6:	687a      	ldr	r2, [r7, #4]
 8004ed8:	68d2      	ldr	r2, [r2, #12]
 8004eda:	0912      	lsrs	r2, r2, #4
 8004edc:	0452      	lsls	r2, r2, #17
 8004ede:	430a      	orrs	r2, r1
 8004ee0:	492a      	ldr	r1, [pc, #168]	; (8004f8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	610b      	str	r3, [r1, #16]
 8004ee6:	e027      	b.n	8004f38 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d112      	bne.n	8004f14 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004eee:	4b27      	ldr	r3, [pc, #156]	; (8004f8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004ef6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	6892      	ldr	r2, [r2, #8]
 8004efe:	0211      	lsls	r1, r2, #8
 8004f00:	687a      	ldr	r2, [r7, #4]
 8004f02:	6912      	ldr	r2, [r2, #16]
 8004f04:	0852      	lsrs	r2, r2, #1
 8004f06:	3a01      	subs	r2, #1
 8004f08:	0552      	lsls	r2, r2, #21
 8004f0a:	430a      	orrs	r2, r1
 8004f0c:	491f      	ldr	r1, [pc, #124]	; (8004f8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	610b      	str	r3, [r1, #16]
 8004f12:	e011      	b.n	8004f38 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f14:	4b1d      	ldr	r3, [pc, #116]	; (8004f8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f16:	691b      	ldr	r3, [r3, #16]
 8004f18:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004f1c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004f20:	687a      	ldr	r2, [r7, #4]
 8004f22:	6892      	ldr	r2, [r2, #8]
 8004f24:	0211      	lsls	r1, r2, #8
 8004f26:	687a      	ldr	r2, [r7, #4]
 8004f28:	6952      	ldr	r2, [r2, #20]
 8004f2a:	0852      	lsrs	r2, r2, #1
 8004f2c:	3a01      	subs	r2, #1
 8004f2e:	0652      	lsls	r2, r2, #25
 8004f30:	430a      	orrs	r2, r1
 8004f32:	4916      	ldr	r1, [pc, #88]	; (8004f8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f34:	4313      	orrs	r3, r2
 8004f36:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004f38:	4b14      	ldr	r3, [pc, #80]	; (8004f8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a13      	ldr	r2, [pc, #76]	; (8004f8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f3e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004f42:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f44:	f7fd fbde 	bl	8002704 <HAL_GetTick>
 8004f48:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004f4a:	e009      	b.n	8004f60 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004f4c:	f7fd fbda 	bl	8002704 <HAL_GetTick>
 8004f50:	4602      	mov	r2, r0
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	d902      	bls.n	8004f60 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	73fb      	strb	r3, [r7, #15]
          break;
 8004f5e:	e005      	b.n	8004f6c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004f60:	4b0a      	ldr	r3, [pc, #40]	; (8004f8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d0ef      	beq.n	8004f4c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004f6c:	7bfb      	ldrb	r3, [r7, #15]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d106      	bne.n	8004f80 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004f72:	4b06      	ldr	r3, [pc, #24]	; (8004f8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f74:	691a      	ldr	r2, [r3, #16]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	699b      	ldr	r3, [r3, #24]
 8004f7a:	4904      	ldr	r1, [pc, #16]	; (8004f8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3710      	adds	r7, #16
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}
 8004f8a:	bf00      	nop
 8004f8c:	40021000 	.word	0x40021000

08004f90 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b084      	sub	sp, #16
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004f9e:	4b6a      	ldr	r3, [pc, #424]	; (8005148 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fa0:	68db      	ldr	r3, [r3, #12]
 8004fa2:	f003 0303 	and.w	r3, r3, #3
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d018      	beq.n	8004fdc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004faa:	4b67      	ldr	r3, [pc, #412]	; (8005148 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fac:	68db      	ldr	r3, [r3, #12]
 8004fae:	f003 0203 	and.w	r2, r3, #3
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d10d      	bne.n	8004fd6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
       ||
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d009      	beq.n	8004fd6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004fc2:	4b61      	ldr	r3, [pc, #388]	; (8005148 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fc4:	68db      	ldr	r3, [r3, #12]
 8004fc6:	091b      	lsrs	r3, r3, #4
 8004fc8:	f003 0307 	and.w	r3, r3, #7
 8004fcc:	1c5a      	adds	r2, r3, #1
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	685b      	ldr	r3, [r3, #4]
       ||
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d047      	beq.n	8005066 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	73fb      	strb	r3, [r7, #15]
 8004fda:	e044      	b.n	8005066 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	2b03      	cmp	r3, #3
 8004fe2:	d018      	beq.n	8005016 <RCCEx_PLLSAI2_Config+0x86>
 8004fe4:	2b03      	cmp	r3, #3
 8004fe6:	d825      	bhi.n	8005034 <RCCEx_PLLSAI2_Config+0xa4>
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d002      	beq.n	8004ff2 <RCCEx_PLLSAI2_Config+0x62>
 8004fec:	2b02      	cmp	r3, #2
 8004fee:	d009      	beq.n	8005004 <RCCEx_PLLSAI2_Config+0x74>
 8004ff0:	e020      	b.n	8005034 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004ff2:	4b55      	ldr	r3, [pc, #340]	; (8005148 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 0302 	and.w	r3, r3, #2
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d11d      	bne.n	800503a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005002:	e01a      	b.n	800503a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005004:	4b50      	ldr	r3, [pc, #320]	; (8005148 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800500c:	2b00      	cmp	r3, #0
 800500e:	d116      	bne.n	800503e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005014:	e013      	b.n	800503e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005016:	4b4c      	ldr	r3, [pc, #304]	; (8005148 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800501e:	2b00      	cmp	r3, #0
 8005020:	d10f      	bne.n	8005042 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005022:	4b49      	ldr	r3, [pc, #292]	; (8005148 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800502a:	2b00      	cmp	r3, #0
 800502c:	d109      	bne.n	8005042 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005032:	e006      	b.n	8005042 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005034:	2301      	movs	r3, #1
 8005036:	73fb      	strb	r3, [r7, #15]
      break;
 8005038:	e004      	b.n	8005044 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800503a:	bf00      	nop
 800503c:	e002      	b.n	8005044 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800503e:	bf00      	nop
 8005040:	e000      	b.n	8005044 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005042:	bf00      	nop
    }

    if(status == HAL_OK)
 8005044:	7bfb      	ldrb	r3, [r7, #15]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d10d      	bne.n	8005066 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800504a:	4b3f      	ldr	r3, [pc, #252]	; (8005148 <RCCEx_PLLSAI2_Config+0x1b8>)
 800504c:	68db      	ldr	r3, [r3, #12]
 800504e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6819      	ldr	r1, [r3, #0]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	3b01      	subs	r3, #1
 800505c:	011b      	lsls	r3, r3, #4
 800505e:	430b      	orrs	r3, r1
 8005060:	4939      	ldr	r1, [pc, #228]	; (8005148 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005062:	4313      	orrs	r3, r2
 8005064:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005066:	7bfb      	ldrb	r3, [r7, #15]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d167      	bne.n	800513c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800506c:	4b36      	ldr	r3, [pc, #216]	; (8005148 <RCCEx_PLLSAI2_Config+0x1b8>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a35      	ldr	r2, [pc, #212]	; (8005148 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005072:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005076:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005078:	f7fd fb44 	bl	8002704 <HAL_GetTick>
 800507c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800507e:	e009      	b.n	8005094 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005080:	f7fd fb40 	bl	8002704 <HAL_GetTick>
 8005084:	4602      	mov	r2, r0
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	1ad3      	subs	r3, r2, r3
 800508a:	2b02      	cmp	r3, #2
 800508c:	d902      	bls.n	8005094 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800508e:	2303      	movs	r3, #3
 8005090:	73fb      	strb	r3, [r7, #15]
        break;
 8005092:	e005      	b.n	80050a0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005094:	4b2c      	ldr	r3, [pc, #176]	; (8005148 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800509c:	2b00      	cmp	r3, #0
 800509e:	d1ef      	bne.n	8005080 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80050a0:	7bfb      	ldrb	r3, [r7, #15]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d14a      	bne.n	800513c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d111      	bne.n	80050d0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80050ac:	4b26      	ldr	r3, [pc, #152]	; (8005148 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050ae:	695b      	ldr	r3, [r3, #20]
 80050b0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80050b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050b8:	687a      	ldr	r2, [r7, #4]
 80050ba:	6892      	ldr	r2, [r2, #8]
 80050bc:	0211      	lsls	r1, r2, #8
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	68d2      	ldr	r2, [r2, #12]
 80050c2:	0912      	lsrs	r2, r2, #4
 80050c4:	0452      	lsls	r2, r2, #17
 80050c6:	430a      	orrs	r2, r1
 80050c8:	491f      	ldr	r1, [pc, #124]	; (8005148 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050ca:	4313      	orrs	r3, r2
 80050cc:	614b      	str	r3, [r1, #20]
 80050ce:	e011      	b.n	80050f4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80050d0:	4b1d      	ldr	r3, [pc, #116]	; (8005148 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050d2:	695b      	ldr	r3, [r3, #20]
 80050d4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80050d8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	6892      	ldr	r2, [r2, #8]
 80050e0:	0211      	lsls	r1, r2, #8
 80050e2:	687a      	ldr	r2, [r7, #4]
 80050e4:	6912      	ldr	r2, [r2, #16]
 80050e6:	0852      	lsrs	r2, r2, #1
 80050e8:	3a01      	subs	r2, #1
 80050ea:	0652      	lsls	r2, r2, #25
 80050ec:	430a      	orrs	r2, r1
 80050ee:	4916      	ldr	r1, [pc, #88]	; (8005148 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050f0:	4313      	orrs	r3, r2
 80050f2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80050f4:	4b14      	ldr	r3, [pc, #80]	; (8005148 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a13      	ldr	r2, [pc, #76]	; (8005148 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050fe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005100:	f7fd fb00 	bl	8002704 <HAL_GetTick>
 8005104:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005106:	e009      	b.n	800511c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005108:	f7fd fafc 	bl	8002704 <HAL_GetTick>
 800510c:	4602      	mov	r2, r0
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	1ad3      	subs	r3, r2, r3
 8005112:	2b02      	cmp	r3, #2
 8005114:	d902      	bls.n	800511c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005116:	2303      	movs	r3, #3
 8005118:	73fb      	strb	r3, [r7, #15]
          break;
 800511a:	e005      	b.n	8005128 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800511c:	4b0a      	ldr	r3, [pc, #40]	; (8005148 <RCCEx_PLLSAI2_Config+0x1b8>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005124:	2b00      	cmp	r3, #0
 8005126:	d0ef      	beq.n	8005108 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005128:	7bfb      	ldrb	r3, [r7, #15]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d106      	bne.n	800513c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800512e:	4b06      	ldr	r3, [pc, #24]	; (8005148 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005130:	695a      	ldr	r2, [r3, #20]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	695b      	ldr	r3, [r3, #20]
 8005136:	4904      	ldr	r1, [pc, #16]	; (8005148 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005138:	4313      	orrs	r3, r2
 800513a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800513c:	7bfb      	ldrb	r3, [r7, #15]
}
 800513e:	4618      	mov	r0, r3
 8005140:	3710      	adds	r7, #16
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
 8005146:	bf00      	nop
 8005148:	40021000 	.word	0x40021000

0800514c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b082      	sub	sp, #8
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d101      	bne.n	800515e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e049      	b.n	80051f2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005164:	b2db      	uxtb	r3, r3
 8005166:	2b00      	cmp	r3, #0
 8005168:	d106      	bne.n	8005178 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f7fd f92a 	bl	80023cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2202      	movs	r2, #2
 800517c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	3304      	adds	r3, #4
 8005188:	4619      	mov	r1, r3
 800518a:	4610      	mov	r0, r2
 800518c:	f000 f9ee 	bl	800556c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051f0:	2300      	movs	r3, #0
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3708      	adds	r7, #8
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
	...

080051fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b085      	sub	sp, #20
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800520a:	b2db      	uxtb	r3, r3
 800520c:	2b01      	cmp	r3, #1
 800520e:	d001      	beq.n	8005214 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	e04f      	b.n	80052b4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2202      	movs	r2, #2
 8005218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	68da      	ldr	r2, [r3, #12]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f042 0201 	orr.w	r2, r2, #1
 800522a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a23      	ldr	r2, [pc, #140]	; (80052c0 <HAL_TIM_Base_Start_IT+0xc4>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d01d      	beq.n	8005272 <HAL_TIM_Base_Start_IT+0x76>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800523e:	d018      	beq.n	8005272 <HAL_TIM_Base_Start_IT+0x76>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a1f      	ldr	r2, [pc, #124]	; (80052c4 <HAL_TIM_Base_Start_IT+0xc8>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d013      	beq.n	8005272 <HAL_TIM_Base_Start_IT+0x76>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a1e      	ldr	r2, [pc, #120]	; (80052c8 <HAL_TIM_Base_Start_IT+0xcc>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d00e      	beq.n	8005272 <HAL_TIM_Base_Start_IT+0x76>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a1c      	ldr	r2, [pc, #112]	; (80052cc <HAL_TIM_Base_Start_IT+0xd0>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d009      	beq.n	8005272 <HAL_TIM_Base_Start_IT+0x76>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a1b      	ldr	r2, [pc, #108]	; (80052d0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d004      	beq.n	8005272 <HAL_TIM_Base_Start_IT+0x76>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a19      	ldr	r2, [pc, #100]	; (80052d4 <HAL_TIM_Base_Start_IT+0xd8>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d115      	bne.n	800529e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	689a      	ldr	r2, [r3, #8]
 8005278:	4b17      	ldr	r3, [pc, #92]	; (80052d8 <HAL_TIM_Base_Start_IT+0xdc>)
 800527a:	4013      	ands	r3, r2
 800527c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2b06      	cmp	r3, #6
 8005282:	d015      	beq.n	80052b0 <HAL_TIM_Base_Start_IT+0xb4>
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800528a:	d011      	beq.n	80052b0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f042 0201 	orr.w	r2, r2, #1
 800529a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800529c:	e008      	b.n	80052b0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f042 0201 	orr.w	r2, r2, #1
 80052ac:	601a      	str	r2, [r3, #0]
 80052ae:	e000      	b.n	80052b2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052b0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80052b2:	2300      	movs	r3, #0
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3714      	adds	r7, #20
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr
 80052c0:	40012c00 	.word	0x40012c00
 80052c4:	40000400 	.word	0x40000400
 80052c8:	40000800 	.word	0x40000800
 80052cc:	40000c00 	.word	0x40000c00
 80052d0:	40013400 	.word	0x40013400
 80052d4:	40014000 	.word	0x40014000
 80052d8:	00010007 	.word	0x00010007

080052dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b082      	sub	sp, #8
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	691b      	ldr	r3, [r3, #16]
 80052ea:	f003 0302 	and.w	r3, r3, #2
 80052ee:	2b02      	cmp	r3, #2
 80052f0:	d122      	bne.n	8005338 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	68db      	ldr	r3, [r3, #12]
 80052f8:	f003 0302 	and.w	r3, r3, #2
 80052fc:	2b02      	cmp	r3, #2
 80052fe:	d11b      	bne.n	8005338 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f06f 0202 	mvn.w	r2, #2
 8005308:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2201      	movs	r2, #1
 800530e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	699b      	ldr	r3, [r3, #24]
 8005316:	f003 0303 	and.w	r3, r3, #3
 800531a:	2b00      	cmp	r3, #0
 800531c:	d003      	beq.n	8005326 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f000 f905 	bl	800552e <HAL_TIM_IC_CaptureCallback>
 8005324:	e005      	b.n	8005332 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f000 f8f7 	bl	800551a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f000 f908 	bl	8005542 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2200      	movs	r2, #0
 8005336:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	691b      	ldr	r3, [r3, #16]
 800533e:	f003 0304 	and.w	r3, r3, #4
 8005342:	2b04      	cmp	r3, #4
 8005344:	d122      	bne.n	800538c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	68db      	ldr	r3, [r3, #12]
 800534c:	f003 0304 	and.w	r3, r3, #4
 8005350:	2b04      	cmp	r3, #4
 8005352:	d11b      	bne.n	800538c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f06f 0204 	mvn.w	r2, #4
 800535c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2202      	movs	r2, #2
 8005362:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	699b      	ldr	r3, [r3, #24]
 800536a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800536e:	2b00      	cmp	r3, #0
 8005370:	d003      	beq.n	800537a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f000 f8db 	bl	800552e <HAL_TIM_IC_CaptureCallback>
 8005378:	e005      	b.n	8005386 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f000 f8cd 	bl	800551a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	f000 f8de 	bl	8005542 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2200      	movs	r2, #0
 800538a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	691b      	ldr	r3, [r3, #16]
 8005392:	f003 0308 	and.w	r3, r3, #8
 8005396:	2b08      	cmp	r3, #8
 8005398:	d122      	bne.n	80053e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	f003 0308 	and.w	r3, r3, #8
 80053a4:	2b08      	cmp	r3, #8
 80053a6:	d11b      	bne.n	80053e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f06f 0208 	mvn.w	r2, #8
 80053b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2204      	movs	r2, #4
 80053b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	69db      	ldr	r3, [r3, #28]
 80053be:	f003 0303 	and.w	r3, r3, #3
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d003      	beq.n	80053ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f000 f8b1 	bl	800552e <HAL_TIM_IC_CaptureCallback>
 80053cc:	e005      	b.n	80053da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f000 f8a3 	bl	800551a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	f000 f8b4 	bl	8005542 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2200      	movs	r2, #0
 80053de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	691b      	ldr	r3, [r3, #16]
 80053e6:	f003 0310 	and.w	r3, r3, #16
 80053ea:	2b10      	cmp	r3, #16
 80053ec:	d122      	bne.n	8005434 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	f003 0310 	and.w	r3, r3, #16
 80053f8:	2b10      	cmp	r3, #16
 80053fa:	d11b      	bne.n	8005434 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f06f 0210 	mvn.w	r2, #16
 8005404:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2208      	movs	r2, #8
 800540a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	69db      	ldr	r3, [r3, #28]
 8005412:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005416:	2b00      	cmp	r3, #0
 8005418:	d003      	beq.n	8005422 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f000 f887 	bl	800552e <HAL_TIM_IC_CaptureCallback>
 8005420:	e005      	b.n	800542e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f000 f879 	bl	800551a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f000 f88a 	bl	8005542 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2200      	movs	r2, #0
 8005432:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	691b      	ldr	r3, [r3, #16]
 800543a:	f003 0301 	and.w	r3, r3, #1
 800543e:	2b01      	cmp	r3, #1
 8005440:	d10e      	bne.n	8005460 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	68db      	ldr	r3, [r3, #12]
 8005448:	f003 0301 	and.w	r3, r3, #1
 800544c:	2b01      	cmp	r3, #1
 800544e:	d107      	bne.n	8005460 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f06f 0201 	mvn.w	r2, #1
 8005458:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f7fc fe7a 	bl	8002154 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	691b      	ldr	r3, [r3, #16]
 8005466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800546a:	2b80      	cmp	r3, #128	; 0x80
 800546c:	d10e      	bne.n	800548c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	68db      	ldr	r3, [r3, #12]
 8005474:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005478:	2b80      	cmp	r3, #128	; 0x80
 800547a:	d107      	bne.n	800548c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005484:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f000 f914 	bl	80056b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	691b      	ldr	r3, [r3, #16]
 8005492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005496:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800549a:	d10e      	bne.n	80054ba <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	68db      	ldr	r3, [r3, #12]
 80054a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054a6:	2b80      	cmp	r3, #128	; 0x80
 80054a8:	d107      	bne.n	80054ba <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80054b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f000 f907 	bl	80056c8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	691b      	ldr	r3, [r3, #16]
 80054c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054c4:	2b40      	cmp	r3, #64	; 0x40
 80054c6:	d10e      	bne.n	80054e6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	68db      	ldr	r3, [r3, #12]
 80054ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054d2:	2b40      	cmp	r3, #64	; 0x40
 80054d4:	d107      	bne.n	80054e6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80054de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f000 f838 	bl	8005556 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	691b      	ldr	r3, [r3, #16]
 80054ec:	f003 0320 	and.w	r3, r3, #32
 80054f0:	2b20      	cmp	r3, #32
 80054f2:	d10e      	bne.n	8005512 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	68db      	ldr	r3, [r3, #12]
 80054fa:	f003 0320 	and.w	r3, r3, #32
 80054fe:	2b20      	cmp	r3, #32
 8005500:	d107      	bne.n	8005512 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f06f 0220 	mvn.w	r2, #32
 800550a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f000 f8c7 	bl	80056a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005512:	bf00      	nop
 8005514:	3708      	adds	r7, #8
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}

0800551a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800551a:	b480      	push	{r7}
 800551c:	b083      	sub	sp, #12
 800551e:	af00      	add	r7, sp, #0
 8005520:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005522:	bf00      	nop
 8005524:	370c      	adds	r7, #12
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr

0800552e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800552e:	b480      	push	{r7}
 8005530:	b083      	sub	sp, #12
 8005532:	af00      	add	r7, sp, #0
 8005534:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005536:	bf00      	nop
 8005538:	370c      	adds	r7, #12
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr

08005542 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005542:	b480      	push	{r7}
 8005544:	b083      	sub	sp, #12
 8005546:	af00      	add	r7, sp, #0
 8005548:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800554a:	bf00      	nop
 800554c:	370c      	adds	r7, #12
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr

08005556 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005556:	b480      	push	{r7}
 8005558:	b083      	sub	sp, #12
 800555a:	af00      	add	r7, sp, #0
 800555c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800555e:	bf00      	nop
 8005560:	370c      	adds	r7, #12
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr
	...

0800556c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800556c:	b480      	push	{r7}
 800556e:	b085      	sub	sp, #20
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
 8005574:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	4a40      	ldr	r2, [pc, #256]	; (8005680 <TIM_Base_SetConfig+0x114>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d013      	beq.n	80055ac <TIM_Base_SetConfig+0x40>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800558a:	d00f      	beq.n	80055ac <TIM_Base_SetConfig+0x40>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	4a3d      	ldr	r2, [pc, #244]	; (8005684 <TIM_Base_SetConfig+0x118>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d00b      	beq.n	80055ac <TIM_Base_SetConfig+0x40>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	4a3c      	ldr	r2, [pc, #240]	; (8005688 <TIM_Base_SetConfig+0x11c>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d007      	beq.n	80055ac <TIM_Base_SetConfig+0x40>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	4a3b      	ldr	r2, [pc, #236]	; (800568c <TIM_Base_SetConfig+0x120>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d003      	beq.n	80055ac <TIM_Base_SetConfig+0x40>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	4a3a      	ldr	r2, [pc, #232]	; (8005690 <TIM_Base_SetConfig+0x124>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d108      	bne.n	80055be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	68fa      	ldr	r2, [r7, #12]
 80055ba:	4313      	orrs	r3, r2
 80055bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4a2f      	ldr	r2, [pc, #188]	; (8005680 <TIM_Base_SetConfig+0x114>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d01f      	beq.n	8005606 <TIM_Base_SetConfig+0x9a>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055cc:	d01b      	beq.n	8005606 <TIM_Base_SetConfig+0x9a>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	4a2c      	ldr	r2, [pc, #176]	; (8005684 <TIM_Base_SetConfig+0x118>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d017      	beq.n	8005606 <TIM_Base_SetConfig+0x9a>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	4a2b      	ldr	r2, [pc, #172]	; (8005688 <TIM_Base_SetConfig+0x11c>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d013      	beq.n	8005606 <TIM_Base_SetConfig+0x9a>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4a2a      	ldr	r2, [pc, #168]	; (800568c <TIM_Base_SetConfig+0x120>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d00f      	beq.n	8005606 <TIM_Base_SetConfig+0x9a>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4a29      	ldr	r2, [pc, #164]	; (8005690 <TIM_Base_SetConfig+0x124>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d00b      	beq.n	8005606 <TIM_Base_SetConfig+0x9a>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	4a28      	ldr	r2, [pc, #160]	; (8005694 <TIM_Base_SetConfig+0x128>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d007      	beq.n	8005606 <TIM_Base_SetConfig+0x9a>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4a27      	ldr	r2, [pc, #156]	; (8005698 <TIM_Base_SetConfig+0x12c>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d003      	beq.n	8005606 <TIM_Base_SetConfig+0x9a>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4a26      	ldr	r2, [pc, #152]	; (800569c <TIM_Base_SetConfig+0x130>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d108      	bne.n	8005618 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800560c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	68db      	ldr	r3, [r3, #12]
 8005612:	68fa      	ldr	r2, [r7, #12]
 8005614:	4313      	orrs	r3, r2
 8005616:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	695b      	ldr	r3, [r3, #20]
 8005622:	4313      	orrs	r3, r2
 8005624:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	68fa      	ldr	r2, [r7, #12]
 800562a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	689a      	ldr	r2, [r3, #8]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	4a10      	ldr	r2, [pc, #64]	; (8005680 <TIM_Base_SetConfig+0x114>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d00f      	beq.n	8005664 <TIM_Base_SetConfig+0xf8>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	4a12      	ldr	r2, [pc, #72]	; (8005690 <TIM_Base_SetConfig+0x124>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d00b      	beq.n	8005664 <TIM_Base_SetConfig+0xf8>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	4a11      	ldr	r2, [pc, #68]	; (8005694 <TIM_Base_SetConfig+0x128>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d007      	beq.n	8005664 <TIM_Base_SetConfig+0xf8>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	4a10      	ldr	r2, [pc, #64]	; (8005698 <TIM_Base_SetConfig+0x12c>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d003      	beq.n	8005664 <TIM_Base_SetConfig+0xf8>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	4a0f      	ldr	r2, [pc, #60]	; (800569c <TIM_Base_SetConfig+0x130>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d103      	bne.n	800566c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	691a      	ldr	r2, [r3, #16]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2201      	movs	r2, #1
 8005670:	615a      	str	r2, [r3, #20]
}
 8005672:	bf00      	nop
 8005674:	3714      	adds	r7, #20
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr
 800567e:	bf00      	nop
 8005680:	40012c00 	.word	0x40012c00
 8005684:	40000400 	.word	0x40000400
 8005688:	40000800 	.word	0x40000800
 800568c:	40000c00 	.word	0x40000c00
 8005690:	40013400 	.word	0x40013400
 8005694:	40014000 	.word	0x40014000
 8005698:	40014400 	.word	0x40014400
 800569c:	40014800 	.word	0x40014800

080056a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b083      	sub	sp, #12
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80056a8:	bf00      	nop
 80056aa:	370c      	adds	r7, #12
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr

080056b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b083      	sub	sp, #12
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80056bc:	bf00      	nop
 80056be:	370c      	adds	r7, #12
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr

080056c8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b083      	sub	sp, #12
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80056d0:	bf00      	nop
 80056d2:	370c      	adds	r7, #12
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr

080056dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b082      	sub	sp, #8
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d101      	bne.n	80056ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	e040      	b.n	8005770 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d106      	bne.n	8005704 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2200      	movs	r2, #0
 80056fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f7fc feea 	bl	80024d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2224      	movs	r2, #36	; 0x24
 8005708:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f022 0201 	bic.w	r2, r2, #1
 8005718:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f000 fb26 	bl	8005d6c <UART_SetConfig>
 8005720:	4603      	mov	r3, r0
 8005722:	2b01      	cmp	r3, #1
 8005724:	d101      	bne.n	800572a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	e022      	b.n	8005770 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800572e:	2b00      	cmp	r3, #0
 8005730:	d002      	beq.n	8005738 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f000 fda4 	bl	8006280 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	685a      	ldr	r2, [r3, #4]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005746:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	689a      	ldr	r2, [r3, #8]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005756:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f042 0201 	orr.w	r2, r2, #1
 8005766:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f000 fe2b 	bl	80063c4 <UART_CheckIdleState>
 800576e:	4603      	mov	r3, r0
}
 8005770:	4618      	mov	r0, r3
 8005772:	3708      	adds	r7, #8
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}

08005778 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b08a      	sub	sp, #40	; 0x28
 800577c:	af02      	add	r7, sp, #8
 800577e:	60f8      	str	r0, [r7, #12]
 8005780:	60b9      	str	r1, [r7, #8]
 8005782:	603b      	str	r3, [r7, #0]
 8005784:	4613      	mov	r3, r2
 8005786:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800578c:	2b20      	cmp	r3, #32
 800578e:	f040 8082 	bne.w	8005896 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d002      	beq.n	800579e <HAL_UART_Transmit+0x26>
 8005798:	88fb      	ldrh	r3, [r7, #6]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d101      	bne.n	80057a2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	e07a      	b.n	8005898 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d101      	bne.n	80057b0 <HAL_UART_Transmit+0x38>
 80057ac:	2302      	movs	r3, #2
 80057ae:	e073      	b.n	8005898 <HAL_UART_Transmit+0x120>
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2201      	movs	r2, #1
 80057b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2200      	movs	r2, #0
 80057bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2221      	movs	r2, #33	; 0x21
 80057c4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80057c6:	f7fc ff9d 	bl	8002704 <HAL_GetTick>
 80057ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	88fa      	ldrh	r2, [r7, #6]
 80057d0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	88fa      	ldrh	r2, [r7, #6]
 80057d8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057e4:	d108      	bne.n	80057f8 <HAL_UART_Transmit+0x80>
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	691b      	ldr	r3, [r3, #16]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d104      	bne.n	80057f8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80057ee:	2300      	movs	r3, #0
 80057f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	61bb      	str	r3, [r7, #24]
 80057f6:	e003      	b.n	8005800 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80057fc:	2300      	movs	r3, #0
 80057fe:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2200      	movs	r2, #0
 8005804:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005808:	e02d      	b.n	8005866 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	9300      	str	r3, [sp, #0]
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	2200      	movs	r2, #0
 8005812:	2180      	movs	r1, #128	; 0x80
 8005814:	68f8      	ldr	r0, [r7, #12]
 8005816:	f000 fe1e 	bl	8006456 <UART_WaitOnFlagUntilTimeout>
 800581a:	4603      	mov	r3, r0
 800581c:	2b00      	cmp	r3, #0
 800581e:	d001      	beq.n	8005824 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005820:	2303      	movs	r3, #3
 8005822:	e039      	b.n	8005898 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005824:	69fb      	ldr	r3, [r7, #28]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d10b      	bne.n	8005842 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800582a:	69bb      	ldr	r3, [r7, #24]
 800582c:	881a      	ldrh	r2, [r3, #0]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005836:	b292      	uxth	r2, r2
 8005838:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800583a:	69bb      	ldr	r3, [r7, #24]
 800583c:	3302      	adds	r3, #2
 800583e:	61bb      	str	r3, [r7, #24]
 8005840:	e008      	b.n	8005854 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005842:	69fb      	ldr	r3, [r7, #28]
 8005844:	781a      	ldrb	r2, [r3, #0]
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	b292      	uxth	r2, r2
 800584c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800584e:	69fb      	ldr	r3, [r7, #28]
 8005850:	3301      	adds	r3, #1
 8005852:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800585a:	b29b      	uxth	r3, r3
 800585c:	3b01      	subs	r3, #1
 800585e:	b29a      	uxth	r2, r3
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800586c:	b29b      	uxth	r3, r3
 800586e:	2b00      	cmp	r3, #0
 8005870:	d1cb      	bne.n	800580a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	9300      	str	r3, [sp, #0]
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	2200      	movs	r2, #0
 800587a:	2140      	movs	r1, #64	; 0x40
 800587c:	68f8      	ldr	r0, [r7, #12]
 800587e:	f000 fdea 	bl	8006456 <UART_WaitOnFlagUntilTimeout>
 8005882:	4603      	mov	r3, r0
 8005884:	2b00      	cmp	r3, #0
 8005886:	d001      	beq.n	800588c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005888:	2303      	movs	r3, #3
 800588a:	e005      	b.n	8005898 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2220      	movs	r2, #32
 8005890:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005892:	2300      	movs	r3, #0
 8005894:	e000      	b.n	8005898 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005896:	2302      	movs	r3, #2
  }
}
 8005898:	4618      	mov	r0, r3
 800589a:	3720      	adds	r7, #32
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}

080058a0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b084      	sub	sp, #16
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	60f8      	str	r0, [r7, #12]
 80058a8:	60b9      	str	r1, [r7, #8]
 80058aa:	4613      	mov	r3, r2
 80058ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058b2:	2b20      	cmp	r3, #32
 80058b4:	d131      	bne.n	800591a <HAL_UART_Receive_IT+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d002      	beq.n	80058c2 <HAL_UART_Receive_IT+0x22>
 80058bc:	88fb      	ldrh	r3, [r7, #6]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d101      	bne.n	80058c6 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80058c2:	2301      	movs	r3, #1
 80058c4:	e02a      	b.n	800591c <HAL_UART_Receive_IT+0x7c>
    }

    __HAL_LOCK(huart);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d101      	bne.n	80058d4 <HAL_UART_Receive_IT+0x34>
 80058d0:	2302      	movs	r3, #2
 80058d2:	e023      	b.n	800591c <HAL_UART_Receive_IT+0x7c>
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2200      	movs	r2, #0
 80058e0:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a0f      	ldr	r2, [pc, #60]	; (8005924 <HAL_UART_Receive_IT+0x84>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d00e      	beq.n	800590a <HAL_UART_Receive_IT+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d007      	beq.n	800590a <HAL_UART_Receive_IT+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	681a      	ldr	r2, [r3, #0]
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005908:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 800590a:	88fb      	ldrh	r3, [r7, #6]
 800590c:	461a      	mov	r2, r3
 800590e:	68b9      	ldr	r1, [r7, #8]
 8005910:	68f8      	ldr	r0, [r7, #12]
 8005912:	f000 fe1d 	bl	8006550 <UART_Start_Receive_IT>
 8005916:	4603      	mov	r3, r0
 8005918:	e000      	b.n	800591c <HAL_UART_Receive_IT+0x7c>
  }
  else
  {
    return HAL_BUSY;
 800591a:	2302      	movs	r3, #2
  }
}
 800591c:	4618      	mov	r0, r3
 800591e:	3710      	adds	r7, #16
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}
 8005924:	40008000 	.word	0x40008000

08005928 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b088      	sub	sp, #32
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	69db      	ldr	r3, [r3, #28]
 8005936:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005948:	69fa      	ldr	r2, [r7, #28]
 800594a:	f640 030f 	movw	r3, #2063	; 0x80f
 800594e:	4013      	ands	r3, r2
 8005950:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d113      	bne.n	8005980 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005958:	69fb      	ldr	r3, [r7, #28]
 800595a:	f003 0320 	and.w	r3, r3, #32
 800595e:	2b00      	cmp	r3, #0
 8005960:	d00e      	beq.n	8005980 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005962:	69bb      	ldr	r3, [r7, #24]
 8005964:	f003 0320 	and.w	r3, r3, #32
 8005968:	2b00      	cmp	r3, #0
 800596a:	d009      	beq.n	8005980 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005970:	2b00      	cmp	r3, #0
 8005972:	f000 81ce 	beq.w	8005d12 <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	4798      	blx	r3
      }
      return;
 800597e:	e1c8      	b.n	8005d12 <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	2b00      	cmp	r3, #0
 8005984:	f000 80e3 	beq.w	8005b4e <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	f003 0301 	and.w	r3, r3, #1
 800598e:	2b00      	cmp	r3, #0
 8005990:	d105      	bne.n	800599e <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005992:	69ba      	ldr	r2, [r7, #24]
 8005994:	4ba6      	ldr	r3, [pc, #664]	; (8005c30 <HAL_UART_IRQHandler+0x308>)
 8005996:	4013      	ands	r3, r2
 8005998:	2b00      	cmp	r3, #0
 800599a:	f000 80d8 	beq.w	8005b4e <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800599e:	69fb      	ldr	r3, [r7, #28]
 80059a0:	f003 0301 	and.w	r3, r3, #1
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d010      	beq.n	80059ca <HAL_UART_IRQHandler+0xa2>
 80059a8:	69bb      	ldr	r3, [r7, #24]
 80059aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d00b      	beq.n	80059ca <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	2201      	movs	r2, #1
 80059b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059c0:	f043 0201 	orr.w	r2, r3, #1
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80059ca:	69fb      	ldr	r3, [r7, #28]
 80059cc:	f003 0302 	and.w	r3, r3, #2
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d010      	beq.n	80059f6 <HAL_UART_IRQHandler+0xce>
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	f003 0301 	and.w	r3, r3, #1
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d00b      	beq.n	80059f6 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	2202      	movs	r2, #2
 80059e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059ec:	f043 0204 	orr.w	r2, r3, #4
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80059f6:	69fb      	ldr	r3, [r7, #28]
 80059f8:	f003 0304 	and.w	r3, r3, #4
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d010      	beq.n	8005a22 <HAL_UART_IRQHandler+0xfa>
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	f003 0301 	and.w	r3, r3, #1
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d00b      	beq.n	8005a22 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	2204      	movs	r2, #4
 8005a10:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a18:	f043 0202 	orr.w	r2, r3, #2
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005a22:	69fb      	ldr	r3, [r7, #28]
 8005a24:	f003 0308 	and.w	r3, r3, #8
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d015      	beq.n	8005a58 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005a2c:	69bb      	ldr	r3, [r7, #24]
 8005a2e:	f003 0320 	and.w	r3, r3, #32
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d104      	bne.n	8005a40 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d00b      	beq.n	8005a58 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	2208      	movs	r2, #8
 8005a46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a4e:	f043 0208 	orr.w	r2, r3, #8
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005a58:	69fb      	ldr	r3, [r7, #28]
 8005a5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d011      	beq.n	8005a86 <HAL_UART_IRQHandler+0x15e>
 8005a62:	69bb      	ldr	r3, [r7, #24]
 8005a64:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d00c      	beq.n	8005a86 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a74:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a7c:	f043 0220 	orr.w	r2, r3, #32
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	f000 8142 	beq.w	8005d16 <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005a92:	69fb      	ldr	r3, [r7, #28]
 8005a94:	f003 0320 	and.w	r3, r3, #32
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d00c      	beq.n	8005ab6 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005a9c:	69bb      	ldr	r3, [r7, #24]
 8005a9e:	f003 0320 	and.w	r3, r3, #32
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d007      	beq.n	8005ab6 <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d003      	beq.n	8005ab6 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005abc:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ac8:	2b40      	cmp	r3, #64	; 0x40
 8005aca:	d004      	beq.n	8005ad6 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d031      	beq.n	8005b3a <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f000 fdc2 	bl	8006660 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ae6:	2b40      	cmp	r3, #64	; 0x40
 8005ae8:	d123      	bne.n	8005b32 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	689a      	ldr	r2, [r3, #8]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005af8:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d013      	beq.n	8005b2a <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b06:	4a4b      	ldr	r2, [pc, #300]	; (8005c34 <HAL_UART_IRQHandler+0x30c>)
 8005b08:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f7fc ff77 	bl	8002a02 <HAL_DMA_Abort_IT>
 8005b14:	4603      	mov	r3, r0
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d017      	beq.n	8005b4a <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b20:	687a      	ldr	r2, [r7, #4]
 8005b22:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005b24:	4610      	mov	r0, r2
 8005b26:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b28:	e00f      	b.n	8005b4a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f000 f908 	bl	8005d40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b30:	e00b      	b.n	8005b4a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f000 f904 	bl	8005d40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b38:	e007      	b.n	8005b4a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f000 f900 	bl	8005d40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2200      	movs	r2, #0
 8005b44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005b48:	e0e5      	b.n	8005d16 <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b4a:	bf00      	nop
    return;
 8005b4c:	e0e3      	b.n	8005d16 <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	f040 80a9 	bne.w	8005caa <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8005b58:	69fb      	ldr	r3, [r7, #28]
 8005b5a:	f003 0310 	and.w	r3, r3, #16
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	f000 80a3 	beq.w	8005caa <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8005b64:	69bb      	ldr	r3, [r7, #24]
 8005b66:	f003 0310 	and.w	r3, r3, #16
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	f000 809d 	beq.w	8005caa <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	2210      	movs	r2, #16
 8005b76:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b82:	2b40      	cmp	r3, #64	; 0x40
 8005b84:	d158      	bne.n	8005c38 <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8005b90:	893b      	ldrh	r3, [r7, #8]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	f000 80c1 	beq.w	8005d1a <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005b9e:	893a      	ldrh	r2, [r7, #8]
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	f080 80ba 	bcs.w	8005d1a <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	893a      	ldrh	r2, [r7, #8]
 8005baa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f003 0320 	and.w	r3, r3, #32
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d12a      	bne.n	8005c14 <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	681a      	ldr	r2, [r3, #0]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005bcc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	689a      	ldr	r2, [r3, #8]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f022 0201 	bic.w	r2, r2, #1
 8005bdc:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	689a      	ldr	r2, [r3, #8]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005bec:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2220      	movs	r2, #32
 8005bf2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	681a      	ldr	r2, [r3, #0]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f022 0210 	bic.w	r2, r2, #16
 8005c08:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f7fc feb9 	bl	8002986 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	1ad3      	subs	r3, r2, r3
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	4619      	mov	r1, r3
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f000 f893 	bl	8005d54 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005c2e:	e074      	b.n	8005d1a <HAL_UART_IRQHandler+0x3f2>
 8005c30:	04000120 	.word	0x04000120
 8005c34:	080066bf 	.word	0x080066bf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	1ad3      	subs	r3, r2, r3
 8005c48:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d063      	beq.n	8005d1e <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 8005c56:	897b      	ldrh	r3, [r7, #10]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d060      	beq.n	8005d1e <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	681a      	ldr	r2, [r3, #0]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005c6a:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	689a      	ldr	r2, [r3, #8]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f022 0201 	bic.w	r2, r2, #1
 8005c7a:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2220      	movs	r2, #32
 8005c80:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2200      	movs	r2, #0
 8005c86:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	681a      	ldr	r2, [r3, #0]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f022 0210 	bic.w	r2, r2, #16
 8005c9c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005c9e:	897b      	ldrh	r3, [r7, #10]
 8005ca0:	4619      	mov	r1, r3
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f000 f856 	bl	8005d54 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005ca8:	e039      	b.n	8005d1e <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005caa:	69fb      	ldr	r3, [r7, #28]
 8005cac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d00d      	beq.n	8005cd0 <HAL_UART_IRQHandler+0x3a8>
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d008      	beq.n	8005cd0 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005cc6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f000 fdff 	bl	80068cc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005cce:	e029      	b.n	8005d24 <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005cd0:	69fb      	ldr	r3, [r7, #28]
 8005cd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d00d      	beq.n	8005cf6 <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005cda:	69bb      	ldr	r3, [r7, #24]
 8005cdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d008      	beq.n	8005cf6 <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d01a      	beq.n	8005d22 <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	4798      	blx	r3
    }
    return;
 8005cf4:	e015      	b.n	8005d22 <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005cf6:	69fb      	ldr	r3, [r7, #28]
 8005cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d011      	beq.n	8005d24 <HAL_UART_IRQHandler+0x3fc>
 8005d00:	69bb      	ldr	r3, [r7, #24]
 8005d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d00c      	beq.n	8005d24 <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f000 fced 	bl	80066ea <UART_EndTransmit_IT>
    return;
 8005d10:	e008      	b.n	8005d24 <HAL_UART_IRQHandler+0x3fc>
      return;
 8005d12:	bf00      	nop
 8005d14:	e006      	b.n	8005d24 <HAL_UART_IRQHandler+0x3fc>
    return;
 8005d16:	bf00      	nop
 8005d18:	e004      	b.n	8005d24 <HAL_UART_IRQHandler+0x3fc>
      return;
 8005d1a:	bf00      	nop
 8005d1c:	e002      	b.n	8005d24 <HAL_UART_IRQHandler+0x3fc>
      return;
 8005d1e:	bf00      	nop
 8005d20:	e000      	b.n	8005d24 <HAL_UART_IRQHandler+0x3fc>
    return;
 8005d22:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005d24:	3720      	adds	r7, #32
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}
 8005d2a:	bf00      	nop

08005d2c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b083      	sub	sp, #12
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005d34:	bf00      	nop
 8005d36:	370c      	adds	r7, #12
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr

08005d40 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b083      	sub	sp, #12
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005d48:	bf00      	nop
 8005d4a:	370c      	adds	r7, #12
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr

08005d54 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b083      	sub	sp, #12
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	460b      	mov	r3, r1
 8005d5e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005d60:	bf00      	nop
 8005d62:	370c      	adds	r7, #12
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr

08005d6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d6c:	b5b0      	push	{r4, r5, r7, lr}
 8005d6e:	b088      	sub	sp, #32
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d74:	2300      	movs	r3, #0
 8005d76:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	689a      	ldr	r2, [r3, #8]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	691b      	ldr	r3, [r3, #16]
 8005d80:	431a      	orrs	r2, r3
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	695b      	ldr	r3, [r3, #20]
 8005d86:	431a      	orrs	r2, r3
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	69db      	ldr	r3, [r3, #28]
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	4bad      	ldr	r3, [pc, #692]	; (800604c <UART_SetConfig+0x2e0>)
 8005d98:	4013      	ands	r3, r2
 8005d9a:	687a      	ldr	r2, [r7, #4]
 8005d9c:	6812      	ldr	r2, [r2, #0]
 8005d9e:	69f9      	ldr	r1, [r7, #28]
 8005da0:	430b      	orrs	r3, r1
 8005da2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	68da      	ldr	r2, [r3, #12]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	430a      	orrs	r2, r1
 8005db8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	699b      	ldr	r3, [r3, #24]
 8005dbe:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4aa2      	ldr	r2, [pc, #648]	; (8006050 <UART_SetConfig+0x2e4>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d004      	beq.n	8005dd4 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6a1b      	ldr	r3, [r3, #32]
 8005dce:	69fa      	ldr	r2, [r7, #28]
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	69fa      	ldr	r2, [r7, #28]
 8005de4:	430a      	orrs	r2, r1
 8005de6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a99      	ldr	r2, [pc, #612]	; (8006054 <UART_SetConfig+0x2e8>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d121      	bne.n	8005e36 <UART_SetConfig+0xca>
 8005df2:	4b99      	ldr	r3, [pc, #612]	; (8006058 <UART_SetConfig+0x2ec>)
 8005df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005df8:	f003 0303 	and.w	r3, r3, #3
 8005dfc:	2b03      	cmp	r3, #3
 8005dfe:	d817      	bhi.n	8005e30 <UART_SetConfig+0xc4>
 8005e00:	a201      	add	r2, pc, #4	; (adr r2, 8005e08 <UART_SetConfig+0x9c>)
 8005e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e06:	bf00      	nop
 8005e08:	08005e19 	.word	0x08005e19
 8005e0c:	08005e25 	.word	0x08005e25
 8005e10:	08005e1f 	.word	0x08005e1f
 8005e14:	08005e2b 	.word	0x08005e2b
 8005e18:	2301      	movs	r3, #1
 8005e1a:	76fb      	strb	r3, [r7, #27]
 8005e1c:	e0e7      	b.n	8005fee <UART_SetConfig+0x282>
 8005e1e:	2302      	movs	r3, #2
 8005e20:	76fb      	strb	r3, [r7, #27]
 8005e22:	e0e4      	b.n	8005fee <UART_SetConfig+0x282>
 8005e24:	2304      	movs	r3, #4
 8005e26:	76fb      	strb	r3, [r7, #27]
 8005e28:	e0e1      	b.n	8005fee <UART_SetConfig+0x282>
 8005e2a:	2308      	movs	r3, #8
 8005e2c:	76fb      	strb	r3, [r7, #27]
 8005e2e:	e0de      	b.n	8005fee <UART_SetConfig+0x282>
 8005e30:	2310      	movs	r3, #16
 8005e32:	76fb      	strb	r3, [r7, #27]
 8005e34:	e0db      	b.n	8005fee <UART_SetConfig+0x282>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a88      	ldr	r2, [pc, #544]	; (800605c <UART_SetConfig+0x2f0>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d132      	bne.n	8005ea6 <UART_SetConfig+0x13a>
 8005e40:	4b85      	ldr	r3, [pc, #532]	; (8006058 <UART_SetConfig+0x2ec>)
 8005e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e46:	f003 030c 	and.w	r3, r3, #12
 8005e4a:	2b0c      	cmp	r3, #12
 8005e4c:	d828      	bhi.n	8005ea0 <UART_SetConfig+0x134>
 8005e4e:	a201      	add	r2, pc, #4	; (adr r2, 8005e54 <UART_SetConfig+0xe8>)
 8005e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e54:	08005e89 	.word	0x08005e89
 8005e58:	08005ea1 	.word	0x08005ea1
 8005e5c:	08005ea1 	.word	0x08005ea1
 8005e60:	08005ea1 	.word	0x08005ea1
 8005e64:	08005e95 	.word	0x08005e95
 8005e68:	08005ea1 	.word	0x08005ea1
 8005e6c:	08005ea1 	.word	0x08005ea1
 8005e70:	08005ea1 	.word	0x08005ea1
 8005e74:	08005e8f 	.word	0x08005e8f
 8005e78:	08005ea1 	.word	0x08005ea1
 8005e7c:	08005ea1 	.word	0x08005ea1
 8005e80:	08005ea1 	.word	0x08005ea1
 8005e84:	08005e9b 	.word	0x08005e9b
 8005e88:	2300      	movs	r3, #0
 8005e8a:	76fb      	strb	r3, [r7, #27]
 8005e8c:	e0af      	b.n	8005fee <UART_SetConfig+0x282>
 8005e8e:	2302      	movs	r3, #2
 8005e90:	76fb      	strb	r3, [r7, #27]
 8005e92:	e0ac      	b.n	8005fee <UART_SetConfig+0x282>
 8005e94:	2304      	movs	r3, #4
 8005e96:	76fb      	strb	r3, [r7, #27]
 8005e98:	e0a9      	b.n	8005fee <UART_SetConfig+0x282>
 8005e9a:	2308      	movs	r3, #8
 8005e9c:	76fb      	strb	r3, [r7, #27]
 8005e9e:	e0a6      	b.n	8005fee <UART_SetConfig+0x282>
 8005ea0:	2310      	movs	r3, #16
 8005ea2:	76fb      	strb	r3, [r7, #27]
 8005ea4:	e0a3      	b.n	8005fee <UART_SetConfig+0x282>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a6d      	ldr	r2, [pc, #436]	; (8006060 <UART_SetConfig+0x2f4>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d120      	bne.n	8005ef2 <UART_SetConfig+0x186>
 8005eb0:	4b69      	ldr	r3, [pc, #420]	; (8006058 <UART_SetConfig+0x2ec>)
 8005eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eb6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005eba:	2b30      	cmp	r3, #48	; 0x30
 8005ebc:	d013      	beq.n	8005ee6 <UART_SetConfig+0x17a>
 8005ebe:	2b30      	cmp	r3, #48	; 0x30
 8005ec0:	d814      	bhi.n	8005eec <UART_SetConfig+0x180>
 8005ec2:	2b20      	cmp	r3, #32
 8005ec4:	d009      	beq.n	8005eda <UART_SetConfig+0x16e>
 8005ec6:	2b20      	cmp	r3, #32
 8005ec8:	d810      	bhi.n	8005eec <UART_SetConfig+0x180>
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d002      	beq.n	8005ed4 <UART_SetConfig+0x168>
 8005ece:	2b10      	cmp	r3, #16
 8005ed0:	d006      	beq.n	8005ee0 <UART_SetConfig+0x174>
 8005ed2:	e00b      	b.n	8005eec <UART_SetConfig+0x180>
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	76fb      	strb	r3, [r7, #27]
 8005ed8:	e089      	b.n	8005fee <UART_SetConfig+0x282>
 8005eda:	2302      	movs	r3, #2
 8005edc:	76fb      	strb	r3, [r7, #27]
 8005ede:	e086      	b.n	8005fee <UART_SetConfig+0x282>
 8005ee0:	2304      	movs	r3, #4
 8005ee2:	76fb      	strb	r3, [r7, #27]
 8005ee4:	e083      	b.n	8005fee <UART_SetConfig+0x282>
 8005ee6:	2308      	movs	r3, #8
 8005ee8:	76fb      	strb	r3, [r7, #27]
 8005eea:	e080      	b.n	8005fee <UART_SetConfig+0x282>
 8005eec:	2310      	movs	r3, #16
 8005eee:	76fb      	strb	r3, [r7, #27]
 8005ef0:	e07d      	b.n	8005fee <UART_SetConfig+0x282>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a5b      	ldr	r2, [pc, #364]	; (8006064 <UART_SetConfig+0x2f8>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d120      	bne.n	8005f3e <UART_SetConfig+0x1d2>
 8005efc:	4b56      	ldr	r3, [pc, #344]	; (8006058 <UART_SetConfig+0x2ec>)
 8005efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f02:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005f06:	2bc0      	cmp	r3, #192	; 0xc0
 8005f08:	d013      	beq.n	8005f32 <UART_SetConfig+0x1c6>
 8005f0a:	2bc0      	cmp	r3, #192	; 0xc0
 8005f0c:	d814      	bhi.n	8005f38 <UART_SetConfig+0x1cc>
 8005f0e:	2b80      	cmp	r3, #128	; 0x80
 8005f10:	d009      	beq.n	8005f26 <UART_SetConfig+0x1ba>
 8005f12:	2b80      	cmp	r3, #128	; 0x80
 8005f14:	d810      	bhi.n	8005f38 <UART_SetConfig+0x1cc>
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d002      	beq.n	8005f20 <UART_SetConfig+0x1b4>
 8005f1a:	2b40      	cmp	r3, #64	; 0x40
 8005f1c:	d006      	beq.n	8005f2c <UART_SetConfig+0x1c0>
 8005f1e:	e00b      	b.n	8005f38 <UART_SetConfig+0x1cc>
 8005f20:	2300      	movs	r3, #0
 8005f22:	76fb      	strb	r3, [r7, #27]
 8005f24:	e063      	b.n	8005fee <UART_SetConfig+0x282>
 8005f26:	2302      	movs	r3, #2
 8005f28:	76fb      	strb	r3, [r7, #27]
 8005f2a:	e060      	b.n	8005fee <UART_SetConfig+0x282>
 8005f2c:	2304      	movs	r3, #4
 8005f2e:	76fb      	strb	r3, [r7, #27]
 8005f30:	e05d      	b.n	8005fee <UART_SetConfig+0x282>
 8005f32:	2308      	movs	r3, #8
 8005f34:	76fb      	strb	r3, [r7, #27]
 8005f36:	e05a      	b.n	8005fee <UART_SetConfig+0x282>
 8005f38:	2310      	movs	r3, #16
 8005f3a:	76fb      	strb	r3, [r7, #27]
 8005f3c:	e057      	b.n	8005fee <UART_SetConfig+0x282>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a49      	ldr	r2, [pc, #292]	; (8006068 <UART_SetConfig+0x2fc>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d125      	bne.n	8005f94 <UART_SetConfig+0x228>
 8005f48:	4b43      	ldr	r3, [pc, #268]	; (8006058 <UART_SetConfig+0x2ec>)
 8005f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f56:	d017      	beq.n	8005f88 <UART_SetConfig+0x21c>
 8005f58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f5c:	d817      	bhi.n	8005f8e <UART_SetConfig+0x222>
 8005f5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f62:	d00b      	beq.n	8005f7c <UART_SetConfig+0x210>
 8005f64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f68:	d811      	bhi.n	8005f8e <UART_SetConfig+0x222>
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d003      	beq.n	8005f76 <UART_SetConfig+0x20a>
 8005f6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f72:	d006      	beq.n	8005f82 <UART_SetConfig+0x216>
 8005f74:	e00b      	b.n	8005f8e <UART_SetConfig+0x222>
 8005f76:	2300      	movs	r3, #0
 8005f78:	76fb      	strb	r3, [r7, #27]
 8005f7a:	e038      	b.n	8005fee <UART_SetConfig+0x282>
 8005f7c:	2302      	movs	r3, #2
 8005f7e:	76fb      	strb	r3, [r7, #27]
 8005f80:	e035      	b.n	8005fee <UART_SetConfig+0x282>
 8005f82:	2304      	movs	r3, #4
 8005f84:	76fb      	strb	r3, [r7, #27]
 8005f86:	e032      	b.n	8005fee <UART_SetConfig+0x282>
 8005f88:	2308      	movs	r3, #8
 8005f8a:	76fb      	strb	r3, [r7, #27]
 8005f8c:	e02f      	b.n	8005fee <UART_SetConfig+0x282>
 8005f8e:	2310      	movs	r3, #16
 8005f90:	76fb      	strb	r3, [r7, #27]
 8005f92:	e02c      	b.n	8005fee <UART_SetConfig+0x282>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a2d      	ldr	r2, [pc, #180]	; (8006050 <UART_SetConfig+0x2e4>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d125      	bne.n	8005fea <UART_SetConfig+0x27e>
 8005f9e:	4b2e      	ldr	r3, [pc, #184]	; (8006058 <UART_SetConfig+0x2ec>)
 8005fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fa4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005fa8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005fac:	d017      	beq.n	8005fde <UART_SetConfig+0x272>
 8005fae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005fb2:	d817      	bhi.n	8005fe4 <UART_SetConfig+0x278>
 8005fb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fb8:	d00b      	beq.n	8005fd2 <UART_SetConfig+0x266>
 8005fba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fbe:	d811      	bhi.n	8005fe4 <UART_SetConfig+0x278>
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d003      	beq.n	8005fcc <UART_SetConfig+0x260>
 8005fc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fc8:	d006      	beq.n	8005fd8 <UART_SetConfig+0x26c>
 8005fca:	e00b      	b.n	8005fe4 <UART_SetConfig+0x278>
 8005fcc:	2300      	movs	r3, #0
 8005fce:	76fb      	strb	r3, [r7, #27]
 8005fd0:	e00d      	b.n	8005fee <UART_SetConfig+0x282>
 8005fd2:	2302      	movs	r3, #2
 8005fd4:	76fb      	strb	r3, [r7, #27]
 8005fd6:	e00a      	b.n	8005fee <UART_SetConfig+0x282>
 8005fd8:	2304      	movs	r3, #4
 8005fda:	76fb      	strb	r3, [r7, #27]
 8005fdc:	e007      	b.n	8005fee <UART_SetConfig+0x282>
 8005fde:	2308      	movs	r3, #8
 8005fe0:	76fb      	strb	r3, [r7, #27]
 8005fe2:	e004      	b.n	8005fee <UART_SetConfig+0x282>
 8005fe4:	2310      	movs	r3, #16
 8005fe6:	76fb      	strb	r3, [r7, #27]
 8005fe8:	e001      	b.n	8005fee <UART_SetConfig+0x282>
 8005fea:	2310      	movs	r3, #16
 8005fec:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a17      	ldr	r2, [pc, #92]	; (8006050 <UART_SetConfig+0x2e4>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	f040 8087 	bne.w	8006108 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005ffa:	7efb      	ldrb	r3, [r7, #27]
 8005ffc:	2b08      	cmp	r3, #8
 8005ffe:	d837      	bhi.n	8006070 <UART_SetConfig+0x304>
 8006000:	a201      	add	r2, pc, #4	; (adr r2, 8006008 <UART_SetConfig+0x29c>)
 8006002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006006:	bf00      	nop
 8006008:	0800602d 	.word	0x0800602d
 800600c:	08006071 	.word	0x08006071
 8006010:	08006035 	.word	0x08006035
 8006014:	08006071 	.word	0x08006071
 8006018:	0800603b 	.word	0x0800603b
 800601c:	08006071 	.word	0x08006071
 8006020:	08006071 	.word	0x08006071
 8006024:	08006071 	.word	0x08006071
 8006028:	08006043 	.word	0x08006043
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800602c:	f7fe fb46 	bl	80046bc <HAL_RCC_GetPCLK1Freq>
 8006030:	6178      	str	r0, [r7, #20]
        break;
 8006032:	e022      	b.n	800607a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006034:	4b0d      	ldr	r3, [pc, #52]	; (800606c <UART_SetConfig+0x300>)
 8006036:	617b      	str	r3, [r7, #20]
        break;
 8006038:	e01f      	b.n	800607a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800603a:	f7fe faa7 	bl	800458c <HAL_RCC_GetSysClockFreq>
 800603e:	6178      	str	r0, [r7, #20]
        break;
 8006040:	e01b      	b.n	800607a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006042:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006046:	617b      	str	r3, [r7, #20]
        break;
 8006048:	e017      	b.n	800607a <UART_SetConfig+0x30e>
 800604a:	bf00      	nop
 800604c:	efff69f3 	.word	0xefff69f3
 8006050:	40008000 	.word	0x40008000
 8006054:	40013800 	.word	0x40013800
 8006058:	40021000 	.word	0x40021000
 800605c:	40004400 	.word	0x40004400
 8006060:	40004800 	.word	0x40004800
 8006064:	40004c00 	.word	0x40004c00
 8006068:	40005000 	.word	0x40005000
 800606c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006070:	2300      	movs	r3, #0
 8006072:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006074:	2301      	movs	r3, #1
 8006076:	76bb      	strb	r3, [r7, #26]
        break;
 8006078:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	2b00      	cmp	r3, #0
 800607e:	f000 80f1 	beq.w	8006264 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	685a      	ldr	r2, [r3, #4]
 8006086:	4613      	mov	r3, r2
 8006088:	005b      	lsls	r3, r3, #1
 800608a:	4413      	add	r3, r2
 800608c:	697a      	ldr	r2, [r7, #20]
 800608e:	429a      	cmp	r2, r3
 8006090:	d305      	bcc.n	800609e <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006098:	697a      	ldr	r2, [r7, #20]
 800609a:	429a      	cmp	r2, r3
 800609c:	d902      	bls.n	80060a4 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800609e:	2301      	movs	r3, #1
 80060a0:	76bb      	strb	r3, [r7, #26]
 80060a2:	e0df      	b.n	8006264 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	4618      	mov	r0, r3
 80060a8:	f04f 0100 	mov.w	r1, #0
 80060ac:	f04f 0200 	mov.w	r2, #0
 80060b0:	f04f 0300 	mov.w	r3, #0
 80060b4:	020b      	lsls	r3, r1, #8
 80060b6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80060ba:	0202      	lsls	r2, r0, #8
 80060bc:	6879      	ldr	r1, [r7, #4]
 80060be:	6849      	ldr	r1, [r1, #4]
 80060c0:	0849      	lsrs	r1, r1, #1
 80060c2:	4608      	mov	r0, r1
 80060c4:	f04f 0100 	mov.w	r1, #0
 80060c8:	1814      	adds	r4, r2, r0
 80060ca:	eb43 0501 	adc.w	r5, r3, r1
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	461a      	mov	r2, r3
 80060d4:	f04f 0300 	mov.w	r3, #0
 80060d8:	4620      	mov	r0, r4
 80060da:	4629      	mov	r1, r5
 80060dc:	f7fa fd46 	bl	8000b6c <__aeabi_uldivmod>
 80060e0:	4602      	mov	r2, r0
 80060e2:	460b      	mov	r3, r1
 80060e4:	4613      	mov	r3, r2
 80060e6:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060ee:	d308      	bcc.n	8006102 <UART_SetConfig+0x396>
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060f6:	d204      	bcs.n	8006102 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	693a      	ldr	r2, [r7, #16]
 80060fe:	60da      	str	r2, [r3, #12]
 8006100:	e0b0      	b.n	8006264 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8006102:	2301      	movs	r3, #1
 8006104:	76bb      	strb	r3, [r7, #26]
 8006106:	e0ad      	b.n	8006264 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	69db      	ldr	r3, [r3, #28]
 800610c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006110:	d15c      	bne.n	80061cc <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8006112:	7efb      	ldrb	r3, [r7, #27]
 8006114:	2b08      	cmp	r3, #8
 8006116:	d828      	bhi.n	800616a <UART_SetConfig+0x3fe>
 8006118:	a201      	add	r2, pc, #4	; (adr r2, 8006120 <UART_SetConfig+0x3b4>)
 800611a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800611e:	bf00      	nop
 8006120:	08006145 	.word	0x08006145
 8006124:	0800614d 	.word	0x0800614d
 8006128:	08006155 	.word	0x08006155
 800612c:	0800616b 	.word	0x0800616b
 8006130:	0800615b 	.word	0x0800615b
 8006134:	0800616b 	.word	0x0800616b
 8006138:	0800616b 	.word	0x0800616b
 800613c:	0800616b 	.word	0x0800616b
 8006140:	08006163 	.word	0x08006163
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006144:	f7fe faba 	bl	80046bc <HAL_RCC_GetPCLK1Freq>
 8006148:	6178      	str	r0, [r7, #20]
        break;
 800614a:	e013      	b.n	8006174 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800614c:	f7fe facc 	bl	80046e8 <HAL_RCC_GetPCLK2Freq>
 8006150:	6178      	str	r0, [r7, #20]
        break;
 8006152:	e00f      	b.n	8006174 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006154:	4b49      	ldr	r3, [pc, #292]	; (800627c <UART_SetConfig+0x510>)
 8006156:	617b      	str	r3, [r7, #20]
        break;
 8006158:	e00c      	b.n	8006174 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800615a:	f7fe fa17 	bl	800458c <HAL_RCC_GetSysClockFreq>
 800615e:	6178      	str	r0, [r7, #20]
        break;
 8006160:	e008      	b.n	8006174 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006162:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006166:	617b      	str	r3, [r7, #20]
        break;
 8006168:	e004      	b.n	8006174 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800616a:	2300      	movs	r3, #0
 800616c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800616e:	2301      	movs	r3, #1
 8006170:	76bb      	strb	r3, [r7, #26]
        break;
 8006172:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d074      	beq.n	8006264 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	005a      	lsls	r2, r3, #1
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	085b      	lsrs	r3, r3, #1
 8006184:	441a      	add	r2, r3
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	fbb2 f3f3 	udiv	r3, r2, r3
 800618e:	b29b      	uxth	r3, r3
 8006190:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	2b0f      	cmp	r3, #15
 8006196:	d916      	bls.n	80061c6 <UART_SetConfig+0x45a>
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800619e:	d212      	bcs.n	80061c6 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	f023 030f 	bic.w	r3, r3, #15
 80061a8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	085b      	lsrs	r3, r3, #1
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	f003 0307 	and.w	r3, r3, #7
 80061b4:	b29a      	uxth	r2, r3
 80061b6:	89fb      	ldrh	r3, [r7, #14]
 80061b8:	4313      	orrs	r3, r2
 80061ba:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	89fa      	ldrh	r2, [r7, #14]
 80061c2:	60da      	str	r2, [r3, #12]
 80061c4:	e04e      	b.n	8006264 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80061c6:	2301      	movs	r3, #1
 80061c8:	76bb      	strb	r3, [r7, #26]
 80061ca:	e04b      	b.n	8006264 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80061cc:	7efb      	ldrb	r3, [r7, #27]
 80061ce:	2b08      	cmp	r3, #8
 80061d0:	d827      	bhi.n	8006222 <UART_SetConfig+0x4b6>
 80061d2:	a201      	add	r2, pc, #4	; (adr r2, 80061d8 <UART_SetConfig+0x46c>)
 80061d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061d8:	080061fd 	.word	0x080061fd
 80061dc:	08006205 	.word	0x08006205
 80061e0:	0800620d 	.word	0x0800620d
 80061e4:	08006223 	.word	0x08006223
 80061e8:	08006213 	.word	0x08006213
 80061ec:	08006223 	.word	0x08006223
 80061f0:	08006223 	.word	0x08006223
 80061f4:	08006223 	.word	0x08006223
 80061f8:	0800621b 	.word	0x0800621b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061fc:	f7fe fa5e 	bl	80046bc <HAL_RCC_GetPCLK1Freq>
 8006200:	6178      	str	r0, [r7, #20]
        break;
 8006202:	e013      	b.n	800622c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006204:	f7fe fa70 	bl	80046e8 <HAL_RCC_GetPCLK2Freq>
 8006208:	6178      	str	r0, [r7, #20]
        break;
 800620a:	e00f      	b.n	800622c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800620c:	4b1b      	ldr	r3, [pc, #108]	; (800627c <UART_SetConfig+0x510>)
 800620e:	617b      	str	r3, [r7, #20]
        break;
 8006210:	e00c      	b.n	800622c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006212:	f7fe f9bb 	bl	800458c <HAL_RCC_GetSysClockFreq>
 8006216:	6178      	str	r0, [r7, #20]
        break;
 8006218:	e008      	b.n	800622c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800621a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800621e:	617b      	str	r3, [r7, #20]
        break;
 8006220:	e004      	b.n	800622c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8006222:	2300      	movs	r3, #0
 8006224:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006226:	2301      	movs	r3, #1
 8006228:	76bb      	strb	r3, [r7, #26]
        break;
 800622a:	bf00      	nop
    }

    if (pclk != 0U)
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d018      	beq.n	8006264 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	085a      	lsrs	r2, r3, #1
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	441a      	add	r2, r3
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	fbb2 f3f3 	udiv	r3, r2, r3
 8006244:	b29b      	uxth	r3, r3
 8006246:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	2b0f      	cmp	r3, #15
 800624c:	d908      	bls.n	8006260 <UART_SetConfig+0x4f4>
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006254:	d204      	bcs.n	8006260 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	693a      	ldr	r2, [r7, #16]
 800625c:	60da      	str	r2, [r3, #12]
 800625e:	e001      	b.n	8006264 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8006260:	2301      	movs	r3, #1
 8006262:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2200      	movs	r2, #0
 8006268:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2200      	movs	r2, #0
 800626e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006270:	7ebb      	ldrb	r3, [r7, #26]
}
 8006272:	4618      	mov	r0, r3
 8006274:	3720      	adds	r7, #32
 8006276:	46bd      	mov	sp, r7
 8006278:	bdb0      	pop	{r4, r5, r7, pc}
 800627a:	bf00      	nop
 800627c:	00f42400 	.word	0x00f42400

08006280 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006280:	b480      	push	{r7}
 8006282:	b083      	sub	sp, #12
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800628c:	f003 0301 	and.w	r3, r3, #1
 8006290:	2b00      	cmp	r3, #0
 8006292:	d00a      	beq.n	80062aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	430a      	orrs	r2, r1
 80062a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ae:	f003 0302 	and.w	r3, r3, #2
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d00a      	beq.n	80062cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	430a      	orrs	r2, r1
 80062ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d0:	f003 0304 	and.w	r3, r3, #4
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d00a      	beq.n	80062ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	430a      	orrs	r2, r1
 80062ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f2:	f003 0308 	and.w	r3, r3, #8
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d00a      	beq.n	8006310 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	430a      	orrs	r2, r1
 800630e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006314:	f003 0310 	and.w	r3, r3, #16
 8006318:	2b00      	cmp	r3, #0
 800631a:	d00a      	beq.n	8006332 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	430a      	orrs	r2, r1
 8006330:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006336:	f003 0320 	and.w	r3, r3, #32
 800633a:	2b00      	cmp	r3, #0
 800633c:	d00a      	beq.n	8006354 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	689b      	ldr	r3, [r3, #8]
 8006344:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	430a      	orrs	r2, r1
 8006352:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800635c:	2b00      	cmp	r3, #0
 800635e:	d01a      	beq.n	8006396 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	430a      	orrs	r2, r1
 8006374:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800637a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800637e:	d10a      	bne.n	8006396 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	430a      	orrs	r2, r1
 8006394:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800639a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d00a      	beq.n	80063b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	430a      	orrs	r2, r1
 80063b6:	605a      	str	r2, [r3, #4]
  }
}
 80063b8:	bf00      	nop
 80063ba:	370c      	adds	r7, #12
 80063bc:	46bd      	mov	sp, r7
 80063be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c2:	4770      	bx	lr

080063c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b086      	sub	sp, #24
 80063c8:	af02      	add	r7, sp, #8
 80063ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2200      	movs	r2, #0
 80063d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80063d4:	f7fc f996 	bl	8002704 <HAL_GetTick>
 80063d8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f003 0308 	and.w	r3, r3, #8
 80063e4:	2b08      	cmp	r3, #8
 80063e6:	d10e      	bne.n	8006406 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80063ec:	9300      	str	r3, [sp, #0]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2200      	movs	r2, #0
 80063f2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f000 f82d 	bl	8006456 <UART_WaitOnFlagUntilTimeout>
 80063fc:	4603      	mov	r3, r0
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d001      	beq.n	8006406 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006402:	2303      	movs	r3, #3
 8006404:	e023      	b.n	800644e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f003 0304 	and.w	r3, r3, #4
 8006410:	2b04      	cmp	r3, #4
 8006412:	d10e      	bne.n	8006432 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006414:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006418:	9300      	str	r3, [sp, #0]
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2200      	movs	r2, #0
 800641e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f000 f817 	bl	8006456 <UART_WaitOnFlagUntilTimeout>
 8006428:	4603      	mov	r3, r0
 800642a:	2b00      	cmp	r3, #0
 800642c:	d001      	beq.n	8006432 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800642e:	2303      	movs	r3, #3
 8006430:	e00d      	b.n	800644e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2220      	movs	r2, #32
 8006436:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2220      	movs	r2, #32
 800643c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2200      	movs	r2, #0
 8006442:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2200      	movs	r2, #0
 8006448:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800644c:	2300      	movs	r3, #0
}
 800644e:	4618      	mov	r0, r3
 8006450:	3710      	adds	r7, #16
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}

08006456 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006456:	b580      	push	{r7, lr}
 8006458:	b084      	sub	sp, #16
 800645a:	af00      	add	r7, sp, #0
 800645c:	60f8      	str	r0, [r7, #12]
 800645e:	60b9      	str	r1, [r7, #8]
 8006460:	603b      	str	r3, [r7, #0]
 8006462:	4613      	mov	r3, r2
 8006464:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006466:	e05e      	b.n	8006526 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006468:	69bb      	ldr	r3, [r7, #24]
 800646a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800646e:	d05a      	beq.n	8006526 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006470:	f7fc f948 	bl	8002704 <HAL_GetTick>
 8006474:	4602      	mov	r2, r0
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	1ad3      	subs	r3, r2, r3
 800647a:	69ba      	ldr	r2, [r7, #24]
 800647c:	429a      	cmp	r2, r3
 800647e:	d302      	bcc.n	8006486 <UART_WaitOnFlagUntilTimeout+0x30>
 8006480:	69bb      	ldr	r3, [r7, #24]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d11b      	bne.n	80064be <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006494:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	689a      	ldr	r2, [r3, #8]
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f022 0201 	bic.w	r2, r2, #1
 80064a4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2220      	movs	r2, #32
 80064aa:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2220      	movs	r2, #32
 80064b0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2200      	movs	r2, #0
 80064b6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80064ba:	2303      	movs	r3, #3
 80064bc:	e043      	b.n	8006546 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f003 0304 	and.w	r3, r3, #4
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d02c      	beq.n	8006526 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	69db      	ldr	r3, [r3, #28]
 80064d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064da:	d124      	bne.n	8006526 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80064e4:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	681a      	ldr	r2, [r3, #0]
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80064f4:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	689a      	ldr	r2, [r3, #8]
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f022 0201 	bic.w	r2, r2, #1
 8006504:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2220      	movs	r2, #32
 800650a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	2220      	movs	r2, #32
 8006510:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2220      	movs	r2, #32
 8006516:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2200      	movs	r2, #0
 800651e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006522:	2303      	movs	r3, #3
 8006524:	e00f      	b.n	8006546 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	69da      	ldr	r2, [r3, #28]
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	4013      	ands	r3, r2
 8006530:	68ba      	ldr	r2, [r7, #8]
 8006532:	429a      	cmp	r2, r3
 8006534:	bf0c      	ite	eq
 8006536:	2301      	moveq	r3, #1
 8006538:	2300      	movne	r3, #0
 800653a:	b2db      	uxtb	r3, r3
 800653c:	461a      	mov	r2, r3
 800653e:	79fb      	ldrb	r3, [r7, #7]
 8006540:	429a      	cmp	r2, r3
 8006542:	d091      	beq.n	8006468 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006544:	2300      	movs	r3, #0
}
 8006546:	4618      	mov	r0, r3
 8006548:	3710      	adds	r7, #16
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
	...

08006550 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006550:	b480      	push	{r7}
 8006552:	b085      	sub	sp, #20
 8006554:	af00      	add	r7, sp, #0
 8006556:	60f8      	str	r0, [r7, #12]
 8006558:	60b9      	str	r1, [r7, #8]
 800655a:	4613      	mov	r3, r2
 800655c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	68ba      	ldr	r2, [r7, #8]
 8006562:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	88fa      	ldrh	r2, [r7, #6]
 8006568:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	88fa      	ldrh	r2, [r7, #6]
 8006570:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2200      	movs	r2, #0
 8006578:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006582:	d10e      	bne.n	80065a2 <UART_Start_Receive_IT+0x52>
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	691b      	ldr	r3, [r3, #16]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d105      	bne.n	8006598 <UART_Start_Receive_IT+0x48>
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006592:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006596:	e02d      	b.n	80065f4 <UART_Start_Receive_IT+0xa4>
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	22ff      	movs	r2, #255	; 0xff
 800659c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80065a0:	e028      	b.n	80065f4 <UART_Start_Receive_IT+0xa4>
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d10d      	bne.n	80065c6 <UART_Start_Receive_IT+0x76>
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	691b      	ldr	r3, [r3, #16]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d104      	bne.n	80065bc <UART_Start_Receive_IT+0x6c>
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	22ff      	movs	r2, #255	; 0xff
 80065b6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80065ba:	e01b      	b.n	80065f4 <UART_Start_Receive_IT+0xa4>
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	227f      	movs	r2, #127	; 0x7f
 80065c0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80065c4:	e016      	b.n	80065f4 <UART_Start_Receive_IT+0xa4>
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80065ce:	d10d      	bne.n	80065ec <UART_Start_Receive_IT+0x9c>
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	691b      	ldr	r3, [r3, #16]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d104      	bne.n	80065e2 <UART_Start_Receive_IT+0x92>
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	227f      	movs	r2, #127	; 0x7f
 80065dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80065e0:	e008      	b.n	80065f4 <UART_Start_Receive_IT+0xa4>
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	223f      	movs	r2, #63	; 0x3f
 80065e6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80065ea:	e003      	b.n	80065f4 <UART_Start_Receive_IT+0xa4>
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2200      	movs	r2, #0
 80065f0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2200      	movs	r2, #0
 80065f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2222      	movs	r2, #34	; 0x22
 8006600:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	689a      	ldr	r2, [r3, #8]
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f042 0201 	orr.w	r2, r2, #1
 8006610:	609a      	str	r2, [r3, #8]
    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	689b      	ldr	r3, [r3, #8]
 8006616:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800661a:	d107      	bne.n	800662c <UART_Start_Receive_IT+0xdc>
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	691b      	ldr	r3, [r3, #16]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d103      	bne.n	800662c <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	4a0c      	ldr	r2, [pc, #48]	; (8006658 <UART_Start_Receive_IT+0x108>)
 8006628:	665a      	str	r2, [r3, #100]	; 0x64
 800662a:	e002      	b.n	8006632 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	4a0b      	ldr	r2, [pc, #44]	; (800665c <UART_Start_Receive_IT+0x10c>)
 8006630:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2200      	movs	r2, #0
 8006636:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	681a      	ldr	r2, [r3, #0]
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8006648:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800664a:	2300      	movs	r3, #0
}
 800664c:	4618      	mov	r0, r3
 800664e:	3714      	adds	r7, #20
 8006650:	46bd      	mov	sp, r7
 8006652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006656:	4770      	bx	lr
 8006658:	080067f5 	.word	0x080067f5
 800665c:	0800671d 	.word	0x0800671d

08006660 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006660:	b480      	push	{r7}
 8006662:	b083      	sub	sp, #12
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	681a      	ldr	r2, [r3, #0]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006676:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	689a      	ldr	r2, [r3, #8]
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f022 0201 	bic.w	r2, r2, #1
 8006686:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800668c:	2b01      	cmp	r3, #1
 800668e:	d107      	bne.n	80066a0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f022 0210 	bic.w	r2, r2, #16
 800669e:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2220      	movs	r2, #32
 80066a4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2200      	movs	r2, #0
 80066aa:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2200      	movs	r2, #0
 80066b0:	665a      	str	r2, [r3, #100]	; 0x64
}
 80066b2:	bf00      	nop
 80066b4:	370c      	adds	r7, #12
 80066b6:	46bd      	mov	sp, r7
 80066b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066bc:	4770      	bx	lr

080066be <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80066be:	b580      	push	{r7, lr}
 80066c0:	b084      	sub	sp, #16
 80066c2:	af00      	add	r7, sp, #0
 80066c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066ca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2200      	movs	r2, #0
 80066d0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2200      	movs	r2, #0
 80066d8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80066dc:	68f8      	ldr	r0, [r7, #12]
 80066de:	f7ff fb2f 	bl	8005d40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80066e2:	bf00      	nop
 80066e4:	3710      	adds	r7, #16
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}

080066ea <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80066ea:	b580      	push	{r7, lr}
 80066ec:	b082      	sub	sp, #8
 80066ee:	af00      	add	r7, sp, #0
 80066f0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	681a      	ldr	r2, [r3, #0]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006700:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2220      	movs	r2, #32
 8006706:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2200      	movs	r2, #0
 800670c:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f7ff fb0c 	bl	8005d2c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006714:	bf00      	nop
 8006716:	3708      	adds	r7, #8
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}

0800671c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b084      	sub	sp, #16
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800672a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006730:	2b22      	cmp	r3, #34	; 0x22
 8006732:	d151      	bne.n	80067d8 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800673a:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800673c:	89bb      	ldrh	r3, [r7, #12]
 800673e:	b2d9      	uxtb	r1, r3
 8006740:	89fb      	ldrh	r3, [r7, #14]
 8006742:	b2da      	uxtb	r2, r3
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006748:	400a      	ands	r2, r1
 800674a:	b2d2      	uxtb	r2, r2
 800674c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006752:	1c5a      	adds	r2, r3, #1
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800675e:	b29b      	uxth	r3, r3
 8006760:	3b01      	subs	r3, #1
 8006762:	b29a      	uxth	r2, r3
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006770:	b29b      	uxth	r3, r3
 8006772:	2b00      	cmp	r3, #0
 8006774:	d13a      	bne.n	80067ec <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	681a      	ldr	r2, [r3, #0]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006784:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	689a      	ldr	r2, [r3, #8]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f022 0201 	bic.w	r2, r2, #1
 8006794:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2220      	movs	r2, #32
 800679a:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2200      	movs	r2, #0
 80067a0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067a6:	2b01      	cmp	r3, #1
 80067a8:	d10f      	bne.n	80067ca <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	681a      	ldr	r2, [r3, #0]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f022 0210 	bic.w	r2, r2, #16
 80067b8:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80067c0:	4619      	mov	r1, r3
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f7ff fac6 	bl	8005d54 <HAL_UARTEx_RxEventCallback>
 80067c8:	e002      	b.n	80067d0 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f7fb fca0 	bl	8002110 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2200      	movs	r2, #0
 80067d4:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80067d6:	e009      	b.n	80067ec <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	8b1b      	ldrh	r3, [r3, #24]
 80067de:	b29a      	uxth	r2, r3
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f042 0208 	orr.w	r2, r2, #8
 80067e8:	b292      	uxth	r2, r2
 80067ea:	831a      	strh	r2, [r3, #24]
}
 80067ec:	bf00      	nop
 80067ee:	3710      	adds	r7, #16
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}

080067f4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b084      	sub	sp, #16
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006802:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006808:	2b22      	cmp	r3, #34	; 0x22
 800680a:	d151      	bne.n	80068b0 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006812:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006818:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800681a:	89ba      	ldrh	r2, [r7, #12]
 800681c:	89fb      	ldrh	r3, [r7, #14]
 800681e:	4013      	ands	r3, r2
 8006820:	b29a      	uxth	r2, r3
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800682a:	1c9a      	adds	r2, r3, #2
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006836:	b29b      	uxth	r3, r3
 8006838:	3b01      	subs	r3, #1
 800683a:	b29a      	uxth	r2, r3
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006848:	b29b      	uxth	r3, r3
 800684a:	2b00      	cmp	r3, #0
 800684c:	d13a      	bne.n	80068c4 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	681a      	ldr	r2, [r3, #0]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800685c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	689a      	ldr	r2, [r3, #8]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f022 0201 	bic.w	r2, r2, #1
 800686c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2220      	movs	r2, #32
 8006872:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2200      	movs	r2, #0
 8006878:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800687e:	2b01      	cmp	r3, #1
 8006880:	d10f      	bne.n	80068a2 <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	681a      	ldr	r2, [r3, #0]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f022 0210 	bic.w	r2, r2, #16
 8006890:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006898:	4619      	mov	r1, r3
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f7ff fa5a 	bl	8005d54 <HAL_UARTEx_RxEventCallback>
 80068a0:	e002      	b.n	80068a8 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f7fb fc34 	bl	8002110 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2200      	movs	r2, #0
 80068ac:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80068ae:	e009      	b.n	80068c4 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	8b1b      	ldrh	r3, [r3, #24]
 80068b6:	b29a      	uxth	r2, r3
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f042 0208 	orr.w	r2, r2, #8
 80068c0:	b292      	uxth	r2, r2
 80068c2:	831a      	strh	r2, [r3, #24]
}
 80068c4:	bf00      	nop
 80068c6:	3710      	adds	r7, #16
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}

080068cc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b083      	sub	sp, #12
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80068d4:	bf00      	nop
 80068d6:	370c      	adds	r7, #12
 80068d8:	46bd      	mov	sp, r7
 80068da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068de:	4770      	bx	lr

080068e0 <__errno>:
 80068e0:	4b01      	ldr	r3, [pc, #4]	; (80068e8 <__errno+0x8>)
 80068e2:	6818      	ldr	r0, [r3, #0]
 80068e4:	4770      	bx	lr
 80068e6:	bf00      	nop
 80068e8:	2000000c 	.word	0x2000000c

080068ec <__libc_init_array>:
 80068ec:	b570      	push	{r4, r5, r6, lr}
 80068ee:	4d0d      	ldr	r5, [pc, #52]	; (8006924 <__libc_init_array+0x38>)
 80068f0:	4c0d      	ldr	r4, [pc, #52]	; (8006928 <__libc_init_array+0x3c>)
 80068f2:	1b64      	subs	r4, r4, r5
 80068f4:	10a4      	asrs	r4, r4, #2
 80068f6:	2600      	movs	r6, #0
 80068f8:	42a6      	cmp	r6, r4
 80068fa:	d109      	bne.n	8006910 <__libc_init_array+0x24>
 80068fc:	4d0b      	ldr	r5, [pc, #44]	; (800692c <__libc_init_array+0x40>)
 80068fe:	4c0c      	ldr	r4, [pc, #48]	; (8006930 <__libc_init_array+0x44>)
 8006900:	f000 fc4e 	bl	80071a0 <_init>
 8006904:	1b64      	subs	r4, r4, r5
 8006906:	10a4      	asrs	r4, r4, #2
 8006908:	2600      	movs	r6, #0
 800690a:	42a6      	cmp	r6, r4
 800690c:	d105      	bne.n	800691a <__libc_init_array+0x2e>
 800690e:	bd70      	pop	{r4, r5, r6, pc}
 8006910:	f855 3b04 	ldr.w	r3, [r5], #4
 8006914:	4798      	blx	r3
 8006916:	3601      	adds	r6, #1
 8006918:	e7ee      	b.n	80068f8 <__libc_init_array+0xc>
 800691a:	f855 3b04 	ldr.w	r3, [r5], #4
 800691e:	4798      	blx	r3
 8006920:	3601      	adds	r6, #1
 8006922:	e7f2      	b.n	800690a <__libc_init_array+0x1e>
 8006924:	080072d8 	.word	0x080072d8
 8006928:	080072d8 	.word	0x080072d8
 800692c:	080072d8 	.word	0x080072d8
 8006930:	080072dc 	.word	0x080072dc

08006934 <memset>:
 8006934:	4402      	add	r2, r0
 8006936:	4603      	mov	r3, r0
 8006938:	4293      	cmp	r3, r2
 800693a:	d100      	bne.n	800693e <memset+0xa>
 800693c:	4770      	bx	lr
 800693e:	f803 1b01 	strb.w	r1, [r3], #1
 8006942:	e7f9      	b.n	8006938 <memset+0x4>

08006944 <siprintf>:
 8006944:	b40e      	push	{r1, r2, r3}
 8006946:	b500      	push	{lr}
 8006948:	b09c      	sub	sp, #112	; 0x70
 800694a:	ab1d      	add	r3, sp, #116	; 0x74
 800694c:	9002      	str	r0, [sp, #8]
 800694e:	9006      	str	r0, [sp, #24]
 8006950:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006954:	4809      	ldr	r0, [pc, #36]	; (800697c <siprintf+0x38>)
 8006956:	9107      	str	r1, [sp, #28]
 8006958:	9104      	str	r1, [sp, #16]
 800695a:	4909      	ldr	r1, [pc, #36]	; (8006980 <siprintf+0x3c>)
 800695c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006960:	9105      	str	r1, [sp, #20]
 8006962:	6800      	ldr	r0, [r0, #0]
 8006964:	9301      	str	r3, [sp, #4]
 8006966:	a902      	add	r1, sp, #8
 8006968:	f000 f868 	bl	8006a3c <_svfiprintf_r>
 800696c:	9b02      	ldr	r3, [sp, #8]
 800696e:	2200      	movs	r2, #0
 8006970:	701a      	strb	r2, [r3, #0]
 8006972:	b01c      	add	sp, #112	; 0x70
 8006974:	f85d eb04 	ldr.w	lr, [sp], #4
 8006978:	b003      	add	sp, #12
 800697a:	4770      	bx	lr
 800697c:	2000000c 	.word	0x2000000c
 8006980:	ffff0208 	.word	0xffff0208

08006984 <__ssputs_r>:
 8006984:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006988:	688e      	ldr	r6, [r1, #8]
 800698a:	429e      	cmp	r6, r3
 800698c:	4682      	mov	sl, r0
 800698e:	460c      	mov	r4, r1
 8006990:	4690      	mov	r8, r2
 8006992:	461f      	mov	r7, r3
 8006994:	d838      	bhi.n	8006a08 <__ssputs_r+0x84>
 8006996:	898a      	ldrh	r2, [r1, #12]
 8006998:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800699c:	d032      	beq.n	8006a04 <__ssputs_r+0x80>
 800699e:	6825      	ldr	r5, [r4, #0]
 80069a0:	6909      	ldr	r1, [r1, #16]
 80069a2:	eba5 0901 	sub.w	r9, r5, r1
 80069a6:	6965      	ldr	r5, [r4, #20]
 80069a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80069ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80069b0:	3301      	adds	r3, #1
 80069b2:	444b      	add	r3, r9
 80069b4:	106d      	asrs	r5, r5, #1
 80069b6:	429d      	cmp	r5, r3
 80069b8:	bf38      	it	cc
 80069ba:	461d      	movcc	r5, r3
 80069bc:	0553      	lsls	r3, r2, #21
 80069be:	d531      	bpl.n	8006a24 <__ssputs_r+0xa0>
 80069c0:	4629      	mov	r1, r5
 80069c2:	f000 fb47 	bl	8007054 <_malloc_r>
 80069c6:	4606      	mov	r6, r0
 80069c8:	b950      	cbnz	r0, 80069e0 <__ssputs_r+0x5c>
 80069ca:	230c      	movs	r3, #12
 80069cc:	f8ca 3000 	str.w	r3, [sl]
 80069d0:	89a3      	ldrh	r3, [r4, #12]
 80069d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069d6:	81a3      	strh	r3, [r4, #12]
 80069d8:	f04f 30ff 	mov.w	r0, #4294967295
 80069dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069e0:	6921      	ldr	r1, [r4, #16]
 80069e2:	464a      	mov	r2, r9
 80069e4:	f000 fabe 	bl	8006f64 <memcpy>
 80069e8:	89a3      	ldrh	r3, [r4, #12]
 80069ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80069ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069f2:	81a3      	strh	r3, [r4, #12]
 80069f4:	6126      	str	r6, [r4, #16]
 80069f6:	6165      	str	r5, [r4, #20]
 80069f8:	444e      	add	r6, r9
 80069fa:	eba5 0509 	sub.w	r5, r5, r9
 80069fe:	6026      	str	r6, [r4, #0]
 8006a00:	60a5      	str	r5, [r4, #8]
 8006a02:	463e      	mov	r6, r7
 8006a04:	42be      	cmp	r6, r7
 8006a06:	d900      	bls.n	8006a0a <__ssputs_r+0x86>
 8006a08:	463e      	mov	r6, r7
 8006a0a:	4632      	mov	r2, r6
 8006a0c:	6820      	ldr	r0, [r4, #0]
 8006a0e:	4641      	mov	r1, r8
 8006a10:	f000 fab6 	bl	8006f80 <memmove>
 8006a14:	68a3      	ldr	r3, [r4, #8]
 8006a16:	6822      	ldr	r2, [r4, #0]
 8006a18:	1b9b      	subs	r3, r3, r6
 8006a1a:	4432      	add	r2, r6
 8006a1c:	60a3      	str	r3, [r4, #8]
 8006a1e:	6022      	str	r2, [r4, #0]
 8006a20:	2000      	movs	r0, #0
 8006a22:	e7db      	b.n	80069dc <__ssputs_r+0x58>
 8006a24:	462a      	mov	r2, r5
 8006a26:	f000 fb6f 	bl	8007108 <_realloc_r>
 8006a2a:	4606      	mov	r6, r0
 8006a2c:	2800      	cmp	r0, #0
 8006a2e:	d1e1      	bne.n	80069f4 <__ssputs_r+0x70>
 8006a30:	6921      	ldr	r1, [r4, #16]
 8006a32:	4650      	mov	r0, sl
 8006a34:	f000 fabe 	bl	8006fb4 <_free_r>
 8006a38:	e7c7      	b.n	80069ca <__ssputs_r+0x46>
	...

08006a3c <_svfiprintf_r>:
 8006a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a40:	4698      	mov	r8, r3
 8006a42:	898b      	ldrh	r3, [r1, #12]
 8006a44:	061b      	lsls	r3, r3, #24
 8006a46:	b09d      	sub	sp, #116	; 0x74
 8006a48:	4607      	mov	r7, r0
 8006a4a:	460d      	mov	r5, r1
 8006a4c:	4614      	mov	r4, r2
 8006a4e:	d50e      	bpl.n	8006a6e <_svfiprintf_r+0x32>
 8006a50:	690b      	ldr	r3, [r1, #16]
 8006a52:	b963      	cbnz	r3, 8006a6e <_svfiprintf_r+0x32>
 8006a54:	2140      	movs	r1, #64	; 0x40
 8006a56:	f000 fafd 	bl	8007054 <_malloc_r>
 8006a5a:	6028      	str	r0, [r5, #0]
 8006a5c:	6128      	str	r0, [r5, #16]
 8006a5e:	b920      	cbnz	r0, 8006a6a <_svfiprintf_r+0x2e>
 8006a60:	230c      	movs	r3, #12
 8006a62:	603b      	str	r3, [r7, #0]
 8006a64:	f04f 30ff 	mov.w	r0, #4294967295
 8006a68:	e0d1      	b.n	8006c0e <_svfiprintf_r+0x1d2>
 8006a6a:	2340      	movs	r3, #64	; 0x40
 8006a6c:	616b      	str	r3, [r5, #20]
 8006a6e:	2300      	movs	r3, #0
 8006a70:	9309      	str	r3, [sp, #36]	; 0x24
 8006a72:	2320      	movs	r3, #32
 8006a74:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006a78:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a7c:	2330      	movs	r3, #48	; 0x30
 8006a7e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006c28 <_svfiprintf_r+0x1ec>
 8006a82:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006a86:	f04f 0901 	mov.w	r9, #1
 8006a8a:	4623      	mov	r3, r4
 8006a8c:	469a      	mov	sl, r3
 8006a8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a92:	b10a      	cbz	r2, 8006a98 <_svfiprintf_r+0x5c>
 8006a94:	2a25      	cmp	r2, #37	; 0x25
 8006a96:	d1f9      	bne.n	8006a8c <_svfiprintf_r+0x50>
 8006a98:	ebba 0b04 	subs.w	fp, sl, r4
 8006a9c:	d00b      	beq.n	8006ab6 <_svfiprintf_r+0x7a>
 8006a9e:	465b      	mov	r3, fp
 8006aa0:	4622      	mov	r2, r4
 8006aa2:	4629      	mov	r1, r5
 8006aa4:	4638      	mov	r0, r7
 8006aa6:	f7ff ff6d 	bl	8006984 <__ssputs_r>
 8006aaa:	3001      	adds	r0, #1
 8006aac:	f000 80aa 	beq.w	8006c04 <_svfiprintf_r+0x1c8>
 8006ab0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ab2:	445a      	add	r2, fp
 8006ab4:	9209      	str	r2, [sp, #36]	; 0x24
 8006ab6:	f89a 3000 	ldrb.w	r3, [sl]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	f000 80a2 	beq.w	8006c04 <_svfiprintf_r+0x1c8>
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	f04f 32ff 	mov.w	r2, #4294967295
 8006ac6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006aca:	f10a 0a01 	add.w	sl, sl, #1
 8006ace:	9304      	str	r3, [sp, #16]
 8006ad0:	9307      	str	r3, [sp, #28]
 8006ad2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006ad6:	931a      	str	r3, [sp, #104]	; 0x68
 8006ad8:	4654      	mov	r4, sl
 8006ada:	2205      	movs	r2, #5
 8006adc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ae0:	4851      	ldr	r0, [pc, #324]	; (8006c28 <_svfiprintf_r+0x1ec>)
 8006ae2:	f7f9 fb75 	bl	80001d0 <memchr>
 8006ae6:	9a04      	ldr	r2, [sp, #16]
 8006ae8:	b9d8      	cbnz	r0, 8006b22 <_svfiprintf_r+0xe6>
 8006aea:	06d0      	lsls	r0, r2, #27
 8006aec:	bf44      	itt	mi
 8006aee:	2320      	movmi	r3, #32
 8006af0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006af4:	0711      	lsls	r1, r2, #28
 8006af6:	bf44      	itt	mi
 8006af8:	232b      	movmi	r3, #43	; 0x2b
 8006afa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006afe:	f89a 3000 	ldrb.w	r3, [sl]
 8006b02:	2b2a      	cmp	r3, #42	; 0x2a
 8006b04:	d015      	beq.n	8006b32 <_svfiprintf_r+0xf6>
 8006b06:	9a07      	ldr	r2, [sp, #28]
 8006b08:	4654      	mov	r4, sl
 8006b0a:	2000      	movs	r0, #0
 8006b0c:	f04f 0c0a 	mov.w	ip, #10
 8006b10:	4621      	mov	r1, r4
 8006b12:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b16:	3b30      	subs	r3, #48	; 0x30
 8006b18:	2b09      	cmp	r3, #9
 8006b1a:	d94e      	bls.n	8006bba <_svfiprintf_r+0x17e>
 8006b1c:	b1b0      	cbz	r0, 8006b4c <_svfiprintf_r+0x110>
 8006b1e:	9207      	str	r2, [sp, #28]
 8006b20:	e014      	b.n	8006b4c <_svfiprintf_r+0x110>
 8006b22:	eba0 0308 	sub.w	r3, r0, r8
 8006b26:	fa09 f303 	lsl.w	r3, r9, r3
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	9304      	str	r3, [sp, #16]
 8006b2e:	46a2      	mov	sl, r4
 8006b30:	e7d2      	b.n	8006ad8 <_svfiprintf_r+0x9c>
 8006b32:	9b03      	ldr	r3, [sp, #12]
 8006b34:	1d19      	adds	r1, r3, #4
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	9103      	str	r1, [sp, #12]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	bfbb      	ittet	lt
 8006b3e:	425b      	neglt	r3, r3
 8006b40:	f042 0202 	orrlt.w	r2, r2, #2
 8006b44:	9307      	strge	r3, [sp, #28]
 8006b46:	9307      	strlt	r3, [sp, #28]
 8006b48:	bfb8      	it	lt
 8006b4a:	9204      	strlt	r2, [sp, #16]
 8006b4c:	7823      	ldrb	r3, [r4, #0]
 8006b4e:	2b2e      	cmp	r3, #46	; 0x2e
 8006b50:	d10c      	bne.n	8006b6c <_svfiprintf_r+0x130>
 8006b52:	7863      	ldrb	r3, [r4, #1]
 8006b54:	2b2a      	cmp	r3, #42	; 0x2a
 8006b56:	d135      	bne.n	8006bc4 <_svfiprintf_r+0x188>
 8006b58:	9b03      	ldr	r3, [sp, #12]
 8006b5a:	1d1a      	adds	r2, r3, #4
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	9203      	str	r2, [sp, #12]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	bfb8      	it	lt
 8006b64:	f04f 33ff 	movlt.w	r3, #4294967295
 8006b68:	3402      	adds	r4, #2
 8006b6a:	9305      	str	r3, [sp, #20]
 8006b6c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006c38 <_svfiprintf_r+0x1fc>
 8006b70:	7821      	ldrb	r1, [r4, #0]
 8006b72:	2203      	movs	r2, #3
 8006b74:	4650      	mov	r0, sl
 8006b76:	f7f9 fb2b 	bl	80001d0 <memchr>
 8006b7a:	b140      	cbz	r0, 8006b8e <_svfiprintf_r+0x152>
 8006b7c:	2340      	movs	r3, #64	; 0x40
 8006b7e:	eba0 000a 	sub.w	r0, r0, sl
 8006b82:	fa03 f000 	lsl.w	r0, r3, r0
 8006b86:	9b04      	ldr	r3, [sp, #16]
 8006b88:	4303      	orrs	r3, r0
 8006b8a:	3401      	adds	r4, #1
 8006b8c:	9304      	str	r3, [sp, #16]
 8006b8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b92:	4826      	ldr	r0, [pc, #152]	; (8006c2c <_svfiprintf_r+0x1f0>)
 8006b94:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006b98:	2206      	movs	r2, #6
 8006b9a:	f7f9 fb19 	bl	80001d0 <memchr>
 8006b9e:	2800      	cmp	r0, #0
 8006ba0:	d038      	beq.n	8006c14 <_svfiprintf_r+0x1d8>
 8006ba2:	4b23      	ldr	r3, [pc, #140]	; (8006c30 <_svfiprintf_r+0x1f4>)
 8006ba4:	bb1b      	cbnz	r3, 8006bee <_svfiprintf_r+0x1b2>
 8006ba6:	9b03      	ldr	r3, [sp, #12]
 8006ba8:	3307      	adds	r3, #7
 8006baa:	f023 0307 	bic.w	r3, r3, #7
 8006bae:	3308      	adds	r3, #8
 8006bb0:	9303      	str	r3, [sp, #12]
 8006bb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bb4:	4433      	add	r3, r6
 8006bb6:	9309      	str	r3, [sp, #36]	; 0x24
 8006bb8:	e767      	b.n	8006a8a <_svfiprintf_r+0x4e>
 8006bba:	fb0c 3202 	mla	r2, ip, r2, r3
 8006bbe:	460c      	mov	r4, r1
 8006bc0:	2001      	movs	r0, #1
 8006bc2:	e7a5      	b.n	8006b10 <_svfiprintf_r+0xd4>
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	3401      	adds	r4, #1
 8006bc8:	9305      	str	r3, [sp, #20]
 8006bca:	4619      	mov	r1, r3
 8006bcc:	f04f 0c0a 	mov.w	ip, #10
 8006bd0:	4620      	mov	r0, r4
 8006bd2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006bd6:	3a30      	subs	r2, #48	; 0x30
 8006bd8:	2a09      	cmp	r2, #9
 8006bda:	d903      	bls.n	8006be4 <_svfiprintf_r+0x1a8>
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d0c5      	beq.n	8006b6c <_svfiprintf_r+0x130>
 8006be0:	9105      	str	r1, [sp, #20]
 8006be2:	e7c3      	b.n	8006b6c <_svfiprintf_r+0x130>
 8006be4:	fb0c 2101 	mla	r1, ip, r1, r2
 8006be8:	4604      	mov	r4, r0
 8006bea:	2301      	movs	r3, #1
 8006bec:	e7f0      	b.n	8006bd0 <_svfiprintf_r+0x194>
 8006bee:	ab03      	add	r3, sp, #12
 8006bf0:	9300      	str	r3, [sp, #0]
 8006bf2:	462a      	mov	r2, r5
 8006bf4:	4b0f      	ldr	r3, [pc, #60]	; (8006c34 <_svfiprintf_r+0x1f8>)
 8006bf6:	a904      	add	r1, sp, #16
 8006bf8:	4638      	mov	r0, r7
 8006bfa:	f3af 8000 	nop.w
 8006bfe:	1c42      	adds	r2, r0, #1
 8006c00:	4606      	mov	r6, r0
 8006c02:	d1d6      	bne.n	8006bb2 <_svfiprintf_r+0x176>
 8006c04:	89ab      	ldrh	r3, [r5, #12]
 8006c06:	065b      	lsls	r3, r3, #25
 8006c08:	f53f af2c 	bmi.w	8006a64 <_svfiprintf_r+0x28>
 8006c0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c0e:	b01d      	add	sp, #116	; 0x74
 8006c10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c14:	ab03      	add	r3, sp, #12
 8006c16:	9300      	str	r3, [sp, #0]
 8006c18:	462a      	mov	r2, r5
 8006c1a:	4b06      	ldr	r3, [pc, #24]	; (8006c34 <_svfiprintf_r+0x1f8>)
 8006c1c:	a904      	add	r1, sp, #16
 8006c1e:	4638      	mov	r0, r7
 8006c20:	f000 f87a 	bl	8006d18 <_printf_i>
 8006c24:	e7eb      	b.n	8006bfe <_svfiprintf_r+0x1c2>
 8006c26:	bf00      	nop
 8006c28:	0800729c 	.word	0x0800729c
 8006c2c:	080072a6 	.word	0x080072a6
 8006c30:	00000000 	.word	0x00000000
 8006c34:	08006985 	.word	0x08006985
 8006c38:	080072a2 	.word	0x080072a2

08006c3c <_printf_common>:
 8006c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c40:	4616      	mov	r6, r2
 8006c42:	4699      	mov	r9, r3
 8006c44:	688a      	ldr	r2, [r1, #8]
 8006c46:	690b      	ldr	r3, [r1, #16]
 8006c48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	bfb8      	it	lt
 8006c50:	4613      	movlt	r3, r2
 8006c52:	6033      	str	r3, [r6, #0]
 8006c54:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006c58:	4607      	mov	r7, r0
 8006c5a:	460c      	mov	r4, r1
 8006c5c:	b10a      	cbz	r2, 8006c62 <_printf_common+0x26>
 8006c5e:	3301      	adds	r3, #1
 8006c60:	6033      	str	r3, [r6, #0]
 8006c62:	6823      	ldr	r3, [r4, #0]
 8006c64:	0699      	lsls	r1, r3, #26
 8006c66:	bf42      	ittt	mi
 8006c68:	6833      	ldrmi	r3, [r6, #0]
 8006c6a:	3302      	addmi	r3, #2
 8006c6c:	6033      	strmi	r3, [r6, #0]
 8006c6e:	6825      	ldr	r5, [r4, #0]
 8006c70:	f015 0506 	ands.w	r5, r5, #6
 8006c74:	d106      	bne.n	8006c84 <_printf_common+0x48>
 8006c76:	f104 0a19 	add.w	sl, r4, #25
 8006c7a:	68e3      	ldr	r3, [r4, #12]
 8006c7c:	6832      	ldr	r2, [r6, #0]
 8006c7e:	1a9b      	subs	r3, r3, r2
 8006c80:	42ab      	cmp	r3, r5
 8006c82:	dc26      	bgt.n	8006cd2 <_printf_common+0x96>
 8006c84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006c88:	1e13      	subs	r3, r2, #0
 8006c8a:	6822      	ldr	r2, [r4, #0]
 8006c8c:	bf18      	it	ne
 8006c8e:	2301      	movne	r3, #1
 8006c90:	0692      	lsls	r2, r2, #26
 8006c92:	d42b      	bmi.n	8006cec <_printf_common+0xb0>
 8006c94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006c98:	4649      	mov	r1, r9
 8006c9a:	4638      	mov	r0, r7
 8006c9c:	47c0      	blx	r8
 8006c9e:	3001      	adds	r0, #1
 8006ca0:	d01e      	beq.n	8006ce0 <_printf_common+0xa4>
 8006ca2:	6823      	ldr	r3, [r4, #0]
 8006ca4:	68e5      	ldr	r5, [r4, #12]
 8006ca6:	6832      	ldr	r2, [r6, #0]
 8006ca8:	f003 0306 	and.w	r3, r3, #6
 8006cac:	2b04      	cmp	r3, #4
 8006cae:	bf08      	it	eq
 8006cb0:	1aad      	subeq	r5, r5, r2
 8006cb2:	68a3      	ldr	r3, [r4, #8]
 8006cb4:	6922      	ldr	r2, [r4, #16]
 8006cb6:	bf0c      	ite	eq
 8006cb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006cbc:	2500      	movne	r5, #0
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	bfc4      	itt	gt
 8006cc2:	1a9b      	subgt	r3, r3, r2
 8006cc4:	18ed      	addgt	r5, r5, r3
 8006cc6:	2600      	movs	r6, #0
 8006cc8:	341a      	adds	r4, #26
 8006cca:	42b5      	cmp	r5, r6
 8006ccc:	d11a      	bne.n	8006d04 <_printf_common+0xc8>
 8006cce:	2000      	movs	r0, #0
 8006cd0:	e008      	b.n	8006ce4 <_printf_common+0xa8>
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	4652      	mov	r2, sl
 8006cd6:	4649      	mov	r1, r9
 8006cd8:	4638      	mov	r0, r7
 8006cda:	47c0      	blx	r8
 8006cdc:	3001      	adds	r0, #1
 8006cde:	d103      	bne.n	8006ce8 <_printf_common+0xac>
 8006ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ce4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ce8:	3501      	adds	r5, #1
 8006cea:	e7c6      	b.n	8006c7a <_printf_common+0x3e>
 8006cec:	18e1      	adds	r1, r4, r3
 8006cee:	1c5a      	adds	r2, r3, #1
 8006cf0:	2030      	movs	r0, #48	; 0x30
 8006cf2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006cf6:	4422      	add	r2, r4
 8006cf8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006cfc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006d00:	3302      	adds	r3, #2
 8006d02:	e7c7      	b.n	8006c94 <_printf_common+0x58>
 8006d04:	2301      	movs	r3, #1
 8006d06:	4622      	mov	r2, r4
 8006d08:	4649      	mov	r1, r9
 8006d0a:	4638      	mov	r0, r7
 8006d0c:	47c0      	blx	r8
 8006d0e:	3001      	adds	r0, #1
 8006d10:	d0e6      	beq.n	8006ce0 <_printf_common+0xa4>
 8006d12:	3601      	adds	r6, #1
 8006d14:	e7d9      	b.n	8006cca <_printf_common+0x8e>
	...

08006d18 <_printf_i>:
 8006d18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d1c:	460c      	mov	r4, r1
 8006d1e:	4691      	mov	r9, r2
 8006d20:	7e27      	ldrb	r7, [r4, #24]
 8006d22:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006d24:	2f78      	cmp	r7, #120	; 0x78
 8006d26:	4680      	mov	r8, r0
 8006d28:	469a      	mov	sl, r3
 8006d2a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d2e:	d807      	bhi.n	8006d40 <_printf_i+0x28>
 8006d30:	2f62      	cmp	r7, #98	; 0x62
 8006d32:	d80a      	bhi.n	8006d4a <_printf_i+0x32>
 8006d34:	2f00      	cmp	r7, #0
 8006d36:	f000 80d8 	beq.w	8006eea <_printf_i+0x1d2>
 8006d3a:	2f58      	cmp	r7, #88	; 0x58
 8006d3c:	f000 80a3 	beq.w	8006e86 <_printf_i+0x16e>
 8006d40:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006d44:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006d48:	e03a      	b.n	8006dc0 <_printf_i+0xa8>
 8006d4a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006d4e:	2b15      	cmp	r3, #21
 8006d50:	d8f6      	bhi.n	8006d40 <_printf_i+0x28>
 8006d52:	a001      	add	r0, pc, #4	; (adr r0, 8006d58 <_printf_i+0x40>)
 8006d54:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006d58:	08006db1 	.word	0x08006db1
 8006d5c:	08006dc5 	.word	0x08006dc5
 8006d60:	08006d41 	.word	0x08006d41
 8006d64:	08006d41 	.word	0x08006d41
 8006d68:	08006d41 	.word	0x08006d41
 8006d6c:	08006d41 	.word	0x08006d41
 8006d70:	08006dc5 	.word	0x08006dc5
 8006d74:	08006d41 	.word	0x08006d41
 8006d78:	08006d41 	.word	0x08006d41
 8006d7c:	08006d41 	.word	0x08006d41
 8006d80:	08006d41 	.word	0x08006d41
 8006d84:	08006ed1 	.word	0x08006ed1
 8006d88:	08006df5 	.word	0x08006df5
 8006d8c:	08006eb3 	.word	0x08006eb3
 8006d90:	08006d41 	.word	0x08006d41
 8006d94:	08006d41 	.word	0x08006d41
 8006d98:	08006ef3 	.word	0x08006ef3
 8006d9c:	08006d41 	.word	0x08006d41
 8006da0:	08006df5 	.word	0x08006df5
 8006da4:	08006d41 	.word	0x08006d41
 8006da8:	08006d41 	.word	0x08006d41
 8006dac:	08006ebb 	.word	0x08006ebb
 8006db0:	680b      	ldr	r3, [r1, #0]
 8006db2:	1d1a      	adds	r2, r3, #4
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	600a      	str	r2, [r1, #0]
 8006db8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006dbc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	e0a3      	b.n	8006f0c <_printf_i+0x1f4>
 8006dc4:	6825      	ldr	r5, [r4, #0]
 8006dc6:	6808      	ldr	r0, [r1, #0]
 8006dc8:	062e      	lsls	r6, r5, #24
 8006dca:	f100 0304 	add.w	r3, r0, #4
 8006dce:	d50a      	bpl.n	8006de6 <_printf_i+0xce>
 8006dd0:	6805      	ldr	r5, [r0, #0]
 8006dd2:	600b      	str	r3, [r1, #0]
 8006dd4:	2d00      	cmp	r5, #0
 8006dd6:	da03      	bge.n	8006de0 <_printf_i+0xc8>
 8006dd8:	232d      	movs	r3, #45	; 0x2d
 8006dda:	426d      	negs	r5, r5
 8006ddc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006de0:	485e      	ldr	r0, [pc, #376]	; (8006f5c <_printf_i+0x244>)
 8006de2:	230a      	movs	r3, #10
 8006de4:	e019      	b.n	8006e1a <_printf_i+0x102>
 8006de6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006dea:	6805      	ldr	r5, [r0, #0]
 8006dec:	600b      	str	r3, [r1, #0]
 8006dee:	bf18      	it	ne
 8006df0:	b22d      	sxthne	r5, r5
 8006df2:	e7ef      	b.n	8006dd4 <_printf_i+0xbc>
 8006df4:	680b      	ldr	r3, [r1, #0]
 8006df6:	6825      	ldr	r5, [r4, #0]
 8006df8:	1d18      	adds	r0, r3, #4
 8006dfa:	6008      	str	r0, [r1, #0]
 8006dfc:	0628      	lsls	r0, r5, #24
 8006dfe:	d501      	bpl.n	8006e04 <_printf_i+0xec>
 8006e00:	681d      	ldr	r5, [r3, #0]
 8006e02:	e002      	b.n	8006e0a <_printf_i+0xf2>
 8006e04:	0669      	lsls	r1, r5, #25
 8006e06:	d5fb      	bpl.n	8006e00 <_printf_i+0xe8>
 8006e08:	881d      	ldrh	r5, [r3, #0]
 8006e0a:	4854      	ldr	r0, [pc, #336]	; (8006f5c <_printf_i+0x244>)
 8006e0c:	2f6f      	cmp	r7, #111	; 0x6f
 8006e0e:	bf0c      	ite	eq
 8006e10:	2308      	moveq	r3, #8
 8006e12:	230a      	movne	r3, #10
 8006e14:	2100      	movs	r1, #0
 8006e16:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006e1a:	6866      	ldr	r6, [r4, #4]
 8006e1c:	60a6      	str	r6, [r4, #8]
 8006e1e:	2e00      	cmp	r6, #0
 8006e20:	bfa2      	ittt	ge
 8006e22:	6821      	ldrge	r1, [r4, #0]
 8006e24:	f021 0104 	bicge.w	r1, r1, #4
 8006e28:	6021      	strge	r1, [r4, #0]
 8006e2a:	b90d      	cbnz	r5, 8006e30 <_printf_i+0x118>
 8006e2c:	2e00      	cmp	r6, #0
 8006e2e:	d04d      	beq.n	8006ecc <_printf_i+0x1b4>
 8006e30:	4616      	mov	r6, r2
 8006e32:	fbb5 f1f3 	udiv	r1, r5, r3
 8006e36:	fb03 5711 	mls	r7, r3, r1, r5
 8006e3a:	5dc7      	ldrb	r7, [r0, r7]
 8006e3c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006e40:	462f      	mov	r7, r5
 8006e42:	42bb      	cmp	r3, r7
 8006e44:	460d      	mov	r5, r1
 8006e46:	d9f4      	bls.n	8006e32 <_printf_i+0x11a>
 8006e48:	2b08      	cmp	r3, #8
 8006e4a:	d10b      	bne.n	8006e64 <_printf_i+0x14c>
 8006e4c:	6823      	ldr	r3, [r4, #0]
 8006e4e:	07df      	lsls	r7, r3, #31
 8006e50:	d508      	bpl.n	8006e64 <_printf_i+0x14c>
 8006e52:	6923      	ldr	r3, [r4, #16]
 8006e54:	6861      	ldr	r1, [r4, #4]
 8006e56:	4299      	cmp	r1, r3
 8006e58:	bfde      	ittt	le
 8006e5a:	2330      	movle	r3, #48	; 0x30
 8006e5c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006e60:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006e64:	1b92      	subs	r2, r2, r6
 8006e66:	6122      	str	r2, [r4, #16]
 8006e68:	f8cd a000 	str.w	sl, [sp]
 8006e6c:	464b      	mov	r3, r9
 8006e6e:	aa03      	add	r2, sp, #12
 8006e70:	4621      	mov	r1, r4
 8006e72:	4640      	mov	r0, r8
 8006e74:	f7ff fee2 	bl	8006c3c <_printf_common>
 8006e78:	3001      	adds	r0, #1
 8006e7a:	d14c      	bne.n	8006f16 <_printf_i+0x1fe>
 8006e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8006e80:	b004      	add	sp, #16
 8006e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e86:	4835      	ldr	r0, [pc, #212]	; (8006f5c <_printf_i+0x244>)
 8006e88:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006e8c:	6823      	ldr	r3, [r4, #0]
 8006e8e:	680e      	ldr	r6, [r1, #0]
 8006e90:	061f      	lsls	r7, r3, #24
 8006e92:	f856 5b04 	ldr.w	r5, [r6], #4
 8006e96:	600e      	str	r6, [r1, #0]
 8006e98:	d514      	bpl.n	8006ec4 <_printf_i+0x1ac>
 8006e9a:	07d9      	lsls	r1, r3, #31
 8006e9c:	bf44      	itt	mi
 8006e9e:	f043 0320 	orrmi.w	r3, r3, #32
 8006ea2:	6023      	strmi	r3, [r4, #0]
 8006ea4:	b91d      	cbnz	r5, 8006eae <_printf_i+0x196>
 8006ea6:	6823      	ldr	r3, [r4, #0]
 8006ea8:	f023 0320 	bic.w	r3, r3, #32
 8006eac:	6023      	str	r3, [r4, #0]
 8006eae:	2310      	movs	r3, #16
 8006eb0:	e7b0      	b.n	8006e14 <_printf_i+0xfc>
 8006eb2:	6823      	ldr	r3, [r4, #0]
 8006eb4:	f043 0320 	orr.w	r3, r3, #32
 8006eb8:	6023      	str	r3, [r4, #0]
 8006eba:	2378      	movs	r3, #120	; 0x78
 8006ebc:	4828      	ldr	r0, [pc, #160]	; (8006f60 <_printf_i+0x248>)
 8006ebe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006ec2:	e7e3      	b.n	8006e8c <_printf_i+0x174>
 8006ec4:	065e      	lsls	r6, r3, #25
 8006ec6:	bf48      	it	mi
 8006ec8:	b2ad      	uxthmi	r5, r5
 8006eca:	e7e6      	b.n	8006e9a <_printf_i+0x182>
 8006ecc:	4616      	mov	r6, r2
 8006ece:	e7bb      	b.n	8006e48 <_printf_i+0x130>
 8006ed0:	680b      	ldr	r3, [r1, #0]
 8006ed2:	6826      	ldr	r6, [r4, #0]
 8006ed4:	6960      	ldr	r0, [r4, #20]
 8006ed6:	1d1d      	adds	r5, r3, #4
 8006ed8:	600d      	str	r5, [r1, #0]
 8006eda:	0635      	lsls	r5, r6, #24
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	d501      	bpl.n	8006ee4 <_printf_i+0x1cc>
 8006ee0:	6018      	str	r0, [r3, #0]
 8006ee2:	e002      	b.n	8006eea <_printf_i+0x1d2>
 8006ee4:	0671      	lsls	r1, r6, #25
 8006ee6:	d5fb      	bpl.n	8006ee0 <_printf_i+0x1c8>
 8006ee8:	8018      	strh	r0, [r3, #0]
 8006eea:	2300      	movs	r3, #0
 8006eec:	6123      	str	r3, [r4, #16]
 8006eee:	4616      	mov	r6, r2
 8006ef0:	e7ba      	b.n	8006e68 <_printf_i+0x150>
 8006ef2:	680b      	ldr	r3, [r1, #0]
 8006ef4:	1d1a      	adds	r2, r3, #4
 8006ef6:	600a      	str	r2, [r1, #0]
 8006ef8:	681e      	ldr	r6, [r3, #0]
 8006efa:	6862      	ldr	r2, [r4, #4]
 8006efc:	2100      	movs	r1, #0
 8006efe:	4630      	mov	r0, r6
 8006f00:	f7f9 f966 	bl	80001d0 <memchr>
 8006f04:	b108      	cbz	r0, 8006f0a <_printf_i+0x1f2>
 8006f06:	1b80      	subs	r0, r0, r6
 8006f08:	6060      	str	r0, [r4, #4]
 8006f0a:	6863      	ldr	r3, [r4, #4]
 8006f0c:	6123      	str	r3, [r4, #16]
 8006f0e:	2300      	movs	r3, #0
 8006f10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f14:	e7a8      	b.n	8006e68 <_printf_i+0x150>
 8006f16:	6923      	ldr	r3, [r4, #16]
 8006f18:	4632      	mov	r2, r6
 8006f1a:	4649      	mov	r1, r9
 8006f1c:	4640      	mov	r0, r8
 8006f1e:	47d0      	blx	sl
 8006f20:	3001      	adds	r0, #1
 8006f22:	d0ab      	beq.n	8006e7c <_printf_i+0x164>
 8006f24:	6823      	ldr	r3, [r4, #0]
 8006f26:	079b      	lsls	r3, r3, #30
 8006f28:	d413      	bmi.n	8006f52 <_printf_i+0x23a>
 8006f2a:	68e0      	ldr	r0, [r4, #12]
 8006f2c:	9b03      	ldr	r3, [sp, #12]
 8006f2e:	4298      	cmp	r0, r3
 8006f30:	bfb8      	it	lt
 8006f32:	4618      	movlt	r0, r3
 8006f34:	e7a4      	b.n	8006e80 <_printf_i+0x168>
 8006f36:	2301      	movs	r3, #1
 8006f38:	4632      	mov	r2, r6
 8006f3a:	4649      	mov	r1, r9
 8006f3c:	4640      	mov	r0, r8
 8006f3e:	47d0      	blx	sl
 8006f40:	3001      	adds	r0, #1
 8006f42:	d09b      	beq.n	8006e7c <_printf_i+0x164>
 8006f44:	3501      	adds	r5, #1
 8006f46:	68e3      	ldr	r3, [r4, #12]
 8006f48:	9903      	ldr	r1, [sp, #12]
 8006f4a:	1a5b      	subs	r3, r3, r1
 8006f4c:	42ab      	cmp	r3, r5
 8006f4e:	dcf2      	bgt.n	8006f36 <_printf_i+0x21e>
 8006f50:	e7eb      	b.n	8006f2a <_printf_i+0x212>
 8006f52:	2500      	movs	r5, #0
 8006f54:	f104 0619 	add.w	r6, r4, #25
 8006f58:	e7f5      	b.n	8006f46 <_printf_i+0x22e>
 8006f5a:	bf00      	nop
 8006f5c:	080072ad 	.word	0x080072ad
 8006f60:	080072be 	.word	0x080072be

08006f64 <memcpy>:
 8006f64:	440a      	add	r2, r1
 8006f66:	4291      	cmp	r1, r2
 8006f68:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f6c:	d100      	bne.n	8006f70 <memcpy+0xc>
 8006f6e:	4770      	bx	lr
 8006f70:	b510      	push	{r4, lr}
 8006f72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f7a:	4291      	cmp	r1, r2
 8006f7c:	d1f9      	bne.n	8006f72 <memcpy+0xe>
 8006f7e:	bd10      	pop	{r4, pc}

08006f80 <memmove>:
 8006f80:	4288      	cmp	r0, r1
 8006f82:	b510      	push	{r4, lr}
 8006f84:	eb01 0402 	add.w	r4, r1, r2
 8006f88:	d902      	bls.n	8006f90 <memmove+0x10>
 8006f8a:	4284      	cmp	r4, r0
 8006f8c:	4623      	mov	r3, r4
 8006f8e:	d807      	bhi.n	8006fa0 <memmove+0x20>
 8006f90:	1e43      	subs	r3, r0, #1
 8006f92:	42a1      	cmp	r1, r4
 8006f94:	d008      	beq.n	8006fa8 <memmove+0x28>
 8006f96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006f9e:	e7f8      	b.n	8006f92 <memmove+0x12>
 8006fa0:	4402      	add	r2, r0
 8006fa2:	4601      	mov	r1, r0
 8006fa4:	428a      	cmp	r2, r1
 8006fa6:	d100      	bne.n	8006faa <memmove+0x2a>
 8006fa8:	bd10      	pop	{r4, pc}
 8006faa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006fae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006fb2:	e7f7      	b.n	8006fa4 <memmove+0x24>

08006fb4 <_free_r>:
 8006fb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006fb6:	2900      	cmp	r1, #0
 8006fb8:	d048      	beq.n	800704c <_free_r+0x98>
 8006fba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006fbe:	9001      	str	r0, [sp, #4]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	f1a1 0404 	sub.w	r4, r1, #4
 8006fc6:	bfb8      	it	lt
 8006fc8:	18e4      	addlt	r4, r4, r3
 8006fca:	f000 f8d3 	bl	8007174 <__malloc_lock>
 8006fce:	4a20      	ldr	r2, [pc, #128]	; (8007050 <_free_r+0x9c>)
 8006fd0:	9801      	ldr	r0, [sp, #4]
 8006fd2:	6813      	ldr	r3, [r2, #0]
 8006fd4:	4615      	mov	r5, r2
 8006fd6:	b933      	cbnz	r3, 8006fe6 <_free_r+0x32>
 8006fd8:	6063      	str	r3, [r4, #4]
 8006fda:	6014      	str	r4, [r2, #0]
 8006fdc:	b003      	add	sp, #12
 8006fde:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006fe2:	f000 b8cd 	b.w	8007180 <__malloc_unlock>
 8006fe6:	42a3      	cmp	r3, r4
 8006fe8:	d90b      	bls.n	8007002 <_free_r+0x4e>
 8006fea:	6821      	ldr	r1, [r4, #0]
 8006fec:	1862      	adds	r2, r4, r1
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	bf04      	itt	eq
 8006ff2:	681a      	ldreq	r2, [r3, #0]
 8006ff4:	685b      	ldreq	r3, [r3, #4]
 8006ff6:	6063      	str	r3, [r4, #4]
 8006ff8:	bf04      	itt	eq
 8006ffa:	1852      	addeq	r2, r2, r1
 8006ffc:	6022      	streq	r2, [r4, #0]
 8006ffe:	602c      	str	r4, [r5, #0]
 8007000:	e7ec      	b.n	8006fdc <_free_r+0x28>
 8007002:	461a      	mov	r2, r3
 8007004:	685b      	ldr	r3, [r3, #4]
 8007006:	b10b      	cbz	r3, 800700c <_free_r+0x58>
 8007008:	42a3      	cmp	r3, r4
 800700a:	d9fa      	bls.n	8007002 <_free_r+0x4e>
 800700c:	6811      	ldr	r1, [r2, #0]
 800700e:	1855      	adds	r5, r2, r1
 8007010:	42a5      	cmp	r5, r4
 8007012:	d10b      	bne.n	800702c <_free_r+0x78>
 8007014:	6824      	ldr	r4, [r4, #0]
 8007016:	4421      	add	r1, r4
 8007018:	1854      	adds	r4, r2, r1
 800701a:	42a3      	cmp	r3, r4
 800701c:	6011      	str	r1, [r2, #0]
 800701e:	d1dd      	bne.n	8006fdc <_free_r+0x28>
 8007020:	681c      	ldr	r4, [r3, #0]
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	6053      	str	r3, [r2, #4]
 8007026:	4421      	add	r1, r4
 8007028:	6011      	str	r1, [r2, #0]
 800702a:	e7d7      	b.n	8006fdc <_free_r+0x28>
 800702c:	d902      	bls.n	8007034 <_free_r+0x80>
 800702e:	230c      	movs	r3, #12
 8007030:	6003      	str	r3, [r0, #0]
 8007032:	e7d3      	b.n	8006fdc <_free_r+0x28>
 8007034:	6825      	ldr	r5, [r4, #0]
 8007036:	1961      	adds	r1, r4, r5
 8007038:	428b      	cmp	r3, r1
 800703a:	bf04      	itt	eq
 800703c:	6819      	ldreq	r1, [r3, #0]
 800703e:	685b      	ldreq	r3, [r3, #4]
 8007040:	6063      	str	r3, [r4, #4]
 8007042:	bf04      	itt	eq
 8007044:	1949      	addeq	r1, r1, r5
 8007046:	6021      	streq	r1, [r4, #0]
 8007048:	6054      	str	r4, [r2, #4]
 800704a:	e7c7      	b.n	8006fdc <_free_r+0x28>
 800704c:	b003      	add	sp, #12
 800704e:	bd30      	pop	{r4, r5, pc}
 8007050:	200000a4 	.word	0x200000a4

08007054 <_malloc_r>:
 8007054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007056:	1ccd      	adds	r5, r1, #3
 8007058:	f025 0503 	bic.w	r5, r5, #3
 800705c:	3508      	adds	r5, #8
 800705e:	2d0c      	cmp	r5, #12
 8007060:	bf38      	it	cc
 8007062:	250c      	movcc	r5, #12
 8007064:	2d00      	cmp	r5, #0
 8007066:	4606      	mov	r6, r0
 8007068:	db01      	blt.n	800706e <_malloc_r+0x1a>
 800706a:	42a9      	cmp	r1, r5
 800706c:	d903      	bls.n	8007076 <_malloc_r+0x22>
 800706e:	230c      	movs	r3, #12
 8007070:	6033      	str	r3, [r6, #0]
 8007072:	2000      	movs	r0, #0
 8007074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007076:	f000 f87d 	bl	8007174 <__malloc_lock>
 800707a:	4921      	ldr	r1, [pc, #132]	; (8007100 <_malloc_r+0xac>)
 800707c:	680a      	ldr	r2, [r1, #0]
 800707e:	4614      	mov	r4, r2
 8007080:	b99c      	cbnz	r4, 80070aa <_malloc_r+0x56>
 8007082:	4f20      	ldr	r7, [pc, #128]	; (8007104 <_malloc_r+0xb0>)
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	b923      	cbnz	r3, 8007092 <_malloc_r+0x3e>
 8007088:	4621      	mov	r1, r4
 800708a:	4630      	mov	r0, r6
 800708c:	f000 f862 	bl	8007154 <_sbrk_r>
 8007090:	6038      	str	r0, [r7, #0]
 8007092:	4629      	mov	r1, r5
 8007094:	4630      	mov	r0, r6
 8007096:	f000 f85d 	bl	8007154 <_sbrk_r>
 800709a:	1c43      	adds	r3, r0, #1
 800709c:	d123      	bne.n	80070e6 <_malloc_r+0x92>
 800709e:	230c      	movs	r3, #12
 80070a0:	6033      	str	r3, [r6, #0]
 80070a2:	4630      	mov	r0, r6
 80070a4:	f000 f86c 	bl	8007180 <__malloc_unlock>
 80070a8:	e7e3      	b.n	8007072 <_malloc_r+0x1e>
 80070aa:	6823      	ldr	r3, [r4, #0]
 80070ac:	1b5b      	subs	r3, r3, r5
 80070ae:	d417      	bmi.n	80070e0 <_malloc_r+0x8c>
 80070b0:	2b0b      	cmp	r3, #11
 80070b2:	d903      	bls.n	80070bc <_malloc_r+0x68>
 80070b4:	6023      	str	r3, [r4, #0]
 80070b6:	441c      	add	r4, r3
 80070b8:	6025      	str	r5, [r4, #0]
 80070ba:	e004      	b.n	80070c6 <_malloc_r+0x72>
 80070bc:	6863      	ldr	r3, [r4, #4]
 80070be:	42a2      	cmp	r2, r4
 80070c0:	bf0c      	ite	eq
 80070c2:	600b      	streq	r3, [r1, #0]
 80070c4:	6053      	strne	r3, [r2, #4]
 80070c6:	4630      	mov	r0, r6
 80070c8:	f000 f85a 	bl	8007180 <__malloc_unlock>
 80070cc:	f104 000b 	add.w	r0, r4, #11
 80070d0:	1d23      	adds	r3, r4, #4
 80070d2:	f020 0007 	bic.w	r0, r0, #7
 80070d6:	1ac2      	subs	r2, r0, r3
 80070d8:	d0cc      	beq.n	8007074 <_malloc_r+0x20>
 80070da:	1a1b      	subs	r3, r3, r0
 80070dc:	50a3      	str	r3, [r4, r2]
 80070de:	e7c9      	b.n	8007074 <_malloc_r+0x20>
 80070e0:	4622      	mov	r2, r4
 80070e2:	6864      	ldr	r4, [r4, #4]
 80070e4:	e7cc      	b.n	8007080 <_malloc_r+0x2c>
 80070e6:	1cc4      	adds	r4, r0, #3
 80070e8:	f024 0403 	bic.w	r4, r4, #3
 80070ec:	42a0      	cmp	r0, r4
 80070ee:	d0e3      	beq.n	80070b8 <_malloc_r+0x64>
 80070f0:	1a21      	subs	r1, r4, r0
 80070f2:	4630      	mov	r0, r6
 80070f4:	f000 f82e 	bl	8007154 <_sbrk_r>
 80070f8:	3001      	adds	r0, #1
 80070fa:	d1dd      	bne.n	80070b8 <_malloc_r+0x64>
 80070fc:	e7cf      	b.n	800709e <_malloc_r+0x4a>
 80070fe:	bf00      	nop
 8007100:	200000a4 	.word	0x200000a4
 8007104:	200000a8 	.word	0x200000a8

08007108 <_realloc_r>:
 8007108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800710a:	4607      	mov	r7, r0
 800710c:	4614      	mov	r4, r2
 800710e:	460e      	mov	r6, r1
 8007110:	b921      	cbnz	r1, 800711c <_realloc_r+0x14>
 8007112:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007116:	4611      	mov	r1, r2
 8007118:	f7ff bf9c 	b.w	8007054 <_malloc_r>
 800711c:	b922      	cbnz	r2, 8007128 <_realloc_r+0x20>
 800711e:	f7ff ff49 	bl	8006fb4 <_free_r>
 8007122:	4625      	mov	r5, r4
 8007124:	4628      	mov	r0, r5
 8007126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007128:	f000 f830 	bl	800718c <_malloc_usable_size_r>
 800712c:	42a0      	cmp	r0, r4
 800712e:	d20f      	bcs.n	8007150 <_realloc_r+0x48>
 8007130:	4621      	mov	r1, r4
 8007132:	4638      	mov	r0, r7
 8007134:	f7ff ff8e 	bl	8007054 <_malloc_r>
 8007138:	4605      	mov	r5, r0
 800713a:	2800      	cmp	r0, #0
 800713c:	d0f2      	beq.n	8007124 <_realloc_r+0x1c>
 800713e:	4631      	mov	r1, r6
 8007140:	4622      	mov	r2, r4
 8007142:	f7ff ff0f 	bl	8006f64 <memcpy>
 8007146:	4631      	mov	r1, r6
 8007148:	4638      	mov	r0, r7
 800714a:	f7ff ff33 	bl	8006fb4 <_free_r>
 800714e:	e7e9      	b.n	8007124 <_realloc_r+0x1c>
 8007150:	4635      	mov	r5, r6
 8007152:	e7e7      	b.n	8007124 <_realloc_r+0x1c>

08007154 <_sbrk_r>:
 8007154:	b538      	push	{r3, r4, r5, lr}
 8007156:	4d06      	ldr	r5, [pc, #24]	; (8007170 <_sbrk_r+0x1c>)
 8007158:	2300      	movs	r3, #0
 800715a:	4604      	mov	r4, r0
 800715c:	4608      	mov	r0, r1
 800715e:	602b      	str	r3, [r5, #0]
 8007160:	f7fb f8a0 	bl	80022a4 <_sbrk>
 8007164:	1c43      	adds	r3, r0, #1
 8007166:	d102      	bne.n	800716e <_sbrk_r+0x1a>
 8007168:	682b      	ldr	r3, [r5, #0]
 800716a:	b103      	cbz	r3, 800716e <_sbrk_r+0x1a>
 800716c:	6023      	str	r3, [r4, #0]
 800716e:	bd38      	pop	{r3, r4, r5, pc}
 8007170:	200002ac 	.word	0x200002ac

08007174 <__malloc_lock>:
 8007174:	4801      	ldr	r0, [pc, #4]	; (800717c <__malloc_lock+0x8>)
 8007176:	f000 b811 	b.w	800719c <__retarget_lock_acquire_recursive>
 800717a:	bf00      	nop
 800717c:	200002b4 	.word	0x200002b4

08007180 <__malloc_unlock>:
 8007180:	4801      	ldr	r0, [pc, #4]	; (8007188 <__malloc_unlock+0x8>)
 8007182:	f000 b80c 	b.w	800719e <__retarget_lock_release_recursive>
 8007186:	bf00      	nop
 8007188:	200002b4 	.word	0x200002b4

0800718c <_malloc_usable_size_r>:
 800718c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007190:	1f18      	subs	r0, r3, #4
 8007192:	2b00      	cmp	r3, #0
 8007194:	bfbc      	itt	lt
 8007196:	580b      	ldrlt	r3, [r1, r0]
 8007198:	18c0      	addlt	r0, r0, r3
 800719a:	4770      	bx	lr

0800719c <__retarget_lock_acquire_recursive>:
 800719c:	4770      	bx	lr

0800719e <__retarget_lock_release_recursive>:
 800719e:	4770      	bx	lr

080071a0 <_init>:
 80071a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071a2:	bf00      	nop
 80071a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071a6:	bc08      	pop	{r3}
 80071a8:	469e      	mov	lr, r3
 80071aa:	4770      	bx	lr

080071ac <_fini>:
 80071ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071ae:	bf00      	nop
 80071b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071b2:	bc08      	pop	{r3}
 80071b4:	469e      	mov	lr, r3
 80071b6:	4770      	bx	lr
