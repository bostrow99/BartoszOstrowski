
test10000.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d4c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004ed4  08004ed4  00014ed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f14  08004f14  00020030  2**0
                  CONTENTS
  4 .ARM          00000000  08004f14  08004f14  00020030  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004f14  08004f14  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f14  08004f14  00014f14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f18  08004f18  00014f18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  08004f1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00011940  20000030  08004f4c  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20011970  08004f4c  00021970  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016d2b  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f6d  00000000  00000000  00036d8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001320  00000000  00000000  00039cf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011a8  00000000  00000000  0003b018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002976f  00000000  00000000  0003c1c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015d5b  00000000  00000000  0006592f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00104936  00000000  00000000  0007b68a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0017ffc0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fb0  00000000  00000000  00180014  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000030 	.word	0x20000030
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004ebc 	.word	0x08004ebc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000034 	.word	0x20000034
 80001c4:	08004ebc 	.word	0x08004ebc

080001c8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b08a      	sub	sp, #40	; 0x28
 80001cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80001ce:	f107 031c 	add.w	r3, r7, #28
 80001d2:	2200      	movs	r2, #0
 80001d4:	601a      	str	r2, [r3, #0]
 80001d6:	605a      	str	r2, [r3, #4]
 80001d8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80001da:	1d3b      	adds	r3, r7, #4
 80001dc:	2200      	movs	r2, #0
 80001de:	601a      	str	r2, [r3, #0]
 80001e0:	605a      	str	r2, [r3, #4]
 80001e2:	609a      	str	r2, [r3, #8]
 80001e4:	60da      	str	r2, [r3, #12]
 80001e6:	611a      	str	r2, [r3, #16]
 80001e8:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80001ea:	4b30      	ldr	r3, [pc, #192]	; (80002ac <MX_ADC1_Init+0xe4>)
 80001ec:	4a30      	ldr	r2, [pc, #192]	; (80002b0 <MX_ADC1_Init+0xe8>)
 80001ee:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80001f0:	4b2e      	ldr	r3, [pc, #184]	; (80002ac <MX_ADC1_Init+0xe4>)
 80001f2:	2200      	movs	r2, #0
 80001f4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80001f6:	4b2d      	ldr	r3, [pc, #180]	; (80002ac <MX_ADC1_Init+0xe4>)
 80001f8:	2200      	movs	r2, #0
 80001fa:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80001fc:	4b2b      	ldr	r3, [pc, #172]	; (80002ac <MX_ADC1_Init+0xe4>)
 80001fe:	2200      	movs	r2, #0
 8000200:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000202:	4b2a      	ldr	r3, [pc, #168]	; (80002ac <MX_ADC1_Init+0xe4>)
 8000204:	2200      	movs	r2, #0
 8000206:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000208:	4b28      	ldr	r3, [pc, #160]	; (80002ac <MX_ADC1_Init+0xe4>)
 800020a:	2204      	movs	r2, #4
 800020c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800020e:	4b27      	ldr	r3, [pc, #156]	; (80002ac <MX_ADC1_Init+0xe4>)
 8000210:	2200      	movs	r2, #0
 8000212:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000214:	4b25      	ldr	r3, [pc, #148]	; (80002ac <MX_ADC1_Init+0xe4>)
 8000216:	2200      	movs	r2, #0
 8000218:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800021a:	4b24      	ldr	r3, [pc, #144]	; (80002ac <MX_ADC1_Init+0xe4>)
 800021c:	2201      	movs	r2, #1
 800021e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000220:	4b22      	ldr	r3, [pc, #136]	; (80002ac <MX_ADC1_Init+0xe4>)
 8000222:	2200      	movs	r2, #0
 8000224:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8000228:	4b20      	ldr	r3, [pc, #128]	; (80002ac <MX_ADC1_Init+0xe4>)
 800022a:	f44f 62e8 	mov.w	r2, #1856	; 0x740
 800022e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000230:	4b1e      	ldr	r3, [pc, #120]	; (80002ac <MX_ADC1_Init+0xe4>)
 8000232:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000236:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000238:	4b1c      	ldr	r3, [pc, #112]	; (80002ac <MX_ADC1_Init+0xe4>)
 800023a:	2201      	movs	r2, #1
 800023c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000240:	4b1a      	ldr	r3, [pc, #104]	; (80002ac <MX_ADC1_Init+0xe4>)
 8000242:	2200      	movs	r2, #0
 8000244:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000246:	4b19      	ldr	r3, [pc, #100]	; (80002ac <MX_ADC1_Init+0xe4>)
 8000248:	2200      	movs	r2, #0
 800024a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800024e:	4817      	ldr	r0, [pc, #92]	; (80002ac <MX_ADC1_Init+0xe4>)
 8000250:	f001 f982 	bl	8001558 <HAL_ADC_Init>
 8000254:	4603      	mov	r3, r0
 8000256:	2b00      	cmp	r3, #0
 8000258:	d001      	beq.n	800025e <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 800025a:	f000 fe0d 	bl	8000e78 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800025e:	2300      	movs	r3, #0
 8000260:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000262:	f107 031c 	add.w	r3, r7, #28
 8000266:	4619      	mov	r1, r3
 8000268:	4810      	ldr	r0, [pc, #64]	; (80002ac <MX_ADC1_Init+0xe4>)
 800026a:	f002 f89d 	bl	80023a8 <HAL_ADCEx_MultiModeConfigChannel>
 800026e:	4603      	mov	r3, r0
 8000270:	2b00      	cmp	r3, #0
 8000272:	d001      	beq.n	8000278 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000274:	f000 fe00 	bl	8000e78 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000278:	4b0e      	ldr	r3, [pc, #56]	; (80002b4 <MX_ADC1_Init+0xec>)
 800027a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800027c:	2306      	movs	r3, #6
 800027e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000280:	2300      	movs	r3, #0
 8000282:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000284:	237f      	movs	r3, #127	; 0x7f
 8000286:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000288:	2304      	movs	r3, #4
 800028a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800028c:	2300      	movs	r3, #0
 800028e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000290:	1d3b      	adds	r3, r7, #4
 8000292:	4619      	mov	r1, r3
 8000294:	4805      	ldr	r0, [pc, #20]	; (80002ac <MX_ADC1_Init+0xe4>)
 8000296:	f001 fb7b 	bl	8001990 <HAL_ADC_ConfigChannel>
 800029a:	4603      	mov	r3, r0
 800029c:	2b00      	cmp	r3, #0
 800029e:	d001      	beq.n	80002a4 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 80002a0:	f000 fdea 	bl	8000e78 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002a4:	bf00      	nop
 80002a6:	3728      	adds	r7, #40	; 0x28
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bd80      	pop	{r7, pc}
 80002ac:	20000074 	.word	0x20000074
 80002b0:	50040000 	.word	0x50040000
 80002b4:	04300002 	.word	0x04300002

080002b8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b08a      	sub	sp, #40	; 0x28
 80002bc:	af00      	add	r7, sp, #0
 80002be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002c0:	f107 0314 	add.w	r3, r7, #20
 80002c4:	2200      	movs	r2, #0
 80002c6:	601a      	str	r2, [r3, #0]
 80002c8:	605a      	str	r2, [r3, #4]
 80002ca:	609a      	str	r2, [r3, #8]
 80002cc:	60da      	str	r2, [r3, #12]
 80002ce:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	4a2b      	ldr	r2, [pc, #172]	; (8000384 <HAL_ADC_MspInit+0xcc>)
 80002d6:	4293      	cmp	r3, r2
 80002d8:	d14f      	bne.n	800037a <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80002da:	4b2b      	ldr	r3, [pc, #172]	; (8000388 <HAL_ADC_MspInit+0xd0>)
 80002dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002de:	4a2a      	ldr	r2, [pc, #168]	; (8000388 <HAL_ADC_MspInit+0xd0>)
 80002e0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80002e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002e6:	4b28      	ldr	r3, [pc, #160]	; (8000388 <HAL_ADC_MspInit+0xd0>)
 80002e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80002ee:	613b      	str	r3, [r7, #16]
 80002f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80002f2:	4b25      	ldr	r3, [pc, #148]	; (8000388 <HAL_ADC_MspInit+0xd0>)
 80002f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002f6:	4a24      	ldr	r2, [pc, #144]	; (8000388 <HAL_ADC_MspInit+0xd0>)
 80002f8:	f043 0304 	orr.w	r3, r3, #4
 80002fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002fe:	4b22      	ldr	r3, [pc, #136]	; (8000388 <HAL_ADC_MspInit+0xd0>)
 8000300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000302:	f003 0304 	and.w	r3, r3, #4
 8000306:	60fb      	str	r3, [r7, #12]
 8000308:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800030a:	2301      	movs	r3, #1
 800030c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800030e:	230b      	movs	r3, #11
 8000310:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000312:	2300      	movs	r3, #0
 8000314:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000316:	f107 0314 	add.w	r3, r7, #20
 800031a:	4619      	mov	r1, r3
 800031c:	481b      	ldr	r0, [pc, #108]	; (800038c <HAL_ADC_MspInit+0xd4>)
 800031e:	f002 fead 	bl	800307c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000322:	4b1b      	ldr	r3, [pc, #108]	; (8000390 <HAL_ADC_MspInit+0xd8>)
 8000324:	4a1b      	ldr	r2, [pc, #108]	; (8000394 <HAL_ADC_MspInit+0xdc>)
 8000326:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000328:	4b19      	ldr	r3, [pc, #100]	; (8000390 <HAL_ADC_MspInit+0xd8>)
 800032a:	2200      	movs	r2, #0
 800032c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800032e:	4b18      	ldr	r3, [pc, #96]	; (8000390 <HAL_ADC_MspInit+0xd8>)
 8000330:	2200      	movs	r2, #0
 8000332:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000334:	4b16      	ldr	r3, [pc, #88]	; (8000390 <HAL_ADC_MspInit+0xd8>)
 8000336:	2200      	movs	r2, #0
 8000338:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800033a:	4b15      	ldr	r3, [pc, #84]	; (8000390 <HAL_ADC_MspInit+0xd8>)
 800033c:	2280      	movs	r2, #128	; 0x80
 800033e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000340:	4b13      	ldr	r3, [pc, #76]	; (8000390 <HAL_ADC_MspInit+0xd8>)
 8000342:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000346:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000348:	4b11      	ldr	r3, [pc, #68]	; (8000390 <HAL_ADC_MspInit+0xd8>)
 800034a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800034e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000350:	4b0f      	ldr	r3, [pc, #60]	; (8000390 <HAL_ADC_MspInit+0xd8>)
 8000352:	2220      	movs	r2, #32
 8000354:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000356:	4b0e      	ldr	r3, [pc, #56]	; (8000390 <HAL_ADC_MspInit+0xd8>)
 8000358:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800035c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800035e:	480c      	ldr	r0, [pc, #48]	; (8000390 <HAL_ADC_MspInit+0xd8>)
 8000360:	f002 fc94 	bl	8002c8c <HAL_DMA_Init>
 8000364:	4603      	mov	r3, r0
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 800036a:	f000 fd85 	bl	8000e78 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	4a07      	ldr	r2, [pc, #28]	; (8000390 <HAL_ADC_MspInit+0xd8>)
 8000372:	64da      	str	r2, [r3, #76]	; 0x4c
 8000374:	4a06      	ldr	r2, [pc, #24]	; (8000390 <HAL_ADC_MspInit+0xd8>)
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800037a:	bf00      	nop
 800037c:	3728      	adds	r7, #40	; 0x28
 800037e:	46bd      	mov	sp, r7
 8000380:	bd80      	pop	{r7, pc}
 8000382:	bf00      	nop
 8000384:	50040000 	.word	0x50040000
 8000388:	40021000 	.word	0x40021000
 800038c:	48000800 	.word	0x48000800
 8000390:	200000d8 	.word	0x200000d8
 8000394:	40020008 	.word	0x40020008

08000398 <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DMA_HandleTypeDef hdma_dac_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b08a      	sub	sp, #40	; 0x28
 800039c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800039e:	1d3b      	adds	r3, r7, #4
 80003a0:	2224      	movs	r2, #36	; 0x24
 80003a2:	2100      	movs	r1, #0
 80003a4:	4618      	mov	r0, r3
 80003a6:	f004 fd81 	bl	8004eac <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80003aa:	4b12      	ldr	r3, [pc, #72]	; (80003f4 <MX_DAC1_Init+0x5c>)
 80003ac:	4a12      	ldr	r2, [pc, #72]	; (80003f8 <MX_DAC1_Init+0x60>)
 80003ae:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80003b0:	4810      	ldr	r0, [pc, #64]	; (80003f4 <MX_DAC1_Init+0x5c>)
 80003b2:	f002 f9ba 	bl	800272a <HAL_DAC_Init>
 80003b6:	4603      	mov	r3, r0
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d001      	beq.n	80003c0 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80003bc:	f000 fd5c 	bl	8000e78 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80003c0:	2300      	movs	r3, #0
 80003c2:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 80003c4:	2304      	movs	r3, #4
 80003c6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80003c8:	2300      	movs	r3, #0
 80003ca:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80003cc:	2300      	movs	r3, #0
 80003ce:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80003d0:	2300      	movs	r3, #0
 80003d2:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80003d4:	1d3b      	adds	r3, r7, #4
 80003d6:	2200      	movs	r2, #0
 80003d8:	4619      	mov	r1, r3
 80003da:	4806      	ldr	r0, [pc, #24]	; (80003f4 <MX_DAC1_Init+0x5c>)
 80003dc:	f002 fab2 	bl	8002944 <HAL_DAC_ConfigChannel>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d001      	beq.n	80003ea <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80003e6:	f000 fd47 	bl	8000e78 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80003ea:	bf00      	nop
 80003ec:	3728      	adds	r7, #40	; 0x28
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	bf00      	nop
 80003f4:	20000120 	.word	0x20000120
 80003f8:	40007400 	.word	0x40007400

080003fc <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b08a      	sub	sp, #40	; 0x28
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000404:	f107 0314 	add.w	r3, r7, #20
 8000408:	2200      	movs	r2, #0
 800040a:	601a      	str	r2, [r3, #0]
 800040c:	605a      	str	r2, [r3, #4]
 800040e:	609a      	str	r2, [r3, #8]
 8000410:	60da      	str	r2, [r3, #12]
 8000412:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	4a2b      	ldr	r2, [pc, #172]	; (80004c8 <HAL_DAC_MspInit+0xcc>)
 800041a:	4293      	cmp	r3, r2
 800041c:	d150      	bne.n	80004c0 <HAL_DAC_MspInit+0xc4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800041e:	4b2b      	ldr	r3, [pc, #172]	; (80004cc <HAL_DAC_MspInit+0xd0>)
 8000420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000422:	4a2a      	ldr	r2, [pc, #168]	; (80004cc <HAL_DAC_MspInit+0xd0>)
 8000424:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000428:	6593      	str	r3, [r2, #88]	; 0x58
 800042a:	4b28      	ldr	r3, [pc, #160]	; (80004cc <HAL_DAC_MspInit+0xd0>)
 800042c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800042e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000432:	613b      	str	r3, [r7, #16]
 8000434:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000436:	4b25      	ldr	r3, [pc, #148]	; (80004cc <HAL_DAC_MspInit+0xd0>)
 8000438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800043a:	4a24      	ldr	r2, [pc, #144]	; (80004cc <HAL_DAC_MspInit+0xd0>)
 800043c:	f043 0301 	orr.w	r3, r3, #1
 8000440:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000442:	4b22      	ldr	r3, [pc, #136]	; (80004cc <HAL_DAC_MspInit+0xd0>)
 8000444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000446:	f003 0301 	and.w	r3, r3, #1
 800044a:	60fb      	str	r3, [r7, #12]
 800044c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800044e:	2310      	movs	r3, #16
 8000450:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000452:	2303      	movs	r3, #3
 8000454:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000456:	2300      	movs	r3, #0
 8000458:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800045a:	f107 0314 	add.w	r3, r7, #20
 800045e:	4619      	mov	r1, r3
 8000460:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000464:	f002 fe0a 	bl	800307c <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA2_Channel4;
 8000468:	4b19      	ldr	r3, [pc, #100]	; (80004d0 <HAL_DAC_MspInit+0xd4>)
 800046a:	4a1a      	ldr	r2, [pc, #104]	; (80004d4 <HAL_DAC_MspInit+0xd8>)
 800046c:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_3;
 800046e:	4b18      	ldr	r3, [pc, #96]	; (80004d0 <HAL_DAC_MspInit+0xd4>)
 8000470:	2203      	movs	r2, #3
 8000472:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000474:	4b16      	ldr	r3, [pc, #88]	; (80004d0 <HAL_DAC_MspInit+0xd4>)
 8000476:	2210      	movs	r2, #16
 8000478:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800047a:	4b15      	ldr	r3, [pc, #84]	; (80004d0 <HAL_DAC_MspInit+0xd4>)
 800047c:	2200      	movs	r2, #0
 800047e:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000480:	4b13      	ldr	r3, [pc, #76]	; (80004d0 <HAL_DAC_MspInit+0xd4>)
 8000482:	2280      	movs	r2, #128	; 0x80
 8000484:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000486:	4b12      	ldr	r3, [pc, #72]	; (80004d0 <HAL_DAC_MspInit+0xd4>)
 8000488:	f44f 7200 	mov.w	r2, #512	; 0x200
 800048c:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800048e:	4b10      	ldr	r3, [pc, #64]	; (80004d0 <HAL_DAC_MspInit+0xd4>)
 8000490:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000494:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 8000496:	4b0e      	ldr	r3, [pc, #56]	; (80004d0 <HAL_DAC_MspInit+0xd4>)
 8000498:	2220      	movs	r2, #32
 800049a:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 800049c:	4b0c      	ldr	r3, [pc, #48]	; (80004d0 <HAL_DAC_MspInit+0xd4>)
 800049e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80004a2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 80004a4:	480a      	ldr	r0, [pc, #40]	; (80004d0 <HAL_DAC_MspInit+0xd4>)
 80004a6:	f002 fbf1 	bl	8002c8c <HAL_DMA_Init>
 80004aa:	4603      	mov	r3, r0
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d001      	beq.n	80004b4 <HAL_DAC_MspInit+0xb8>
    {
      Error_Handler();
 80004b0:	f000 fce2 	bl	8000e78 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac_ch1);
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	4a06      	ldr	r2, [pc, #24]	; (80004d0 <HAL_DAC_MspInit+0xd4>)
 80004b8:	609a      	str	r2, [r3, #8]
 80004ba:	4a05      	ldr	r2, [pc, #20]	; (80004d0 <HAL_DAC_MspInit+0xd4>)
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 80004c0:	bf00      	nop
 80004c2:	3728      	adds	r7, #40	; 0x28
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	40007400 	.word	0x40007400
 80004cc:	40021000 	.word	0x40021000
 80004d0:	20000134 	.word	0x20000134
 80004d4:	40020444 	.word	0x40020444

080004d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004de:	4b16      	ldr	r3, [pc, #88]	; (8000538 <MX_DMA_Init+0x60>)
 80004e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80004e2:	4a15      	ldr	r2, [pc, #84]	; (8000538 <MX_DMA_Init+0x60>)
 80004e4:	f043 0301 	orr.w	r3, r3, #1
 80004e8:	6493      	str	r3, [r2, #72]	; 0x48
 80004ea:	4b13      	ldr	r3, [pc, #76]	; (8000538 <MX_DMA_Init+0x60>)
 80004ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80004ee:	f003 0301 	and.w	r3, r3, #1
 80004f2:	607b      	str	r3, [r7, #4]
 80004f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80004f6:	4b10      	ldr	r3, [pc, #64]	; (8000538 <MX_DMA_Init+0x60>)
 80004f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80004fa:	4a0f      	ldr	r2, [pc, #60]	; (8000538 <MX_DMA_Init+0x60>)
 80004fc:	f043 0302 	orr.w	r3, r3, #2
 8000500:	6493      	str	r3, [r2, #72]	; 0x48
 8000502:	4b0d      	ldr	r3, [pc, #52]	; (8000538 <MX_DMA_Init+0x60>)
 8000504:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000506:	f003 0302 	and.w	r3, r3, #2
 800050a:	603b      	str	r3, [r7, #0]
 800050c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800050e:	2200      	movs	r2, #0
 8000510:	2100      	movs	r1, #0
 8000512:	200b      	movs	r0, #11
 8000514:	f002 f8d3 	bl	80026be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000518:	200b      	movs	r0, #11
 800051a:	f002 f8ec 	bl	80026f6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 0, 0);
 800051e:	2200      	movs	r2, #0
 8000520:	2100      	movs	r1, #0
 8000522:	203b      	movs	r0, #59	; 0x3b
 8000524:	f002 f8cb 	bl	80026be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8000528:	203b      	movs	r0, #59	; 0x3b
 800052a:	f002 f8e4 	bl	80026f6 <HAL_NVIC_EnableIRQ>

}
 800052e:	bf00      	nop
 8000530:	3708      	adds	r7, #8
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	40021000 	.word	0x40021000

0800053c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b08a      	sub	sp, #40	; 0x28
 8000540:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000542:	f107 0314 	add.w	r3, r7, #20
 8000546:	2200      	movs	r2, #0
 8000548:	601a      	str	r2, [r3, #0]
 800054a:	605a      	str	r2, [r3, #4]
 800054c:	609a      	str	r2, [r3, #8]
 800054e:	60da      	str	r2, [r3, #12]
 8000550:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000552:	4b2b      	ldr	r3, [pc, #172]	; (8000600 <MX_GPIO_Init+0xc4>)
 8000554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000556:	4a2a      	ldr	r2, [pc, #168]	; (8000600 <MX_GPIO_Init+0xc4>)
 8000558:	f043 0304 	orr.w	r3, r3, #4
 800055c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800055e:	4b28      	ldr	r3, [pc, #160]	; (8000600 <MX_GPIO_Init+0xc4>)
 8000560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000562:	f003 0304 	and.w	r3, r3, #4
 8000566:	613b      	str	r3, [r7, #16]
 8000568:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800056a:	4b25      	ldr	r3, [pc, #148]	; (8000600 <MX_GPIO_Init+0xc4>)
 800056c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800056e:	4a24      	ldr	r2, [pc, #144]	; (8000600 <MX_GPIO_Init+0xc4>)
 8000570:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000574:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000576:	4b22      	ldr	r3, [pc, #136]	; (8000600 <MX_GPIO_Init+0xc4>)
 8000578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800057a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800057e:	60fb      	str	r3, [r7, #12]
 8000580:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000582:	4b1f      	ldr	r3, [pc, #124]	; (8000600 <MX_GPIO_Init+0xc4>)
 8000584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000586:	4a1e      	ldr	r2, [pc, #120]	; (8000600 <MX_GPIO_Init+0xc4>)
 8000588:	f043 0301 	orr.w	r3, r3, #1
 800058c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800058e:	4b1c      	ldr	r3, [pc, #112]	; (8000600 <MX_GPIO_Init+0xc4>)
 8000590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000592:	f003 0301 	and.w	r3, r3, #1
 8000596:	60bb      	str	r3, [r7, #8]
 8000598:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800059a:	4b19      	ldr	r3, [pc, #100]	; (8000600 <MX_GPIO_Init+0xc4>)
 800059c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800059e:	4a18      	ldr	r2, [pc, #96]	; (8000600 <MX_GPIO_Init+0xc4>)
 80005a0:	f043 0302 	orr.w	r3, r3, #2
 80005a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005a6:	4b16      	ldr	r3, [pc, #88]	; (8000600 <MX_GPIO_Init+0xc4>)
 80005a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005aa:	f003 0302 	and.w	r3, r3, #2
 80005ae:	607b      	str	r3, [r7, #4]
 80005b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005b2:	2200      	movs	r2, #0
 80005b4:	2120      	movs	r1, #32
 80005b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ba:	f002 ff09 	bl	80033d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005c4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80005c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ca:	2300      	movs	r3, #0
 80005cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005ce:	f107 0314 	add.w	r3, r7, #20
 80005d2:	4619      	mov	r1, r3
 80005d4:	480b      	ldr	r0, [pc, #44]	; (8000604 <MX_GPIO_Init+0xc8>)
 80005d6:	f002 fd51 	bl	800307c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80005da:	2320      	movs	r3, #32
 80005dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005de:	2301      	movs	r3, #1
 80005e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e2:	2300      	movs	r3, #0
 80005e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e6:	2300      	movs	r3, #0
 80005e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80005ea:	f107 0314 	add.w	r3, r7, #20
 80005ee:	4619      	mov	r1, r3
 80005f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005f4:	f002 fd42 	bl	800307c <HAL_GPIO_Init>

}
 80005f8:	bf00      	nop
 80005fa:	3728      	adds	r7, #40	; 0x28
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	40021000 	.word	0x40021000
 8000604:	48000800 	.word	0x48000800

08000608 <HAL_ADC_ConvHalfCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
InBufPtr = &ADC_val[0];
 8000610:	4b09      	ldr	r3, [pc, #36]	; (8000638 <HAL_ADC_ConvHalfCpltCallback+0x30>)
 8000612:	4a0a      	ldr	r2, [pc, #40]	; (800063c <HAL_ADC_ConvHalfCpltCallback+0x34>)
 8000614:	601a      	str	r2, [r3, #0]
OutBufPtr = &DAC_val[DataSize];
 8000616:	4b0a      	ldr	r3, [pc, #40]	; (8000640 <HAL_ADC_ConvHalfCpltCallback+0x38>)
 8000618:	4a0a      	ldr	r2, [pc, #40]	; (8000644 <HAL_ADC_ConvHalfCpltCallback+0x3c>)
 800061a:	601a      	str	r2, [r3, #0]
HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800061c:	2201      	movs	r2, #1
 800061e:	2120      	movs	r1, #32
 8000620:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000624:	f002 fed4 	bl	80033d0 <HAL_GPIO_WritePin>
Read_Ready = 1;
 8000628:	4b07      	ldr	r3, [pc, #28]	; (8000648 <HAL_ADC_ConvHalfCpltCallback+0x40>)
 800062a:	2201      	movs	r2, #1
 800062c:	601a      	str	r2, [r3, #0]
}
 800062e:	bf00      	nop
 8000630:	3708      	adds	r7, #8
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	2000004c 	.word	0x2000004c
 800063c:	2000c474 	.word	0x2000c474
 8000640:	20000050 	.word	0x20000050
 8000644:	2000423c 	.word	0x2000423c
 8000648:	20000054 	.word	0x20000054

0800064c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
InBufPtr = &ADC_val[DataSize];
 8000654:	4b09      	ldr	r3, [pc, #36]	; (800067c <HAL_ADC_ConvCpltCallback+0x30>)
 8000656:	4a0a      	ldr	r2, [pc, #40]	; (8000680 <HAL_ADC_ConvCpltCallback+0x34>)
 8000658:	601a      	str	r2, [r3, #0]
OutBufPtr = &DAC_val[0];
 800065a:	4b0a      	ldr	r3, [pc, #40]	; (8000684 <HAL_ADC_ConvCpltCallback+0x38>)
 800065c:	4a0a      	ldr	r2, [pc, #40]	; (8000688 <HAL_ADC_ConvCpltCallback+0x3c>)
 800065e:	601a      	str	r2, [r3, #0]
HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000660:	2200      	movs	r2, #0
 8000662:	2120      	movs	r1, #32
 8000664:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000668:	f002 feb2 	bl	80033d0 <HAL_GPIO_WritePin>
Read_Ready = 1;
 800066c:	4b07      	ldr	r3, [pc, #28]	; (800068c <HAL_ADC_ConvCpltCallback+0x40>)
 800066e:	2201      	movs	r2, #1
 8000670:	601a      	str	r2, [r3, #0]
}
 8000672:	bf00      	nop
 8000674:	3708      	adds	r7, #8
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	2000004c 	.word	0x2000004c
 8000680:	2000cc74 	.word	0x2000cc74
 8000684:	20000050 	.word	0x20000050
 8000688:	20003a3c 	.word	0x20003a3c
 800068c:	20000054 	.word	0x20000054

08000690 <Do_Comb0>:
}




float Do_Comb0(float inSample){
 8000690:	b480      	push	{r7}
 8000692:	b085      	sub	sp, #20
 8000694:	af00      	add	r7, sp, #0
 8000696:	ed87 0a01 	vstr	s0, [r7, #4]
	float readback = cfbuf0[cf0_p];
 800069a:	4b19      	ldr	r3, [pc, #100]	; (8000700 <Do_Comb0+0x70>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	4a19      	ldr	r2, [pc, #100]	; (8000704 <Do_Comb0+0x74>)
 80006a0:	009b      	lsls	r3, r3, #2
 80006a2:	4413      	add	r3, r2
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	60fb      	str	r3, [r7, #12]
	float new = readback*cf0_g + inSample;
 80006a8:	4b17      	ldr	r3, [pc, #92]	; (8000708 <Do_Comb0+0x78>)
 80006aa:	ed93 7a00 	vldr	s14, [r3]
 80006ae:	edd7 7a03 	vldr	s15, [r7, #12]
 80006b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006b6:	ed97 7a01 	vldr	s14, [r7, #4]
 80006ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006be:	edc7 7a02 	vstr	s15, [r7, #8]
	cfbuf0[cf0_p] = new;
 80006c2:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <Do_Comb0+0x70>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	4a0f      	ldr	r2, [pc, #60]	; (8000704 <Do_Comb0+0x74>)
 80006c8:	009b      	lsls	r3, r3, #2
 80006ca:	4413      	add	r3, r2
 80006cc:	68ba      	ldr	r2, [r7, #8]
 80006ce:	601a      	str	r2, [r3, #0]
	cf0_p++;
 80006d0:	4b0b      	ldr	r3, [pc, #44]	; (8000700 <Do_Comb0+0x70>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	3301      	adds	r3, #1
 80006d6:	4a0a      	ldr	r2, [pc, #40]	; (8000700 <Do_Comb0+0x70>)
 80006d8:	6013      	str	r3, [r2, #0]
	if(cf0_p == cf0_lim) cf0_p = 0;
 80006da:	4b09      	ldr	r3, [pc, #36]	; (8000700 <Do_Comb0+0x70>)
 80006dc:	681a      	ldr	r2, [r3, #0]
 80006de:	4b0b      	ldr	r3, [pc, #44]	; (800070c <Do_Comb0+0x7c>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	429a      	cmp	r2, r3
 80006e4:	d102      	bne.n	80006ec <Do_Comb0+0x5c>
 80006e6:	4b06      	ldr	r3, [pc, #24]	; (8000700 <Do_Comb0+0x70>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
	return readback;
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	ee07 3a90 	vmov	s15, r3
}
 80006f2:	eeb0 0a67 	vmov.f32	s0, s15
 80006f6:	3714      	adds	r7, #20
 80006f8:	46bd      	mov	sp, r7
 80006fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fe:	4770      	bx	lr
 8000700:	20000058 	.word	0x20000058
 8000704:	20004a3c 	.word	0x20004a3c
 8000708:	20000008 	.word	0x20000008
 800070c:	2000c470 	.word	0x2000c470

08000710 <Do_Comb1>:

float Do_Comb1(float inSample){
 8000710:	b480      	push	{r7}
 8000712:	b085      	sub	sp, #20
 8000714:	af00      	add	r7, sp, #0
 8000716:	ed87 0a01 	vstr	s0, [r7, #4]
	float readback = cfbuf1[cf1_p];
 800071a:	4b19      	ldr	r3, [pc, #100]	; (8000780 <Do_Comb1+0x70>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	4a19      	ldr	r2, [pc, #100]	; (8000784 <Do_Comb1+0x74>)
 8000720:	009b      	lsls	r3, r3, #2
 8000722:	4413      	add	r3, r2
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	60fb      	str	r3, [r7, #12]
	float new = readback*cf1_g + inSample;
 8000728:	4b17      	ldr	r3, [pc, #92]	; (8000788 <Do_Comb1+0x78>)
 800072a:	ed93 7a00 	vldr	s14, [r3]
 800072e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000732:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000736:	ed97 7a01 	vldr	s14, [r7, #4]
 800073a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800073e:	edc7 7a02 	vstr	s15, [r7, #8]
	cfbuf1[cf1_p] = new;
 8000742:	4b0f      	ldr	r3, [pc, #60]	; (8000780 <Do_Comb1+0x70>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	4a0f      	ldr	r2, [pc, #60]	; (8000784 <Do_Comb1+0x74>)
 8000748:	009b      	lsls	r3, r3, #2
 800074a:	4413      	add	r3, r2
 800074c:	68ba      	ldr	r2, [r7, #8]
 800074e:	601a      	str	r2, [r3, #0]
	cf1_p++;
 8000750:	4b0b      	ldr	r3, [pc, #44]	; (8000780 <Do_Comb1+0x70>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	3301      	adds	r3, #1
 8000756:	4a0a      	ldr	r2, [pc, #40]	; (8000780 <Do_Comb1+0x70>)
 8000758:	6013      	str	r3, [r2, #0]
	if(cf1_p == cf1_lim) cf1_p = 0;
 800075a:	4b09      	ldr	r3, [pc, #36]	; (8000780 <Do_Comb1+0x70>)
 800075c:	681a      	ldr	r2, [r3, #0]
 800075e:	4b0b      	ldr	r3, [pc, #44]	; (800078c <Do_Comb1+0x7c>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	429a      	cmp	r2, r3
 8000764:	d102      	bne.n	800076c <Do_Comb1+0x5c>
 8000766:	4b06      	ldr	r3, [pc, #24]	; (8000780 <Do_Comb1+0x70>)
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
	return readback;
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	ee07 3a90 	vmov	s15, r3
}
 8000772:	eeb0 0a67 	vmov.f32	s0, s15
 8000776:	3714      	adds	r7, #20
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr
 8000780:	2000005c 	.word	0x2000005c
 8000784:	20000904 	.word	0x20000904
 8000788:	2000000c 	.word	0x2000000c
 800078c:	20000900 	.word	0x20000900

08000790 <Do_Comb2>:

float Do_Comb2(float inSample){
 8000790:	b480      	push	{r7}
 8000792:	b085      	sub	sp, #20
 8000794:	af00      	add	r7, sp, #0
 8000796:	ed87 0a01 	vstr	s0, [r7, #4]
	float readback = cfbuf2[cf2_p];
 800079a:	4b19      	ldr	r3, [pc, #100]	; (8000800 <Do_Comb2+0x70>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	4a19      	ldr	r2, [pc, #100]	; (8000804 <Do_Comb2+0x74>)
 80007a0:	009b      	lsls	r3, r3, #2
 80007a2:	4413      	add	r3, r2
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	60fb      	str	r3, [r7, #12]
	float new = readback*cf2_g + inSample;
 80007a8:	4b17      	ldr	r3, [pc, #92]	; (8000808 <Do_Comb2+0x78>)
 80007aa:	ed93 7a00 	vldr	s14, [r3]
 80007ae:	edd7 7a03 	vldr	s15, [r7, #12]
 80007b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80007b6:	ed97 7a01 	vldr	s14, [r7, #4]
 80007ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80007be:	edc7 7a02 	vstr	s15, [r7, #8]
	cfbuf2[cf2_p] = new;
 80007c2:	4b0f      	ldr	r3, [pc, #60]	; (8000800 <Do_Comb2+0x70>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	4a0f      	ldr	r2, [pc, #60]	; (8000804 <Do_Comb2+0x74>)
 80007c8:	009b      	lsls	r3, r3, #2
 80007ca:	4413      	add	r3, r2
 80007cc:	68ba      	ldr	r2, [r7, #8]
 80007ce:	601a      	str	r2, [r3, #0]
	cf2_p++;
 80007d0:	4b0b      	ldr	r3, [pc, #44]	; (8000800 <Do_Comb2+0x70>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	3301      	adds	r3, #1
 80007d6:	4a0a      	ldr	r2, [pc, #40]	; (8000800 <Do_Comb2+0x70>)
 80007d8:	6013      	str	r3, [r2, #0]
	if(cf2_p == cf2_lim) cf2_p = 0;
 80007da:	4b09      	ldr	r3, [pc, #36]	; (8000800 <Do_Comb2+0x70>)
 80007dc:	681a      	ldr	r2, [r3, #0]
 80007de:	4b0b      	ldr	r3, [pc, #44]	; (800080c <Do_Comb2+0x7c>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	429a      	cmp	r2, r3
 80007e4:	d102      	bne.n	80007ec <Do_Comb2+0x5c>
 80007e6:	4b06      	ldr	r3, [pc, #24]	; (8000800 <Do_Comb2+0x70>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
	return readback;
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	ee07 3a90 	vmov	s15, r3
}
 80007f2:	eeb0 0a67 	vmov.f32	s0, s15
 80007f6:	3714      	adds	r7, #20
 80007f8:	46bd      	mov	sp, r7
 80007fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fe:	4770      	bx	lr
 8000800:	20000060 	.word	0x20000060
 8000804:	2000d474 	.word	0x2000d474
 8000808:	20000010 	.word	0x20000010
 800080c:	2000c46c 	.word	0x2000c46c

08000810 <Do_Comb3>:

float Do_Comb3(float inSample){
 8000810:	b480      	push	{r7}
 8000812:	b085      	sub	sp, #20
 8000814:	af00      	add	r7, sp, #0
 8000816:	ed87 0a01 	vstr	s0, [r7, #4]
	float readback = cfbuf3[cf3_p];
 800081a:	4b19      	ldr	r3, [pc, #100]	; (8000880 <Do_Comb3+0x70>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	4a19      	ldr	r2, [pc, #100]	; (8000884 <Do_Comb3+0x74>)
 8000820:	009b      	lsls	r3, r3, #2
 8000822:	4413      	add	r3, r2
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	60fb      	str	r3, [r7, #12]
	float new = readback*cf3_g + inSample;
 8000828:	4b17      	ldr	r3, [pc, #92]	; (8000888 <Do_Comb3+0x78>)
 800082a:	ed93 7a00 	vldr	s14, [r3]
 800082e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000832:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000836:	ed97 7a01 	vldr	s14, [r7, #4]
 800083a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800083e:	edc7 7a02 	vstr	s15, [r7, #8]
	cfbuf3[cf3_p] = new;
 8000842:	4b0f      	ldr	r3, [pc, #60]	; (8000880 <Do_Comb3+0x70>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	4a0f      	ldr	r2, [pc, #60]	; (8000884 <Do_Comb3+0x74>)
 8000848:	009b      	lsls	r3, r3, #2
 800084a:	4413      	add	r3, r2
 800084c:	68ba      	ldr	r2, [r7, #8]
 800084e:	601a      	str	r2, [r3, #0]
	cf3_p++;
 8000850:	4b0b      	ldr	r3, [pc, #44]	; (8000880 <Do_Comb3+0x70>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	3301      	adds	r3, #1
 8000856:	4a0a      	ldr	r2, [pc, #40]	; (8000880 <Do_Comb3+0x70>)
 8000858:	6013      	str	r3, [r2, #0]
	if(cf3_p == cf3_lim) cf3_p = 0;
 800085a:	4b09      	ldr	r3, [pc, #36]	; (8000880 <Do_Comb3+0x70>)
 800085c:	681a      	ldr	r2, [r3, #0]
 800085e:	4b0b      	ldr	r3, [pc, #44]	; (800088c <Do_Comb3+0x7c>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	429a      	cmp	r2, r3
 8000864:	d102      	bne.n	800086c <Do_Comb3+0x5c>
 8000866:	4b06      	ldr	r3, [pc, #24]	; (8000880 <Do_Comb3+0x70>)
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
	return readback;
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	ee07 3a90 	vmov	s15, r3
}
 8000872:	eeb0 0a67 	vmov.f32	s0, s15
 8000876:	3714      	adds	r7, #20
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr
 8000880:	20000064 	.word	0x20000064
 8000884:	20008050 	.word	0x20008050
 8000888:	20000014 	.word	0x20000014
 800088c:	2000804c 	.word	0x2000804c

08000890 <Do_Allpass0>:

float Do_Allpass0(float inSample){
 8000890:	b480      	push	{r7}
 8000892:	b085      	sub	sp, #20
 8000894:	af00      	add	r7, sp, #0
 8000896:	ed87 0a01 	vstr	s0, [r7, #4]
	float readback = apbuf0[ap0_p];
 800089a:	4b21      	ldr	r3, [pc, #132]	; (8000920 <Do_Allpass0+0x90>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	4a21      	ldr	r2, [pc, #132]	; (8000924 <Do_Allpass0+0x94>)
 80008a0:	009b      	lsls	r3, r3, #2
 80008a2:	4413      	add	r3, r2
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	60fb      	str	r3, [r7, #12]
	readback += (-ap0_g) * inSample;
 80008a8:	4b1f      	ldr	r3, [pc, #124]	; (8000928 <Do_Allpass0+0x98>)
 80008aa:	edd3 7a00 	vldr	s15, [r3]
 80008ae:	eeb1 7a67 	vneg.f32	s14, s15
 80008b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80008b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008ba:	ed97 7a03 	vldr	s14, [r7, #12]
 80008be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008c2:	edc7 7a03 	vstr	s15, [r7, #12]
	float new = readback*ap0_g + inSample;
 80008c6:	4b18      	ldr	r3, [pc, #96]	; (8000928 <Do_Allpass0+0x98>)
 80008c8:	ed93 7a00 	vldr	s14, [r3]
 80008cc:	edd7 7a03 	vldr	s15, [r7, #12]
 80008d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008d4:	ed97 7a01 	vldr	s14, [r7, #4]
 80008d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008dc:	edc7 7a02 	vstr	s15, [r7, #8]
	cfbuf0[ap0_p] = new;
 80008e0:	4b0f      	ldr	r3, [pc, #60]	; (8000920 <Do_Allpass0+0x90>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a11      	ldr	r2, [pc, #68]	; (800092c <Do_Allpass0+0x9c>)
 80008e6:	009b      	lsls	r3, r3, #2
 80008e8:	4413      	add	r3, r2
 80008ea:	68ba      	ldr	r2, [r7, #8]
 80008ec:	601a      	str	r2, [r3, #0]
	ap0_p++;
 80008ee:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <Do_Allpass0+0x90>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	3301      	adds	r3, #1
 80008f4:	4a0a      	ldr	r2, [pc, #40]	; (8000920 <Do_Allpass0+0x90>)
 80008f6:	6013      	str	r3, [r2, #0]
	if(ap0_p == ap0_lim) ap0_p = 0;
 80008f8:	4b09      	ldr	r3, [pc, #36]	; (8000920 <Do_Allpass0+0x90>)
 80008fa:	681a      	ldr	r2, [r3, #0]
 80008fc:	4b0c      	ldr	r3, [pc, #48]	; (8000930 <Do_Allpass0+0xa0>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	429a      	cmp	r2, r3
 8000902:	d102      	bne.n	800090a <Do_Allpass0+0x7a>
 8000904:	4b06      	ldr	r3, [pc, #24]	; (8000920 <Do_Allpass0+0x90>)
 8000906:	2200      	movs	r2, #0
 8000908:	601a      	str	r2, [r3, #0]
	return readback;
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	ee07 3a90 	vmov	s15, r3
}
 8000910:	eeb0 0a67 	vmov.f32	s0, s15
 8000914:	3714      	adds	r7, #20
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	20000068 	.word	0x20000068
 8000924:	2000017c 	.word	0x2000017c
 8000928:	20000018 	.word	0x20000018
 800092c:	20004a3c 	.word	0x20004a3c
 8000930:	2001111c 	.word	0x2001111c

08000934 <Do_Allpass1>:

float Do_Allpass1(float inSample){
 8000934:	b480      	push	{r7}
 8000936:	b085      	sub	sp, #20
 8000938:	af00      	add	r7, sp, #0
 800093a:	ed87 0a01 	vstr	s0, [r7, #4]
	float readback = apbuf1[ap1_p];
 800093e:	4b21      	ldr	r3, [pc, #132]	; (80009c4 <Do_Allpass1+0x90>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	4a21      	ldr	r2, [pc, #132]	; (80009c8 <Do_Allpass1+0x94>)
 8000944:	009b      	lsls	r3, r3, #2
 8000946:	4413      	add	r3, r2
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	60fb      	str	r3, [r7, #12]
	readback += (-ap1_g) * inSample;
 800094c:	4b1f      	ldr	r3, [pc, #124]	; (80009cc <Do_Allpass1+0x98>)
 800094e:	edd3 7a00 	vldr	s15, [r3]
 8000952:	eeb1 7a67 	vneg.f32	s14, s15
 8000956:	edd7 7a01 	vldr	s15, [r7, #4]
 800095a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800095e:	ed97 7a03 	vldr	s14, [r7, #12]
 8000962:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000966:	edc7 7a03 	vstr	s15, [r7, #12]
	float new = readback*ap1_g + inSample;
 800096a:	4b18      	ldr	r3, [pc, #96]	; (80009cc <Do_Allpass1+0x98>)
 800096c:	ed93 7a00 	vldr	s14, [r3]
 8000970:	edd7 7a03 	vldr	s15, [r7, #12]
 8000974:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000978:	ed97 7a01 	vldr	s14, [r7, #4]
 800097c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000980:	edc7 7a02 	vstr	s15, [r7, #8]
	cfbuf1[ap1_p] = new;
 8000984:	4b0f      	ldr	r3, [pc, #60]	; (80009c4 <Do_Allpass1+0x90>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a11      	ldr	r2, [pc, #68]	; (80009d0 <Do_Allpass1+0x9c>)
 800098a:	009b      	lsls	r3, r3, #2
 800098c:	4413      	add	r3, r2
 800098e:	68ba      	ldr	r2, [r7, #8]
 8000990:	601a      	str	r2, [r3, #0]
	ap1_p++;
 8000992:	4b0c      	ldr	r3, [pc, #48]	; (80009c4 <Do_Allpass1+0x90>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	3301      	adds	r3, #1
 8000998:	4a0a      	ldr	r2, [pc, #40]	; (80009c4 <Do_Allpass1+0x90>)
 800099a:	6013      	str	r3, [r2, #0]
	if(ap1_p == ap1_lim) ap1_p = 0;
 800099c:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <Do_Allpass1+0x90>)
 800099e:	681a      	ldr	r2, [r3, #0]
 80009a0:	4b0c      	ldr	r3, [pc, #48]	; (80009d4 <Do_Allpass1+0xa0>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	429a      	cmp	r2, r3
 80009a6:	d102      	bne.n	80009ae <Do_Allpass1+0x7a>
 80009a8:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <Do_Allpass1+0x90>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
	return readback;
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	ee07 3a90 	vmov	s15, r3
}
 80009b4:	eeb0 0a67 	vmov.f32	s0, s15
 80009b8:	3714      	adds	r7, #20
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	2000006c 	.word	0x2000006c
 80009c8:	200037b4 	.word	0x200037b4
 80009cc:	2000001c 	.word	0x2000001c
 80009d0:	20000904 	.word	0x20000904
 80009d4:	200008fc 	.word	0x200008fc

080009d8 <Do_Allpass2>:

float Do_Allpass2(float inSample){
 80009d8:	b480      	push	{r7}
 80009da:	b085      	sub	sp, #20
 80009dc:	af00      	add	r7, sp, #0
 80009de:	ed87 0a01 	vstr	s0, [r7, #4]
	float readback = apbuf2[ap2_p];
 80009e2:	4b21      	ldr	r3, [pc, #132]	; (8000a68 <Do_Allpass2+0x90>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	4a21      	ldr	r2, [pc, #132]	; (8000a6c <Do_Allpass2+0x94>)
 80009e8:	009b      	lsls	r3, r3, #2
 80009ea:	4413      	add	r3, r2
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	60fb      	str	r3, [r7, #12]
	readback += (-ap2_g) * inSample;
 80009f0:	4b1f      	ldr	r3, [pc, #124]	; (8000a70 <Do_Allpass2+0x98>)
 80009f2:	edd3 7a00 	vldr	s15, [r3]
 80009f6:	eeb1 7a67 	vneg.f32	s14, s15
 80009fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80009fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a02:	ed97 7a03 	vldr	s14, [r7, #12]
 8000a06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a0a:	edc7 7a03 	vstr	s15, [r7, #12]
	float new = readback*ap2_g + inSample;
 8000a0e:	4b18      	ldr	r3, [pc, #96]	; (8000a70 <Do_Allpass2+0x98>)
 8000a10:	ed93 7a00 	vldr	s14, [r3]
 8000a14:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a1c:	ed97 7a01 	vldr	s14, [r7, #4]
 8000a20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a24:	edc7 7a02 	vstr	s15, [r7, #8]
	cfbuf2[ap2_p] = new;
 8000a28:	4b0f      	ldr	r3, [pc, #60]	; (8000a68 <Do_Allpass2+0x90>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a11      	ldr	r2, [pc, #68]	; (8000a74 <Do_Allpass2+0x9c>)
 8000a2e:	009b      	lsls	r3, r3, #2
 8000a30:	4413      	add	r3, r2
 8000a32:	68ba      	ldr	r2, [r7, #8]
 8000a34:	601a      	str	r2, [r3, #0]
	ap2_p++;
 8000a36:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <Do_Allpass2+0x90>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	4a0a      	ldr	r2, [pc, #40]	; (8000a68 <Do_Allpass2+0x90>)
 8000a3e:	6013      	str	r3, [r2, #0]
	if(ap2_p == ap2_lim) ap2_p = 0;
 8000a40:	4b09      	ldr	r3, [pc, #36]	; (8000a68 <Do_Allpass2+0x90>)
 8000a42:	681a      	ldr	r2, [r3, #0]
 8000a44:	4b0c      	ldr	r3, [pc, #48]	; (8000a78 <Do_Allpass2+0xa0>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	d102      	bne.n	8000a52 <Do_Allpass2+0x7a>
 8000a4c:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <Do_Allpass2+0x90>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	601a      	str	r2, [r3, #0]
	return readback;
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	ee07 3a90 	vmov	s15, r3
}
 8000a58:	eeb0 0a67 	vmov.f32	s0, s15
 8000a5c:	3714      	adds	r7, #20
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	20000070 	.word	0x20000070
 8000a6c:	2000c3b4 	.word	0x2000c3b4
 8000a70:	20000020 	.word	0x20000020
 8000a74:	2000d474 	.word	0x2000d474
 8000a78:	2000c3b0 	.word	0x2000c3b0

08000a7c <Do_Reverb>:

float Do_Reverb(float inSample){
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	ed2d 8b02 	vpush	{d8}
 8000a82:	b084      	sub	sp, #16
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	ed87 0a01 	vstr	s0, [r7, #4]
	float newsample = (Do_Comb0(inSample) + Do_Comb1(inSample) + Do_Comb2(inSample) + Do_Comb3(inSample))/4.0f;
 8000a8a:	ed97 0a01 	vldr	s0, [r7, #4]
 8000a8e:	f7ff fdff 	bl	8000690 <Do_Comb0>
 8000a92:	eeb0 8a40 	vmov.f32	s16, s0
 8000a96:	ed97 0a01 	vldr	s0, [r7, #4]
 8000a9a:	f7ff fe39 	bl	8000710 <Do_Comb1>
 8000a9e:	eef0 7a40 	vmov.f32	s15, s0
 8000aa2:	ee38 8a27 	vadd.f32	s16, s16, s15
 8000aa6:	ed97 0a01 	vldr	s0, [r7, #4]
 8000aaa:	f7ff fe71 	bl	8000790 <Do_Comb2>
 8000aae:	eef0 7a40 	vmov.f32	s15, s0
 8000ab2:	ee38 8a27 	vadd.f32	s16, s16, s15
 8000ab6:	ed97 0a01 	vldr	s0, [r7, #4]
 8000aba:	f7ff fea9 	bl	8000810 <Do_Comb3>
 8000abe:	eef0 7a40 	vmov.f32	s15, s0
 8000ac2:	ee38 7a27 	vadd.f32	s14, s16, s15
 8000ac6:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8000aca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ace:	edc7 7a03 	vstr	s15, [r7, #12]
	newsample = Do_Allpass0(newsample);
 8000ad2:	ed97 0a03 	vldr	s0, [r7, #12]
 8000ad6:	f7ff fedb 	bl	8000890 <Do_Allpass0>
 8000ada:	ed87 0a03 	vstr	s0, [r7, #12]
	newsample = Do_Allpass1(newsample);
 8000ade:	ed97 0a03 	vldr	s0, [r7, #12]
 8000ae2:	f7ff ff27 	bl	8000934 <Do_Allpass1>
 8000ae6:	ed87 0a03 	vstr	s0, [r7, #12]
	newsample = Do_Allpass2(newsample);
 8000aea:	ed97 0a03 	vldr	s0, [r7, #12]
 8000aee:	f7ff ff73 	bl	80009d8 <Do_Allpass2>
 8000af2:	ed87 0a03 	vstr	s0, [r7, #12]
	return newsample;
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	ee07 3a90 	vmov	s15, r3
}
 8000afc:	eeb0 0a67 	vmov.f32	s0, s15
 8000b00:	3710      	adds	r7, #16
 8000b02:	46bd      	mov	sp, r7
 8000b04:	ecbd 8b02 	vpop	{d8}
 8000b08:	bd80      	pop	{r7, pc}
	...

08000b0c <processDSP>:

void processDSP(){
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	ed2d 8b02 	vpush	{d8}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
	for(int n=0; n<DataSize; n++){
 8000b16:	2300      	movs	r3, #0
 8000b18:	607b      	str	r3, [r7, #4]
 8000b1a:	e04e      	b.n	8000bba <processDSP+0xae>

		floatBufor[n] = (((float)(InBufPtr[n])-2048)/2048);
 8000b1c:	4b2c      	ldr	r3, [pc, #176]	; (8000bd0 <processDSP+0xc4>)
 8000b1e:	681a      	ldr	r2, [r3, #0]
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	009b      	lsls	r3, r3, #2
 8000b24:	4413      	add	r3, r2
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	ee07 3a90 	vmov	s15, r3
 8000b2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b30:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8000bd4 <processDSP+0xc8>
 8000b34:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8000b38:	eddf 6a26 	vldr	s13, [pc, #152]	; 8000bd4 <processDSP+0xc8>
 8000b3c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b40:	4a25      	ldr	r2, [pc, #148]	; (8000bd8 <processDSP+0xcc>)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	009b      	lsls	r3, r3, #2
 8000b46:	4413      	add	r3, r2
 8000b48:	edc3 7a00 	vstr	s15, [r3]
		float sum = floatBufor[n];
 8000b4c:	4a22      	ldr	r2, [pc, #136]	; (8000bd8 <processDSP+0xcc>)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	009b      	lsls	r3, r3, #2
 8000b52:	4413      	add	r3, r2
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	603b      	str	r3, [r7, #0]
		sum = (1.0f-wet)*sum + wet*Do_Reverb(sum);
 8000b58:	4b20      	ldr	r3, [pc, #128]	; (8000bdc <processDSP+0xd0>)
 8000b5a:	edd3 7a00 	vldr	s15, [r3]
 8000b5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000b62:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000b66:	edd7 7a00 	vldr	s15, [r7]
 8000b6a:	ee27 8a27 	vmul.f32	s16, s14, s15
 8000b6e:	ed97 0a00 	vldr	s0, [r7]
 8000b72:	f7ff ff83 	bl	8000a7c <Do_Reverb>
 8000b76:	eeb0 7a40 	vmov.f32	s14, s0
 8000b7a:	4b18      	ldr	r3, [pc, #96]	; (8000bdc <processDSP+0xd0>)
 8000b7c:	edd3 7a00 	vldr	s15, [r3]
 8000b80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b84:	ee78 7a27 	vadd.f32	s15, s16, s15
 8000b88:	edc7 7a00 	vstr	s15, [r7]
		OutBufPtr[n]=(uint32_t)((sum*2048)+2048);
 8000b8c:	edd7 7a00 	vldr	s15, [r7]
 8000b90:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8000bd4 <processDSP+0xc8>
 8000b94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b98:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8000bd4 <processDSP+0xc8>
 8000b9c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000ba0:	4b0f      	ldr	r3, [pc, #60]	; (8000be0 <processDSP+0xd4>)
 8000ba2:	681a      	ldr	r2, [r3, #0]
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	009b      	lsls	r3, r3, #2
 8000ba8:	4413      	add	r3, r2
 8000baa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000bae:	ee17 2a90 	vmov	r2, s15
 8000bb2:	601a      	str	r2, [r3, #0]
	for(int n=0; n<DataSize; n++){
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	607b      	str	r3, [r7, #4]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000bc0:	dbac      	blt.n	8000b1c <processDSP+0x10>
	}

}
 8000bc2:	bf00      	nop
 8000bc4:	bf00      	nop
 8000bc6:	3708      	adds	r7, #8
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	ecbd 8b02 	vpop	{d8}
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	2000004c 	.word	0x2000004c
 8000bd4:	45000000 	.word	0x45000000
 8000bd8:	20011120 	.word	0x20011120
 8000bdc:	20000000 	.word	0x20000000
 8000be0:	20000050 	.word	0x20000050

08000be4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bea:	f000 fa3f 	bl	800106c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bee:	f000 f8bd 	bl	8000d6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bf2:	f7ff fca3 	bl	800053c <MX_GPIO_Init>
  MX_DMA_Init();
 8000bf6:	f7ff fc6f 	bl	80004d8 <MX_DMA_Init>
  MX_TIM6_Init();
 8000bfa:	f000 f9b7 	bl	8000f6c <MX_TIM6_Init>
  MX_ADC1_Init();
 8000bfe:	f7ff fae3 	bl	80001c8 <MX_ADC1_Init>
  MX_DAC1_Init();
 8000c02:	f7ff fbc9 	bl	8000398 <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */

  cf0_lim = (int)(time*l_CB0);
 8000c06:	4b45      	ldr	r3, [pc, #276]	; (8000d1c <main+0x138>)
 8000c08:	edd3 7a00 	vldr	s15, [r3]
 8000c0c:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8000d20 <main+0x13c>
 8000c10:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c14:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000c18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c1c:	ee17 2a90 	vmov	r2, s15
 8000c20:	4b40      	ldr	r3, [pc, #256]	; (8000d24 <main+0x140>)
 8000c22:	601a      	str	r2, [r3, #0]
  cf1_lim = (int)(time*l_CB1);
 8000c24:	4b3d      	ldr	r3, [pc, #244]	; (8000d1c <main+0x138>)
 8000c26:	edd3 7a00 	vldr	s15, [r3]
 8000c2a:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8000d28 <main+0x144>
 8000c2e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c32:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000c36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c3a:	ee17 2a90 	vmov	r2, s15
 8000c3e:	4b3b      	ldr	r3, [pc, #236]	; (8000d2c <main+0x148>)
 8000c40:	601a      	str	r2, [r3, #0]
  cf2_lim = (int)(time*l_CB2);
 8000c42:	4b36      	ldr	r3, [pc, #216]	; (8000d1c <main+0x138>)
 8000c44:	edd3 7a00 	vldr	s15, [r3]
 8000c48:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8000d30 <main+0x14c>
 8000c4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c50:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000c54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c58:	ee17 2a90 	vmov	r2, s15
 8000c5c:	4b35      	ldr	r3, [pc, #212]	; (8000d34 <main+0x150>)
 8000c5e:	601a      	str	r2, [r3, #0]
  cf3_lim = (int)(time*l_CB3);
 8000c60:	4b2e      	ldr	r3, [pc, #184]	; (8000d1c <main+0x138>)
 8000c62:	edd3 7a00 	vldr	s15, [r3]
 8000c66:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8000d38 <main+0x154>
 8000c6a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c6e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000c72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c76:	ee17 2a90 	vmov	r2, s15
 8000c7a:	4b30      	ldr	r3, [pc, #192]	; (8000d3c <main+0x158>)
 8000c7c:	601a      	str	r2, [r3, #0]
  ap0_lim = (int)(time*l_AP0);
 8000c7e:	4b27      	ldr	r3, [pc, #156]	; (8000d1c <main+0x138>)
 8000c80:	edd3 7a00 	vldr	s15, [r3]
 8000c84:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8000d40 <main+0x15c>
 8000c88:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c8c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000c90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c94:	ee17 2a90 	vmov	r2, s15
 8000c98:	4b2a      	ldr	r3, [pc, #168]	; (8000d44 <main+0x160>)
 8000c9a:	601a      	str	r2, [r3, #0]
  ap1_lim = (int)(time*l_AP1);
 8000c9c:	4b1f      	ldr	r3, [pc, #124]	; (8000d1c <main+0x138>)
 8000c9e:	edd3 7a00 	vldr	s15, [r3]
 8000ca2:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8000d48 <main+0x164>
 8000ca6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000caa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000cae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000cb2:	ee17 2a90 	vmov	r2, s15
 8000cb6:	4b25      	ldr	r3, [pc, #148]	; (8000d4c <main+0x168>)
 8000cb8:	601a      	str	r2, [r3, #0]
  ap2_lim = (int)(time*l_AP2);
 8000cba:	4b18      	ldr	r3, [pc, #96]	; (8000d1c <main+0x138>)
 8000cbc:	edd3 7a00 	vldr	s15, [r3]
 8000cc0:	eeb3 7a07 	vmov.f32	s14, #55	; 0x41b80000  23.0
 8000cc4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cc8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000ccc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000cd0:	ee17 2a90 	vmov	r2, s15
 8000cd4:	4b1e      	ldr	r3, [pc, #120]	; (8000d50 <main+0x16c>)
 8000cd6:	601a      	str	r2, [r3, #0]


  HAL_TIM_Base_Start(&htim6);
 8000cd8:	481e      	ldr	r0, [pc, #120]	; (8000d54 <main+0x170>)
 8000cda:	f003 ff39 	bl	8004b50 <HAL_TIM_Base_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC_val, FullBufSize);
 8000cde:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ce2:	491d      	ldr	r1, [pc, #116]	; (8000d58 <main+0x174>)
 8000ce4:	481d      	ldr	r0, [pc, #116]	; (8000d5c <main+0x178>)
 8000ce6:	f000 fd8d 	bl	8001804 <HAL_ADC_Start_DMA>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)DAC_val, FullBufSize, DAC_ALIGN_12B_R);
 8000cea:	2300      	movs	r3, #0
 8000cec:	9300      	str	r3, [sp, #0]
 8000cee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cf2:	4a1b      	ldr	r2, [pc, #108]	; (8000d60 <main+0x17c>)
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	481b      	ldr	r0, [pc, #108]	; (8000d64 <main+0x180>)
 8000cf8:	f001 fd3a 	bl	8002770 <HAL_DAC_Start_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(Read_Ready == 1){
 8000cfc:	4b1a      	ldr	r3, [pc, #104]	; (8000d68 <main+0x184>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	d105      	bne.n	8000d10 <main+0x12c>
	  processDSP();
 8000d04:	f7ff ff02 	bl	8000b0c <processDSP>
	  Read_Ready = 0;
 8000d08:	4b17      	ldr	r3, [pc, #92]	; (8000d68 <main+0x184>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	e7f5      	b.n	8000cfc <main+0x118>
	  }
	  else{
		  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8000d10:	2101      	movs	r1, #1
 8000d12:	2000      	movs	r0, #0
 8000d14:	f002 fb74 	bl	8003400 <HAL_PWR_EnterSLEEPMode>
	  if(Read_Ready == 1){
 8000d18:	e7f0      	b.n	8000cfc <main+0x118>
 8000d1a:	bf00      	nop
 8000d1c:	20000004 	.word	0x20000004
 8000d20:	44d84000 	.word	0x44d84000
 8000d24:	2000c470 	.word	0x2000c470
 8000d28:	44bac000 	.word	0x44bac000
 8000d2c:	20000900 	.word	0x20000900
 8000d30:	44f2a000 	.word	0x44f2a000
 8000d34:	2000c46c 	.word	0x2000c46c
 8000d38:	4506c000 	.word	0x4506c000
 8000d3c:	2000804c 	.word	0x2000804c
 8000d40:	43700000 	.word	0x43700000
 8000d44:	2001111c 	.word	0x2001111c
 8000d48:	42a20000 	.word	0x42a20000
 8000d4c:	200008fc 	.word	0x200008fc
 8000d50:	2000c3b0 	.word	0x2000c3b0
 8000d54:	20011920 	.word	0x20011920
 8000d58:	2000c474 	.word	0x2000c474
 8000d5c:	20000074 	.word	0x20000074
 8000d60:	20003a3c 	.word	0x20003a3c
 8000d64:	20000120 	.word	0x20000120
 8000d68:	20000054 	.word	0x20000054

08000d6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b0b8      	sub	sp, #224	; 0xe0
 8000d70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d72:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d76:	2244      	movs	r2, #68	; 0x44
 8000d78:	2100      	movs	r1, #0
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f004 f896 	bl	8004eac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d80:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]
 8000d8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d90:	463b      	mov	r3, r7
 8000d92:	2288      	movs	r2, #136	; 0x88
 8000d94:	2100      	movs	r1, #0
 8000d96:	4618      	mov	r0, r3
 8000d98:	f004 f888 	bl	8004eac <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000da2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000da6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000daa:	2310      	movs	r3, #16
 8000dac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000db0:	2302      	movs	r3, #2
 8000db2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000db6:	2302      	movs	r3, #2
 8000db8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 9;
 8000dc2:	2309      	movs	r3, #9
 8000dc4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000dc8:	2307      	movs	r3, #7
 8000dca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000dce:	2302      	movs	r3, #2
 8000dd0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dda:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000dde:	4618      	mov	r0, r3
 8000de0:	f002 fbee 	bl	80035c0 <HAL_RCC_OscConfig>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000dea:	f000 f845 	bl	8000e78 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dee:	230f      	movs	r3, #15
 8000df0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000df4:	2303      	movs	r3, #3
 8000df6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e00:	2300      	movs	r3, #0
 8000e02:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e06:	2300      	movs	r3, #0
 8000e08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e0c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000e10:	2104      	movs	r1, #4
 8000e12:	4618      	mov	r0, r3
 8000e14:	f002 ffba 	bl	8003d8c <HAL_RCC_ClockConfig>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000e1e:	f000 f82b 	bl	8000e78 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000e22:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e26:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000e28:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e2c:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000e2e:	2302      	movs	r3, #2
 8000e30:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000e32:	2301      	movs	r3, #1
 8000e34:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000e36:	2308      	movs	r3, #8
 8000e38:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000e3a:	2307      	movs	r3, #7
 8000e3c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000e42:	2302      	movs	r3, #2
 8000e44:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000e46:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e4a:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e4c:	463b      	mov	r3, r7
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f003 f96a 	bl	8004128 <HAL_RCCEx_PeriphCLKConfig>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000e5a:	f000 f80d 	bl	8000e78 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000e5e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000e62:	f002 fb0f 	bl	8003484 <HAL_PWREx_ControlVoltageScaling>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <SystemClock_Config+0x104>
  {
    Error_Handler();
 8000e6c:	f000 f804 	bl	8000e78 <Error_Handler>
  }
}
 8000e70:	bf00      	nop
 8000e72:	37e0      	adds	r7, #224	; 0xe0
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e7c:	b672      	cpsid	i
}
 8000e7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e80:	e7fe      	b.n	8000e80 <Error_Handler+0x8>
	...

08000e84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e8a:	4b0f      	ldr	r3, [pc, #60]	; (8000ec8 <HAL_MspInit+0x44>)
 8000e8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e8e:	4a0e      	ldr	r2, [pc, #56]	; (8000ec8 <HAL_MspInit+0x44>)
 8000e90:	f043 0301 	orr.w	r3, r3, #1
 8000e94:	6613      	str	r3, [r2, #96]	; 0x60
 8000e96:	4b0c      	ldr	r3, [pc, #48]	; (8000ec8 <HAL_MspInit+0x44>)
 8000e98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e9a:	f003 0301 	and.w	r3, r3, #1
 8000e9e:	607b      	str	r3, [r7, #4]
 8000ea0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ea2:	4b09      	ldr	r3, [pc, #36]	; (8000ec8 <HAL_MspInit+0x44>)
 8000ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ea6:	4a08      	ldr	r2, [pc, #32]	; (8000ec8 <HAL_MspInit+0x44>)
 8000ea8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eac:	6593      	str	r3, [r2, #88]	; 0x58
 8000eae:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <HAL_MspInit+0x44>)
 8000eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eb6:	603b      	str	r3, [r7, #0]
 8000eb8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	370c      	adds	r7, #12
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	40021000 	.word	0x40021000

08000ecc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ed0:	e7fe      	b.n	8000ed0 <NMI_Handler+0x4>

08000ed2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ed6:	e7fe      	b.n	8000ed6 <HardFault_Handler+0x4>

08000ed8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000edc:	e7fe      	b.n	8000edc <MemManage_Handler+0x4>

08000ede <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ee2:	e7fe      	b.n	8000ee2 <BusFault_Handler+0x4>

08000ee4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ee8:	e7fe      	b.n	8000ee8 <UsageFault_Handler+0x4>

08000eea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eea:	b480      	push	{r7}
 8000eec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr

08000ef8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000efc:	bf00      	nop
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr

08000f06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f06:	b480      	push	{r7}
 8000f08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr

08000f14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f18:	f000 f904 	bl	8001124 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f1c:	bf00      	nop
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000f24:	4802      	ldr	r0, [pc, #8]	; (8000f30 <DMA1_Channel1_IRQHandler+0x10>)
 8000f26:	f001 ffc9 	bl	8002ebc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	200000d8 	.word	0x200000d8

08000f34 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8000f38:	4802      	ldr	r0, [pc, #8]	; (8000f44 <DMA2_Channel4_IRQHandler+0x10>)
 8000f3a:	f001 ffbf 	bl	8002ebc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	20000134 	.word	0x20000134

08000f48 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f4c:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <SystemInit+0x20>)
 8000f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f52:	4a05      	ldr	r2, [pc, #20]	; (8000f68 <SystemInit+0x20>)
 8000f54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000f5c:	bf00      	nop
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	e000ed00 	.word	0xe000ed00

08000f6c <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f72:	1d3b      	adds	r3, r7, #4
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	605a      	str	r2, [r3, #4]
 8000f7a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000f7c:	4b14      	ldr	r3, [pc, #80]	; (8000fd0 <MX_TIM6_Init+0x64>)
 8000f7e:	4a15      	ldr	r2, [pc, #84]	; (8000fd4 <MX_TIM6_Init+0x68>)
 8000f80:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000f82:	4b13      	ldr	r3, [pc, #76]	; (8000fd0 <MX_TIM6_Init+0x64>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f88:	4b11      	ldr	r3, [pc, #68]	; (8000fd0 <MX_TIM6_Init+0x64>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1499;
 8000f8e:	4b10      	ldr	r3, [pc, #64]	; (8000fd0 <MX_TIM6_Init+0x64>)
 8000f90:	f240 52db 	movw	r2, #1499	; 0x5db
 8000f94:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f96:	4b0e      	ldr	r3, [pc, #56]	; (8000fd0 <MX_TIM6_Init+0x64>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000f9c:	480c      	ldr	r0, [pc, #48]	; (8000fd0 <MX_TIM6_Init+0x64>)
 8000f9e:	f003 fd7f 	bl	8004aa0 <HAL_TIM_Base_Init>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000fa8:	f7ff ff66 	bl	8000e78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000fac:	2320      	movs	r3, #32
 8000fae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000fb4:	1d3b      	adds	r3, r7, #4
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4805      	ldr	r0, [pc, #20]	; (8000fd0 <MX_TIM6_Init+0x64>)
 8000fba:	f003 fecb 	bl	8004d54 <HAL_TIMEx_MasterConfigSynchronization>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000fc4:	f7ff ff58 	bl	8000e78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000fc8:	bf00      	nop
 8000fca:	3710      	adds	r7, #16
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	20011920 	.word	0x20011920
 8000fd4:	40001000 	.word	0x40001000

08000fd8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a0a      	ldr	r2, [pc, #40]	; (8001010 <HAL_TIM_Base_MspInit+0x38>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d10b      	bne.n	8001002 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000fea:	4b0a      	ldr	r3, [pc, #40]	; (8001014 <HAL_TIM_Base_MspInit+0x3c>)
 8000fec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fee:	4a09      	ldr	r2, [pc, #36]	; (8001014 <HAL_TIM_Base_MspInit+0x3c>)
 8000ff0:	f043 0310 	orr.w	r3, r3, #16
 8000ff4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ff6:	4b07      	ldr	r3, [pc, #28]	; (8001014 <HAL_TIM_Base_MspInit+0x3c>)
 8000ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ffa:	f003 0310 	and.w	r3, r3, #16
 8000ffe:	60fb      	str	r3, [r7, #12]
 8001000:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001002:	bf00      	nop
 8001004:	3714      	adds	r7, #20
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	40001000 	.word	0x40001000
 8001014:	40021000 	.word	0x40021000

08001018 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001018:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001050 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800101c:	f7ff ff94 	bl	8000f48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001020:	480c      	ldr	r0, [pc, #48]	; (8001054 <LoopForever+0x6>)
  ldr r1, =_edata
 8001022:	490d      	ldr	r1, [pc, #52]	; (8001058 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001024:	4a0d      	ldr	r2, [pc, #52]	; (800105c <LoopForever+0xe>)
  movs r3, #0
 8001026:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001028:	e002      	b.n	8001030 <LoopCopyDataInit>

0800102a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800102a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800102c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800102e:	3304      	adds	r3, #4

08001030 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001030:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001032:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001034:	d3f9      	bcc.n	800102a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001036:	4a0a      	ldr	r2, [pc, #40]	; (8001060 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001038:	4c0a      	ldr	r4, [pc, #40]	; (8001064 <LoopForever+0x16>)
  movs r3, #0
 800103a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800103c:	e001      	b.n	8001042 <LoopFillZerobss>

0800103e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800103e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001040:	3204      	adds	r2, #4

08001042 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001042:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001044:	d3fb      	bcc.n	800103e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001046:	f003 ff0d 	bl	8004e64 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800104a:	f7ff fdcb 	bl	8000be4 <main>

0800104e <LoopForever>:

LoopForever:
    b LoopForever
 800104e:	e7fe      	b.n	800104e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001050:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001054:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001058:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 800105c:	08004f1c 	.word	0x08004f1c
  ldr r2, =_sbss
 8001060:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 8001064:	20011970 	.word	0x20011970

08001068 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001068:	e7fe      	b.n	8001068 <ADC1_2_IRQHandler>
	...

0800106c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001072:	2300      	movs	r3, #0
 8001074:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001076:	4b0c      	ldr	r3, [pc, #48]	; (80010a8 <HAL_Init+0x3c>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a0b      	ldr	r2, [pc, #44]	; (80010a8 <HAL_Init+0x3c>)
 800107c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001080:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001082:	2003      	movs	r0, #3
 8001084:	f001 fb10 	bl	80026a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001088:	2000      	movs	r0, #0
 800108a:	f000 f80f 	bl	80010ac <HAL_InitTick>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d002      	beq.n	800109a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001094:	2301      	movs	r3, #1
 8001096:	71fb      	strb	r3, [r7, #7]
 8001098:	e001      	b.n	800109e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800109a:	f7ff fef3 	bl	8000e84 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800109e:	79fb      	ldrb	r3, [r7, #7]
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3708      	adds	r7, #8
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	40022000 	.word	0x40022000

080010ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010b4:	2300      	movs	r3, #0
 80010b6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80010b8:	4b17      	ldr	r3, [pc, #92]	; (8001118 <HAL_InitTick+0x6c>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d023      	beq.n	8001108 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80010c0:	4b16      	ldr	r3, [pc, #88]	; (800111c <HAL_InitTick+0x70>)
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	4b14      	ldr	r3, [pc, #80]	; (8001118 <HAL_InitTick+0x6c>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	4619      	mov	r1, r3
 80010ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80010d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010d6:	4618      	mov	r0, r3
 80010d8:	f001 fb1b 	bl	8002712 <HAL_SYSTICK_Config>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d10f      	bne.n	8001102 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2b0f      	cmp	r3, #15
 80010e6:	d809      	bhi.n	80010fc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010e8:	2200      	movs	r2, #0
 80010ea:	6879      	ldr	r1, [r7, #4]
 80010ec:	f04f 30ff 	mov.w	r0, #4294967295
 80010f0:	f001 fae5 	bl	80026be <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010f4:	4a0a      	ldr	r2, [pc, #40]	; (8001120 <HAL_InitTick+0x74>)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6013      	str	r3, [r2, #0]
 80010fa:	e007      	b.n	800110c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80010fc:	2301      	movs	r3, #1
 80010fe:	73fb      	strb	r3, [r7, #15]
 8001100:	e004      	b.n	800110c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	73fb      	strb	r3, [r7, #15]
 8001106:	e001      	b.n	800110c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001108:	2301      	movs	r3, #1
 800110a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800110c:	7bfb      	ldrb	r3, [r7, #15]
}
 800110e:	4618      	mov	r0, r3
 8001110:	3710      	adds	r7, #16
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	2000002c 	.word	0x2000002c
 800111c:	20000024 	.word	0x20000024
 8001120:	20000028 	.word	0x20000028

08001124 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001128:	4b06      	ldr	r3, [pc, #24]	; (8001144 <HAL_IncTick+0x20>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	461a      	mov	r2, r3
 800112e:	4b06      	ldr	r3, [pc, #24]	; (8001148 <HAL_IncTick+0x24>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4413      	add	r3, r2
 8001134:	4a04      	ldr	r2, [pc, #16]	; (8001148 <HAL_IncTick+0x24>)
 8001136:	6013      	str	r3, [r2, #0]
}
 8001138:	bf00      	nop
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	2000002c 	.word	0x2000002c
 8001148:	2001196c 	.word	0x2001196c

0800114c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  return uwTick;
 8001150:	4b03      	ldr	r3, [pc, #12]	; (8001160 <HAL_GetTick+0x14>)
 8001152:	681b      	ldr	r3, [r3, #0]
}
 8001154:	4618      	mov	r0, r3
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	2001196c 	.word	0x2001196c

08001164 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800116c:	f7ff ffee 	bl	800114c <HAL_GetTick>
 8001170:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800117c:	d005      	beq.n	800118a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800117e:	4b0a      	ldr	r3, [pc, #40]	; (80011a8 <HAL_Delay+0x44>)
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	461a      	mov	r2, r3
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	4413      	add	r3, r2
 8001188:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800118a:	bf00      	nop
 800118c:	f7ff ffde 	bl	800114c <HAL_GetTick>
 8001190:	4602      	mov	r2, r0
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	68fa      	ldr	r2, [r7, #12]
 8001198:	429a      	cmp	r2, r3
 800119a:	d8f7      	bhi.n	800118c <HAL_Delay+0x28>
  {
  }
}
 800119c:	bf00      	nop
 800119e:	bf00      	nop
 80011a0:	3710      	adds	r7, #16
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	2000002c 	.word	0x2000002c

080011ac <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	431a      	orrs	r2, r3
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	609a      	str	r2, [r3, #8]
}
 80011c6:	bf00      	nop
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr

080011d2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80011d2:	b480      	push	{r7}
 80011d4:	b083      	sub	sp, #12
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	6078      	str	r0, [r7, #4]
 80011da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	689b      	ldr	r3, [r3, #8]
 80011e0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	431a      	orrs	r2, r3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	609a      	str	r2, [r3, #8]
}
 80011ec:	bf00      	nop
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr

080011f8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001208:	4618      	mov	r0, r3
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr

08001214 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001214:	b480      	push	{r7}
 8001216:	b087      	sub	sp, #28
 8001218:	af00      	add	r7, sp, #0
 800121a:	60f8      	str	r0, [r7, #12]
 800121c:	60b9      	str	r1, [r7, #8]
 800121e:	607a      	str	r2, [r7, #4]
 8001220:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	3360      	adds	r3, #96	; 0x60
 8001226:	461a      	mov	r2, r3
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	4413      	add	r3, r2
 800122e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	4b08      	ldr	r3, [pc, #32]	; (8001258 <LL_ADC_SetOffset+0x44>)
 8001236:	4013      	ands	r3, r2
 8001238:	687a      	ldr	r2, [r7, #4]
 800123a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800123e:	683a      	ldr	r2, [r7, #0]
 8001240:	430a      	orrs	r2, r1
 8001242:	4313      	orrs	r3, r2
 8001244:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800124c:	bf00      	nop
 800124e:	371c      	adds	r7, #28
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr
 8001258:	03fff000 	.word	0x03fff000

0800125c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800125c:	b480      	push	{r7}
 800125e:	b085      	sub	sp, #20
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	3360      	adds	r3, #96	; 0x60
 800126a:	461a      	mov	r2, r3
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	4413      	add	r3, r2
 8001272:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800127c:	4618      	mov	r0, r3
 800127e:	3714      	adds	r7, #20
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr

08001288 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001288:	b480      	push	{r7}
 800128a:	b087      	sub	sp, #28
 800128c:	af00      	add	r7, sp, #0
 800128e:	60f8      	str	r0, [r7, #12]
 8001290:	60b9      	str	r1, [r7, #8]
 8001292:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	3360      	adds	r3, #96	; 0x60
 8001298:	461a      	mov	r2, r3
 800129a:	68bb      	ldr	r3, [r7, #8]
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	4413      	add	r3, r2
 80012a0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	431a      	orrs	r2, r3
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80012b2:	bf00      	nop
 80012b4:	371c      	adds	r7, #28
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr

080012be <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80012be:	b480      	push	{r7}
 80012c0:	b083      	sub	sp, #12
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	68db      	ldr	r3, [r3, #12]
 80012ca:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d101      	bne.n	80012d6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80012d2:	2301      	movs	r3, #1
 80012d4:	e000      	b.n	80012d8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80012d6:	2300      	movs	r3, #0
}
 80012d8:	4618      	mov	r0, r3
 80012da:	370c      	adds	r7, #12
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr

080012e4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b087      	sub	sp, #28
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	60f8      	str	r0, [r7, #12]
 80012ec:	60b9      	str	r1, [r7, #8]
 80012ee:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	3330      	adds	r3, #48	; 0x30
 80012f4:	461a      	mov	r2, r3
 80012f6:	68bb      	ldr	r3, [r7, #8]
 80012f8:	0a1b      	lsrs	r3, r3, #8
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	f003 030c 	and.w	r3, r3, #12
 8001300:	4413      	add	r3, r2
 8001302:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	f003 031f 	and.w	r3, r3, #31
 800130e:	211f      	movs	r1, #31
 8001310:	fa01 f303 	lsl.w	r3, r1, r3
 8001314:	43db      	mvns	r3, r3
 8001316:	401a      	ands	r2, r3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	0e9b      	lsrs	r3, r3, #26
 800131c:	f003 011f 	and.w	r1, r3, #31
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	f003 031f 	and.w	r3, r3, #31
 8001326:	fa01 f303 	lsl.w	r3, r1, r3
 800132a:	431a      	orrs	r2, r3
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001330:	bf00      	nop
 8001332:	371c      	adds	r7, #28
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800133c:	b480      	push	{r7}
 800133e:	b087      	sub	sp, #28
 8001340:	af00      	add	r7, sp, #0
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	60b9      	str	r1, [r7, #8]
 8001346:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	3314      	adds	r3, #20
 800134c:	461a      	mov	r2, r3
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	0e5b      	lsrs	r3, r3, #25
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	f003 0304 	and.w	r3, r3, #4
 8001358:	4413      	add	r3, r2
 800135a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	0d1b      	lsrs	r3, r3, #20
 8001364:	f003 031f 	and.w	r3, r3, #31
 8001368:	2107      	movs	r1, #7
 800136a:	fa01 f303 	lsl.w	r3, r1, r3
 800136e:	43db      	mvns	r3, r3
 8001370:	401a      	ands	r2, r3
 8001372:	68bb      	ldr	r3, [r7, #8]
 8001374:	0d1b      	lsrs	r3, r3, #20
 8001376:	f003 031f 	and.w	r3, r3, #31
 800137a:	6879      	ldr	r1, [r7, #4]
 800137c:	fa01 f303 	lsl.w	r3, r1, r3
 8001380:	431a      	orrs	r2, r3
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001386:	bf00      	nop
 8001388:	371c      	adds	r7, #28
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
	...

08001394 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001394:	b480      	push	{r7}
 8001396:	b085      	sub	sp, #20
 8001398:	af00      	add	r7, sp, #0
 800139a:	60f8      	str	r0, [r7, #12]
 800139c:	60b9      	str	r1, [r7, #8]
 800139e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80013a6:	68bb      	ldr	r3, [r7, #8]
 80013a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013ac:	43db      	mvns	r3, r3
 80013ae:	401a      	ands	r2, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	f003 0318 	and.w	r3, r3, #24
 80013b6:	4908      	ldr	r1, [pc, #32]	; (80013d8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80013b8:	40d9      	lsrs	r1, r3
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	400b      	ands	r3, r1
 80013be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013c2:	431a      	orrs	r2, r3
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80013ca:	bf00      	nop
 80013cc:	3714      	adds	r7, #20
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	0007ffff 	.word	0x0007ffff

080013dc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	f003 031f 	and.w	r3, r3, #31
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001408:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800140c:	687a      	ldr	r2, [r7, #4]
 800140e:	6093      	str	r3, [r2, #8]
}
 8001410:	bf00      	nop
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800142c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001430:	d101      	bne.n	8001436 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001432:	2301      	movs	r3, #1
 8001434:	e000      	b.n	8001438 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001436:	2300      	movs	r3, #0
}
 8001438:	4618      	mov	r0, r3
 800143a:	370c      	adds	r7, #12
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr

08001444 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001454:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001458:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001460:	bf00      	nop
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800147c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001480:	d101      	bne.n	8001486 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001482:	2301      	movs	r3, #1
 8001484:	e000      	b.n	8001488 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001486:	2300      	movs	r3, #0
}
 8001488:	4618      	mov	r0, r3
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr

08001494 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80014a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80014a8:	f043 0201 	orr.w	r2, r3, #1
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80014b0:	bf00      	nop
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr

080014bc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	f003 0301 	and.w	r3, r3, #1
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d101      	bne.n	80014d4 <LL_ADC_IsEnabled+0x18>
 80014d0:	2301      	movs	r3, #1
 80014d2:	e000      	b.n	80014d6 <LL_ADC_IsEnabled+0x1a>
 80014d4:	2300      	movs	r3, #0
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	370c      	adds	r7, #12
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr

080014e2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80014e2:	b480      	push	{r7}
 80014e4:	b083      	sub	sp, #12
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80014f2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80014f6:	f043 0204 	orr.w	r2, r3, #4
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80014fe:	bf00      	nop
 8001500:	370c      	adds	r7, #12
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr

0800150a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800150a:	b480      	push	{r7}
 800150c:	b083      	sub	sp, #12
 800150e:	af00      	add	r7, sp, #0
 8001510:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	f003 0304 	and.w	r3, r3, #4
 800151a:	2b04      	cmp	r3, #4
 800151c:	d101      	bne.n	8001522 <LL_ADC_REG_IsConversionOngoing+0x18>
 800151e:	2301      	movs	r3, #1
 8001520:	e000      	b.n	8001524 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001522:	2300      	movs	r3, #0
}
 8001524:	4618      	mov	r0, r3
 8001526:	370c      	adds	r7, #12
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr

08001530 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	f003 0308 	and.w	r3, r3, #8
 8001540:	2b08      	cmp	r3, #8
 8001542:	d101      	bne.n	8001548 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001544:	2301      	movs	r3, #1
 8001546:	e000      	b.n	800154a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001548:	2300      	movs	r3, #0
}
 800154a:	4618      	mov	r0, r3
 800154c:	370c      	adds	r7, #12
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
	...

08001558 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001558:	b590      	push	{r4, r7, lr}
 800155a:	b089      	sub	sp, #36	; 0x24
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001560:	2300      	movs	r3, #0
 8001562:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001564:	2300      	movs	r3, #0
 8001566:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d101      	bne.n	8001572 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e136      	b.n	80017e0 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	691b      	ldr	r3, [r3, #16]
 8001576:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800157c:	2b00      	cmp	r3, #0
 800157e:	d109      	bne.n	8001594 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f7fe fe99 	bl	80002b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2200      	movs	r2, #0
 800158a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2200      	movs	r2, #0
 8001590:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff ff3f 	bl	800141c <LL_ADC_IsDeepPowerDownEnabled>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d004      	beq.n	80015ae <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7ff ff25 	bl	80013f8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7ff ff5a 	bl	800146c <LL_ADC_IsInternalRegulatorEnabled>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d115      	bne.n	80015ea <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7ff ff3e 	bl	8001444 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80015c8:	4b87      	ldr	r3, [pc, #540]	; (80017e8 <HAL_ADC_Init+0x290>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	099b      	lsrs	r3, r3, #6
 80015ce:	4a87      	ldr	r2, [pc, #540]	; (80017ec <HAL_ADC_Init+0x294>)
 80015d0:	fba2 2303 	umull	r2, r3, r2, r3
 80015d4:	099b      	lsrs	r3, r3, #6
 80015d6:	3301      	adds	r3, #1
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80015dc:	e002      	b.n	80015e4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	3b01      	subs	r3, #1
 80015e2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d1f9      	bne.n	80015de <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7ff ff3c 	bl	800146c <LL_ADC_IsInternalRegulatorEnabled>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d10d      	bne.n	8001616 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015fe:	f043 0210 	orr.w	r2, r3, #16
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800160a:	f043 0201 	orr.w	r2, r3, #1
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4618      	mov	r0, r3
 800161c:	f7ff ff75 	bl	800150a <LL_ADC_REG_IsConversionOngoing>
 8001620:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001626:	f003 0310 	and.w	r3, r3, #16
 800162a:	2b00      	cmp	r3, #0
 800162c:	f040 80cf 	bne.w	80017ce <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	2b00      	cmp	r3, #0
 8001634:	f040 80cb 	bne.w	80017ce <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800163c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001640:	f043 0202 	orr.w	r2, r3, #2
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff ff35 	bl	80014bc <LL_ADC_IsEnabled>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d115      	bne.n	8001684 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001658:	4865      	ldr	r0, [pc, #404]	; (80017f0 <HAL_ADC_Init+0x298>)
 800165a:	f7ff ff2f 	bl	80014bc <LL_ADC_IsEnabled>
 800165e:	4604      	mov	r4, r0
 8001660:	4864      	ldr	r0, [pc, #400]	; (80017f4 <HAL_ADC_Init+0x29c>)
 8001662:	f7ff ff2b 	bl	80014bc <LL_ADC_IsEnabled>
 8001666:	4603      	mov	r3, r0
 8001668:	431c      	orrs	r4, r3
 800166a:	4863      	ldr	r0, [pc, #396]	; (80017f8 <HAL_ADC_Init+0x2a0>)
 800166c:	f7ff ff26 	bl	80014bc <LL_ADC_IsEnabled>
 8001670:	4603      	mov	r3, r0
 8001672:	4323      	orrs	r3, r4
 8001674:	2b00      	cmp	r3, #0
 8001676:	d105      	bne.n	8001684 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	4619      	mov	r1, r3
 800167e:	485f      	ldr	r0, [pc, #380]	; (80017fc <HAL_ADC_Init+0x2a4>)
 8001680:	f7ff fd94 	bl	80011ac <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	7e5b      	ldrb	r3, [r3, #25]
 8001688:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800168e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001694:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800169a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016a2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80016a4:	4313      	orrs	r3, r2
 80016a6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d106      	bne.n	80016c0 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b6:	3b01      	subs	r3, #1
 80016b8:	045b      	lsls	r3, r3, #17
 80016ba:	69ba      	ldr	r2, [r7, #24]
 80016bc:	4313      	orrs	r3, r2
 80016be:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d009      	beq.n	80016dc <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016cc:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80016d6:	69ba      	ldr	r2, [r7, #24]
 80016d8:	4313      	orrs	r3, r2
 80016da:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	68da      	ldr	r2, [r3, #12]
 80016e2:	4b47      	ldr	r3, [pc, #284]	; (8001800 <HAL_ADC_Init+0x2a8>)
 80016e4:	4013      	ands	r3, r2
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	6812      	ldr	r2, [r2, #0]
 80016ea:	69b9      	ldr	r1, [r7, #24]
 80016ec:	430b      	orrs	r3, r1
 80016ee:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff ff08 	bl	800150a <LL_ADC_REG_IsConversionOngoing>
 80016fa:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4618      	mov	r0, r3
 8001702:	f7ff ff15 	bl	8001530 <LL_ADC_INJ_IsConversionOngoing>
 8001706:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d13d      	bne.n	800178a <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d13a      	bne.n	800178a <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001718:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001720:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001722:	4313      	orrs	r3, r2
 8001724:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001730:	f023 0302 	bic.w	r3, r3, #2
 8001734:	687a      	ldr	r2, [r7, #4]
 8001736:	6812      	ldr	r2, [r2, #0]
 8001738:	69b9      	ldr	r1, [r7, #24]
 800173a:	430b      	orrs	r3, r1
 800173c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001744:	2b01      	cmp	r3, #1
 8001746:	d118      	bne.n	800177a <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	691b      	ldr	r3, [r3, #16]
 800174e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001752:	f023 0304 	bic.w	r3, r3, #4
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800175e:	4311      	orrs	r1, r2
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001764:	4311      	orrs	r1, r2
 8001766:	687a      	ldr	r2, [r7, #4]
 8001768:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800176a:	430a      	orrs	r2, r1
 800176c:	431a      	orrs	r2, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f042 0201 	orr.w	r2, r2, #1
 8001776:	611a      	str	r2, [r3, #16]
 8001778:	e007      	b.n	800178a <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	691a      	ldr	r2, [r3, #16]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f022 0201 	bic.w	r2, r2, #1
 8001788:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	691b      	ldr	r3, [r3, #16]
 800178e:	2b01      	cmp	r3, #1
 8001790:	d10c      	bne.n	80017ac <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001798:	f023 010f 	bic.w	r1, r3, #15
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	69db      	ldr	r3, [r3, #28]
 80017a0:	1e5a      	subs	r2, r3, #1
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	430a      	orrs	r2, r1
 80017a8:	631a      	str	r2, [r3, #48]	; 0x30
 80017aa:	e007      	b.n	80017bc <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f022 020f 	bic.w	r2, r2, #15
 80017ba:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017c0:	f023 0303 	bic.w	r3, r3, #3
 80017c4:	f043 0201 	orr.w	r2, r3, #1
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	655a      	str	r2, [r3, #84]	; 0x54
 80017cc:	e007      	b.n	80017de <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017d2:	f043 0210 	orr.w	r2, r3, #16
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80017de:	7ffb      	ldrb	r3, [r7, #31]
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3724      	adds	r7, #36	; 0x24
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd90      	pop	{r4, r7, pc}
 80017e8:	20000024 	.word	0x20000024
 80017ec:	053e2d63 	.word	0x053e2d63
 80017f0:	50040000 	.word	0x50040000
 80017f4:	50040100 	.word	0x50040100
 80017f8:	50040200 	.word	0x50040200
 80017fc:	50040300 	.word	0x50040300
 8001800:	fff0c007 	.word	0xfff0c007

08001804 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b086      	sub	sp, #24
 8001808:	af00      	add	r7, sp, #0
 800180a:	60f8      	str	r0, [r7, #12]
 800180c:	60b9      	str	r1, [r7, #8]
 800180e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001810:	4853      	ldr	r0, [pc, #332]	; (8001960 <HAL_ADC_Start_DMA+0x15c>)
 8001812:	f7ff fde3 	bl	80013dc <LL_ADC_GetMultimode>
 8001816:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff fe74 	bl	800150a <LL_ADC_REG_IsConversionOngoing>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	f040 8093 	bne.w	8001950 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001830:	2b01      	cmp	r3, #1
 8001832:	d101      	bne.n	8001838 <HAL_ADC_Start_DMA+0x34>
 8001834:	2302      	movs	r3, #2
 8001836:	e08e      	b.n	8001956 <HAL_ADC_Start_DMA+0x152>
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	2201      	movs	r2, #1
 800183c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a47      	ldr	r2, [pc, #284]	; (8001964 <HAL_ADC_Start_DMA+0x160>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d008      	beq.n	800185c <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d005      	beq.n	800185c <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	2b05      	cmp	r3, #5
 8001854:	d002      	beq.n	800185c <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	2b09      	cmp	r3, #9
 800185a:	d172      	bne.n	8001942 <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800185c:	68f8      	ldr	r0, [r7, #12]
 800185e:	f000 fc87 	bl	8002170 <ADC_Enable>
 8001862:	4603      	mov	r3, r0
 8001864:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001866:	7dfb      	ldrb	r3, [r7, #23]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d165      	bne.n	8001938 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001870:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001874:	f023 0301 	bic.w	r3, r3, #1
 8001878:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a38      	ldr	r2, [pc, #224]	; (8001968 <HAL_ADC_Start_DMA+0x164>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d002      	beq.n	8001890 <HAL_ADC_Start_DMA+0x8c>
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	e000      	b.n	8001892 <HAL_ADC_Start_DMA+0x8e>
 8001890:	4b36      	ldr	r3, [pc, #216]	; (800196c <HAL_ADC_Start_DMA+0x168>)
 8001892:	68fa      	ldr	r2, [r7, #12]
 8001894:	6812      	ldr	r2, [r2, #0]
 8001896:	4293      	cmp	r3, r2
 8001898:	d002      	beq.n	80018a0 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d105      	bne.n	80018ac <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018a4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d006      	beq.n	80018c6 <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018bc:	f023 0206 	bic.w	r2, r3, #6
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	659a      	str	r2, [r3, #88]	; 0x58
 80018c4:	e002      	b.n	80018cc <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	2200      	movs	r2, #0
 80018ca:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018d0:	4a27      	ldr	r2, [pc, #156]	; (8001970 <HAL_ADC_Start_DMA+0x16c>)
 80018d2:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018d8:	4a26      	ldr	r2, [pc, #152]	; (8001974 <HAL_ADC_Start_DMA+0x170>)
 80018da:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018e0:	4a25      	ldr	r2, [pc, #148]	; (8001978 <HAL_ADC_Start_DMA+0x174>)
 80018e2:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	221c      	movs	r2, #28
 80018ea:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	2200      	movs	r2, #0
 80018f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	685a      	ldr	r2, [r3, #4]
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f042 0210 	orr.w	r2, r2, #16
 8001902:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	68da      	ldr	r2, [r3, #12]
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f042 0201 	orr.w	r2, r2, #1
 8001912:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	3340      	adds	r3, #64	; 0x40
 800191e:	4619      	mov	r1, r3
 8001920:	68ba      	ldr	r2, [r7, #8]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	f001 fa6a 	bl	8002dfc <HAL_DMA_Start_IT>
 8001928:	4603      	mov	r3, r0
 800192a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff fdd6 	bl	80014e2 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001936:	e00d      	b.n	8001954 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	2200      	movs	r2, #0
 800193c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8001940:	e008      	b.n	8001954 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	2200      	movs	r2, #0
 800194a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800194e:	e001      	b.n	8001954 <HAL_ADC_Start_DMA+0x150>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001950:	2302      	movs	r3, #2
 8001952:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001954:	7dfb      	ldrb	r3, [r7, #23]
}
 8001956:	4618      	mov	r0, r3
 8001958:	3718      	adds	r7, #24
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	50040300 	.word	0x50040300
 8001964:	50040200 	.word	0x50040200
 8001968:	50040100 	.word	0x50040100
 800196c:	50040000 	.word	0x50040000
 8001970:	08002235 	.word	0x08002235
 8001974:	0800230d 	.word	0x0800230d
 8001978:	08002329 	.word	0x08002329

0800197c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001984:	bf00      	nop
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b0b6      	sub	sp, #216	; 0xd8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800199a:	2300      	movs	r3, #0
 800199c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80019a0:	2300      	movs	r3, #0
 80019a2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d101      	bne.n	80019b2 <HAL_ADC_ConfigChannel+0x22>
 80019ae:	2302      	movs	r3, #2
 80019b0:	e3c7      	b.n	8002142 <HAL_ADC_ConfigChannel+0x7b2>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2201      	movs	r2, #1
 80019b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4618      	mov	r0, r3
 80019c0:	f7ff fda3 	bl	800150a <LL_ADC_REG_IsConversionOngoing>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	f040 83a8 	bne.w	800211c <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	2b05      	cmp	r3, #5
 80019d2:	d824      	bhi.n	8001a1e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	3b02      	subs	r3, #2
 80019da:	2b03      	cmp	r3, #3
 80019dc:	d81b      	bhi.n	8001a16 <HAL_ADC_ConfigChannel+0x86>
 80019de:	a201      	add	r2, pc, #4	; (adr r2, 80019e4 <HAL_ADC_ConfigChannel+0x54>)
 80019e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019e4:	080019f5 	.word	0x080019f5
 80019e8:	080019fd 	.word	0x080019fd
 80019ec:	08001a05 	.word	0x08001a05
 80019f0:	08001a0d 	.word	0x08001a0d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	220c      	movs	r2, #12
 80019f8:	605a      	str	r2, [r3, #4]
          break;
 80019fa:	e011      	b.n	8001a20 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	2212      	movs	r2, #18
 8001a00:	605a      	str	r2, [r3, #4]
          break;
 8001a02:	e00d      	b.n	8001a20 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	2218      	movs	r2, #24
 8001a08:	605a      	str	r2, [r3, #4]
          break;
 8001a0a:	e009      	b.n	8001a20 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a12:	605a      	str	r2, [r3, #4]
          break;
 8001a14:	e004      	b.n	8001a20 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	2206      	movs	r2, #6
 8001a1a:	605a      	str	r2, [r3, #4]
          break;
 8001a1c:	e000      	b.n	8001a20 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001a1e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6818      	ldr	r0, [r3, #0]
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	6859      	ldr	r1, [r3, #4]
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	f7ff fc59 	bl	80012e4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7ff fd67 	bl	800150a <LL_ADC_REG_IsConversionOngoing>
 8001a3c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7ff fd73 	bl	8001530 <LL_ADC_INJ_IsConversionOngoing>
 8001a4a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a4e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	f040 81a6 	bne.w	8001da4 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001a58:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	f040 81a1 	bne.w	8001da4 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6818      	ldr	r0, [r3, #0]
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	6819      	ldr	r1, [r3, #0]
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	461a      	mov	r2, r3
 8001a70:	f7ff fc64 	bl	800133c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	695a      	ldr	r2, [r3, #20]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	68db      	ldr	r3, [r3, #12]
 8001a7e:	08db      	lsrs	r3, r3, #3
 8001a80:	f003 0303 	and.w	r3, r3, #3
 8001a84:	005b      	lsls	r3, r3, #1
 8001a86:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	691b      	ldr	r3, [r3, #16]
 8001a92:	2b04      	cmp	r3, #4
 8001a94:	d00a      	beq.n	8001aac <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6818      	ldr	r0, [r3, #0]
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	6919      	ldr	r1, [r3, #16]
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001aa6:	f7ff fbb5 	bl	8001214 <LL_ADC_SetOffset>
 8001aaa:	e17b      	b.n	8001da4 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7ff fbd2 	bl	800125c <LL_ADC_GetOffsetChannel>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d10a      	bne.n	8001ad8 <HAL_ADC_ConfigChannel+0x148>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7ff fbc7 	bl	800125c <LL_ADC_GetOffsetChannel>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	0e9b      	lsrs	r3, r3, #26
 8001ad2:	f003 021f 	and.w	r2, r3, #31
 8001ad6:	e01e      	b.n	8001b16 <HAL_ADC_ConfigChannel+0x186>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2100      	movs	r1, #0
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7ff fbbc 	bl	800125c <LL_ADC_GetOffsetChannel>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001aee:	fa93 f3a3 	rbit	r3, r3
 8001af2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001af6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001afa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001afe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d101      	bne.n	8001b0a <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001b06:	2320      	movs	r3, #32
 8001b08:	e004      	b.n	8001b14 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8001b0a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001b0e:	fab3 f383 	clz	r3, r3
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d105      	bne.n	8001b2e <HAL_ADC_ConfigChannel+0x19e>
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	0e9b      	lsrs	r3, r3, #26
 8001b28:	f003 031f 	and.w	r3, r3, #31
 8001b2c:	e018      	b.n	8001b60 <HAL_ADC_ConfigChannel+0x1d0>
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b36:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001b3a:	fa93 f3a3 	rbit	r3, r3
 8001b3e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001b42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001b46:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001b4a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d101      	bne.n	8001b56 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8001b52:	2320      	movs	r3, #32
 8001b54:	e004      	b.n	8001b60 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8001b56:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001b5a:	fab3 f383 	clz	r3, r3
 8001b5e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d106      	bne.n	8001b72 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	2100      	movs	r1, #0
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7ff fb8b 	bl	8001288 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	2101      	movs	r1, #1
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff fb6f 	bl	800125c <LL_ADC_GetOffsetChannel>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d10a      	bne.n	8001b9e <HAL_ADC_ConfigChannel+0x20e>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2101      	movs	r1, #1
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7ff fb64 	bl	800125c <LL_ADC_GetOffsetChannel>
 8001b94:	4603      	mov	r3, r0
 8001b96:	0e9b      	lsrs	r3, r3, #26
 8001b98:	f003 021f 	and.w	r2, r3, #31
 8001b9c:	e01e      	b.n	8001bdc <HAL_ADC_ConfigChannel+0x24c>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	2101      	movs	r1, #1
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7ff fb59 	bl	800125c <LL_ADC_GetOffsetChannel>
 8001baa:	4603      	mov	r3, r0
 8001bac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001bb4:	fa93 f3a3 	rbit	r3, r3
 8001bb8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001bbc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001bc0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001bc4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d101      	bne.n	8001bd0 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001bcc:	2320      	movs	r3, #32
 8001bce:	e004      	b.n	8001bda <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001bd0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001bd4:	fab3 f383 	clz	r3, r3
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d105      	bne.n	8001bf4 <HAL_ADC_ConfigChannel+0x264>
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	0e9b      	lsrs	r3, r3, #26
 8001bee:	f003 031f 	and.w	r3, r3, #31
 8001bf2:	e018      	b.n	8001c26 <HAL_ADC_ConfigChannel+0x296>
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bfc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001c00:	fa93 f3a3 	rbit	r3, r3
 8001c04:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001c08:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001c0c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001c10:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d101      	bne.n	8001c1c <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001c18:	2320      	movs	r3, #32
 8001c1a:	e004      	b.n	8001c26 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001c1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001c20:	fab3 f383 	clz	r3, r3
 8001c24:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d106      	bne.n	8001c38 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	2101      	movs	r1, #1
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7ff fb28 	bl	8001288 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	2102      	movs	r1, #2
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7ff fb0c 	bl	800125c <LL_ADC_GetOffsetChannel>
 8001c44:	4603      	mov	r3, r0
 8001c46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d10a      	bne.n	8001c64 <HAL_ADC_ConfigChannel+0x2d4>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	2102      	movs	r1, #2
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff fb01 	bl	800125c <LL_ADC_GetOffsetChannel>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	0e9b      	lsrs	r3, r3, #26
 8001c5e:	f003 021f 	and.w	r2, r3, #31
 8001c62:	e01e      	b.n	8001ca2 <HAL_ADC_ConfigChannel+0x312>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	2102      	movs	r1, #2
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7ff faf6 	bl	800125c <LL_ADC_GetOffsetChannel>
 8001c70:	4603      	mov	r3, r0
 8001c72:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c7a:	fa93 f3a3 	rbit	r3, r3
 8001c7e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001c82:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001c86:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001c8a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d101      	bne.n	8001c96 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8001c92:	2320      	movs	r3, #32
 8001c94:	e004      	b.n	8001ca0 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001c96:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001c9a:	fab3 f383 	clz	r3, r3
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d105      	bne.n	8001cba <HAL_ADC_ConfigChannel+0x32a>
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	0e9b      	lsrs	r3, r3, #26
 8001cb4:	f003 031f 	and.w	r3, r3, #31
 8001cb8:	e016      	b.n	8001ce8 <HAL_ADC_ConfigChannel+0x358>
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001cc6:	fa93 f3a3 	rbit	r3, r3
 8001cca:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001ccc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001cce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001cd2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d101      	bne.n	8001cde <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8001cda:	2320      	movs	r3, #32
 8001cdc:	e004      	b.n	8001ce8 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8001cde:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001ce2:	fab3 f383 	clz	r3, r3
 8001ce6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d106      	bne.n	8001cfa <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	2102      	movs	r1, #2
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7ff fac7 	bl	8001288 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	2103      	movs	r1, #3
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7ff faab 	bl	800125c <LL_ADC_GetOffsetChannel>
 8001d06:	4603      	mov	r3, r0
 8001d08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d10a      	bne.n	8001d26 <HAL_ADC_ConfigChannel+0x396>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	2103      	movs	r1, #3
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7ff faa0 	bl	800125c <LL_ADC_GetOffsetChannel>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	0e9b      	lsrs	r3, r3, #26
 8001d20:	f003 021f 	and.w	r2, r3, #31
 8001d24:	e017      	b.n	8001d56 <HAL_ADC_ConfigChannel+0x3c6>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	2103      	movs	r1, #3
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7ff fa95 	bl	800125c <LL_ADC_GetOffsetChannel>
 8001d32:	4603      	mov	r3, r0
 8001d34:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d38:	fa93 f3a3 	rbit	r3, r3
 8001d3c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001d3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d40:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001d42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d101      	bne.n	8001d4c <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8001d48:	2320      	movs	r3, #32
 8001d4a:	e003      	b.n	8001d54 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8001d4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d4e:	fab3 f383 	clz	r3, r3
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d105      	bne.n	8001d6e <HAL_ADC_ConfigChannel+0x3de>
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	0e9b      	lsrs	r3, r3, #26
 8001d68:	f003 031f 	and.w	r3, r3, #31
 8001d6c:	e011      	b.n	8001d92 <HAL_ADC_ConfigChannel+0x402>
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d74:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d76:	fa93 f3a3 	rbit	r3, r3
 8001d7a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001d7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001d7e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001d80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d101      	bne.n	8001d8a <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8001d86:	2320      	movs	r3, #32
 8001d88:	e003      	b.n	8001d92 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8001d8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d8c:	fab3 f383 	clz	r3, r3
 8001d90:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d106      	bne.n	8001da4 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	2103      	movs	r1, #3
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7ff fa72 	bl	8001288 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7ff fb87 	bl	80014bc <LL_ADC_IsEnabled>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	f040 813f 	bne.w	8002034 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6818      	ldr	r0, [r3, #0]
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	6819      	ldr	r1, [r3, #0]
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	68db      	ldr	r3, [r3, #12]
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	f7ff fae6 	bl	8001394 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	4a8e      	ldr	r2, [pc, #568]	; (8002008 <HAL_ADC_ConfigChannel+0x678>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	f040 8130 	bne.w	8002034 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d10b      	bne.n	8001dfc <HAL_ADC_ConfigChannel+0x46c>
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	0e9b      	lsrs	r3, r3, #26
 8001dea:	3301      	adds	r3, #1
 8001dec:	f003 031f 	and.w	r3, r3, #31
 8001df0:	2b09      	cmp	r3, #9
 8001df2:	bf94      	ite	ls
 8001df4:	2301      	movls	r3, #1
 8001df6:	2300      	movhi	r3, #0
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	e019      	b.n	8001e30 <HAL_ADC_ConfigChannel+0x4a0>
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e04:	fa93 f3a3 	rbit	r3, r3
 8001e08:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001e0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e0c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001e0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d101      	bne.n	8001e18 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001e14:	2320      	movs	r3, #32
 8001e16:	e003      	b.n	8001e20 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001e18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e1a:	fab3 f383 	clz	r3, r3
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	3301      	adds	r3, #1
 8001e22:	f003 031f 	and.w	r3, r3, #31
 8001e26:	2b09      	cmp	r3, #9
 8001e28:	bf94      	ite	ls
 8001e2a:	2301      	movls	r3, #1
 8001e2c:	2300      	movhi	r3, #0
 8001e2e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d079      	beq.n	8001f28 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d107      	bne.n	8001e50 <HAL_ADC_ConfigChannel+0x4c0>
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	0e9b      	lsrs	r3, r3, #26
 8001e46:	3301      	adds	r3, #1
 8001e48:	069b      	lsls	r3, r3, #26
 8001e4a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e4e:	e015      	b.n	8001e7c <HAL_ADC_ConfigChannel+0x4ec>
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e58:	fa93 f3a3 	rbit	r3, r3
 8001e5c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001e5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e60:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001e62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d101      	bne.n	8001e6c <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8001e68:	2320      	movs	r3, #32
 8001e6a:	e003      	b.n	8001e74 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8001e6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e6e:	fab3 f383 	clz	r3, r3
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	3301      	adds	r3, #1
 8001e76:	069b      	lsls	r3, r3, #26
 8001e78:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d109      	bne.n	8001e9c <HAL_ADC_ConfigChannel+0x50c>
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	0e9b      	lsrs	r3, r3, #26
 8001e8e:	3301      	adds	r3, #1
 8001e90:	f003 031f 	and.w	r3, r3, #31
 8001e94:	2101      	movs	r1, #1
 8001e96:	fa01 f303 	lsl.w	r3, r1, r3
 8001e9a:	e017      	b.n	8001ecc <HAL_ADC_ConfigChannel+0x53c>
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ea4:	fa93 f3a3 	rbit	r3, r3
 8001ea8:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001eaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001eac:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001eae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d101      	bne.n	8001eb8 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8001eb4:	2320      	movs	r3, #32
 8001eb6:	e003      	b.n	8001ec0 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8001eb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001eba:	fab3 f383 	clz	r3, r3
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	f003 031f 	and.w	r3, r3, #31
 8001ec6:	2101      	movs	r1, #1
 8001ec8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ecc:	ea42 0103 	orr.w	r1, r2, r3
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d10a      	bne.n	8001ef2 <HAL_ADC_ConfigChannel+0x562>
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	0e9b      	lsrs	r3, r3, #26
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	f003 021f 	and.w	r2, r3, #31
 8001ee8:	4613      	mov	r3, r2
 8001eea:	005b      	lsls	r3, r3, #1
 8001eec:	4413      	add	r3, r2
 8001eee:	051b      	lsls	r3, r3, #20
 8001ef0:	e018      	b.n	8001f24 <HAL_ADC_ConfigChannel+0x594>
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001efa:	fa93 f3a3 	rbit	r3, r3
 8001efe:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001f00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f02:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001f04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d101      	bne.n	8001f0e <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8001f0a:	2320      	movs	r3, #32
 8001f0c:	e003      	b.n	8001f16 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8001f0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f10:	fab3 f383 	clz	r3, r3
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	3301      	adds	r3, #1
 8001f18:	f003 021f 	and.w	r2, r3, #31
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	005b      	lsls	r3, r3, #1
 8001f20:	4413      	add	r3, r2
 8001f22:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f24:	430b      	orrs	r3, r1
 8001f26:	e080      	b.n	800202a <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d107      	bne.n	8001f44 <HAL_ADC_ConfigChannel+0x5b4>
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	0e9b      	lsrs	r3, r3, #26
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	069b      	lsls	r3, r3, #26
 8001f3e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f42:	e015      	b.n	8001f70 <HAL_ADC_ConfigChannel+0x5e0>
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f4c:	fa93 f3a3 	rbit	r3, r3
 8001f50:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f54:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d101      	bne.n	8001f60 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8001f5c:	2320      	movs	r3, #32
 8001f5e:	e003      	b.n	8001f68 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8001f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f62:	fab3 f383 	clz	r3, r3
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	3301      	adds	r3, #1
 8001f6a:	069b      	lsls	r3, r3, #26
 8001f6c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d109      	bne.n	8001f90 <HAL_ADC_ConfigChannel+0x600>
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	0e9b      	lsrs	r3, r3, #26
 8001f82:	3301      	adds	r3, #1
 8001f84:	f003 031f 	and.w	r3, r3, #31
 8001f88:	2101      	movs	r1, #1
 8001f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f8e:	e017      	b.n	8001fc0 <HAL_ADC_ConfigChannel+0x630>
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f96:	6a3b      	ldr	r3, [r7, #32]
 8001f98:	fa93 f3a3 	rbit	r3, r3
 8001f9c:	61fb      	str	r3, [r7, #28]
  return result;
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d101      	bne.n	8001fac <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8001fa8:	2320      	movs	r3, #32
 8001faa:	e003      	b.n	8001fb4 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8001fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fae:	fab3 f383 	clz	r3, r3
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	f003 031f 	and.w	r3, r3, #31
 8001fba:	2101      	movs	r1, #1
 8001fbc:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc0:	ea42 0103 	orr.w	r1, r2, r3
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d10d      	bne.n	8001fec <HAL_ADC_ConfigChannel+0x65c>
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	0e9b      	lsrs	r3, r3, #26
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	f003 021f 	and.w	r2, r3, #31
 8001fdc:	4613      	mov	r3, r2
 8001fde:	005b      	lsls	r3, r3, #1
 8001fe0:	4413      	add	r3, r2
 8001fe2:	3b1e      	subs	r3, #30
 8001fe4:	051b      	lsls	r3, r3, #20
 8001fe6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001fea:	e01d      	b.n	8002028 <HAL_ADC_ConfigChannel+0x698>
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	fa93 f3a3 	rbit	r3, r3
 8001ff8:	613b      	str	r3, [r7, #16]
  return result;
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d103      	bne.n	800200c <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002004:	2320      	movs	r3, #32
 8002006:	e005      	b.n	8002014 <HAL_ADC_ConfigChannel+0x684>
 8002008:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800200c:	69bb      	ldr	r3, [r7, #24]
 800200e:	fab3 f383 	clz	r3, r3
 8002012:	b2db      	uxtb	r3, r3
 8002014:	3301      	adds	r3, #1
 8002016:	f003 021f 	and.w	r2, r3, #31
 800201a:	4613      	mov	r3, r2
 800201c:	005b      	lsls	r3, r3, #1
 800201e:	4413      	add	r3, r2
 8002020:	3b1e      	subs	r3, #30
 8002022:	051b      	lsls	r3, r3, #20
 8002024:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002028:	430b      	orrs	r3, r1
 800202a:	683a      	ldr	r2, [r7, #0]
 800202c:	6892      	ldr	r2, [r2, #8]
 800202e:	4619      	mov	r1, r3
 8002030:	f7ff f984 	bl	800133c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	4b44      	ldr	r3, [pc, #272]	; (800214c <HAL_ADC_ConfigChannel+0x7bc>)
 800203a:	4013      	ands	r3, r2
 800203c:	2b00      	cmp	r3, #0
 800203e:	d07a      	beq.n	8002136 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002040:	4843      	ldr	r0, [pc, #268]	; (8002150 <HAL_ADC_ConfigChannel+0x7c0>)
 8002042:	f7ff f8d9 	bl	80011f8 <LL_ADC_GetCommonPathInternalCh>
 8002046:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a41      	ldr	r2, [pc, #260]	; (8002154 <HAL_ADC_ConfigChannel+0x7c4>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d12c      	bne.n	80020ae <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002054:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002058:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d126      	bne.n	80020ae <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a3c      	ldr	r2, [pc, #240]	; (8002158 <HAL_ADC_ConfigChannel+0x7c8>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d004      	beq.n	8002074 <HAL_ADC_ConfigChannel+0x6e4>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a3b      	ldr	r2, [pc, #236]	; (800215c <HAL_ADC_ConfigChannel+0x7cc>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d15d      	bne.n	8002130 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002074:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002078:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800207c:	4619      	mov	r1, r3
 800207e:	4834      	ldr	r0, [pc, #208]	; (8002150 <HAL_ADC_ConfigChannel+0x7c0>)
 8002080:	f7ff f8a7 	bl	80011d2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002084:	4b36      	ldr	r3, [pc, #216]	; (8002160 <HAL_ADC_ConfigChannel+0x7d0>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	099b      	lsrs	r3, r3, #6
 800208a:	4a36      	ldr	r2, [pc, #216]	; (8002164 <HAL_ADC_ConfigChannel+0x7d4>)
 800208c:	fba2 2303 	umull	r2, r3, r2, r3
 8002090:	099b      	lsrs	r3, r3, #6
 8002092:	1c5a      	adds	r2, r3, #1
 8002094:	4613      	mov	r3, r2
 8002096:	005b      	lsls	r3, r3, #1
 8002098:	4413      	add	r3, r2
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800209e:	e002      	b.n	80020a6 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	3b01      	subs	r3, #1
 80020a4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d1f9      	bne.n	80020a0 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80020ac:	e040      	b.n	8002130 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a2d      	ldr	r2, [pc, #180]	; (8002168 <HAL_ADC_ConfigChannel+0x7d8>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d118      	bne.n	80020ea <HAL_ADC_ConfigChannel+0x75a>
 80020b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80020bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d112      	bne.n	80020ea <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a23      	ldr	r2, [pc, #140]	; (8002158 <HAL_ADC_ConfigChannel+0x7c8>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d004      	beq.n	80020d8 <HAL_ADC_ConfigChannel+0x748>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a22      	ldr	r2, [pc, #136]	; (800215c <HAL_ADC_ConfigChannel+0x7cc>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d12d      	bne.n	8002134 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80020d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80020dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020e0:	4619      	mov	r1, r3
 80020e2:	481b      	ldr	r0, [pc, #108]	; (8002150 <HAL_ADC_ConfigChannel+0x7c0>)
 80020e4:	f7ff f875 	bl	80011d2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80020e8:	e024      	b.n	8002134 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a1f      	ldr	r2, [pc, #124]	; (800216c <HAL_ADC_ConfigChannel+0x7dc>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d120      	bne.n	8002136 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80020f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80020f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d11a      	bne.n	8002136 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a14      	ldr	r2, [pc, #80]	; (8002158 <HAL_ADC_ConfigChannel+0x7c8>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d115      	bne.n	8002136 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800210a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800210e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002112:	4619      	mov	r1, r3
 8002114:	480e      	ldr	r0, [pc, #56]	; (8002150 <HAL_ADC_ConfigChannel+0x7c0>)
 8002116:	f7ff f85c 	bl	80011d2 <LL_ADC_SetCommonPathInternalCh>
 800211a:	e00c      	b.n	8002136 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002120:	f043 0220 	orr.w	r2, r3, #32
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800212e:	e002      	b.n	8002136 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002130:	bf00      	nop
 8002132:	e000      	b.n	8002136 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002134:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800213e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002142:	4618      	mov	r0, r3
 8002144:	37d8      	adds	r7, #216	; 0xd8
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	80080000 	.word	0x80080000
 8002150:	50040300 	.word	0x50040300
 8002154:	c7520000 	.word	0xc7520000
 8002158:	50040000 	.word	0x50040000
 800215c:	50040200 	.word	0x50040200
 8002160:	20000024 	.word	0x20000024
 8002164:	053e2d63 	.word	0x053e2d63
 8002168:	cb840000 	.word	0xcb840000
 800216c:	80000001 	.word	0x80000001

08002170 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4618      	mov	r0, r3
 800217e:	f7ff f99d 	bl	80014bc <LL_ADC_IsEnabled>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d14d      	bne.n	8002224 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	689a      	ldr	r2, [r3, #8]
 800218e:	4b28      	ldr	r3, [pc, #160]	; (8002230 <ADC_Enable+0xc0>)
 8002190:	4013      	ands	r3, r2
 8002192:	2b00      	cmp	r3, #0
 8002194:	d00d      	beq.n	80021b2 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800219a:	f043 0210 	orr.w	r2, r3, #16
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021a6:	f043 0201 	orr.w	r2, r3, #1
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e039      	b.n	8002226 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7ff f96c 	bl	8001494 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80021bc:	f7fe ffc6 	bl	800114c <HAL_GetTick>
 80021c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80021c2:	e028      	b.n	8002216 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7ff f977 	bl	80014bc <LL_ADC_IsEnabled>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d104      	bne.n	80021de <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4618      	mov	r0, r3
 80021da:	f7ff f95b 	bl	8001494 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80021de:	f7fe ffb5 	bl	800114c <HAL_GetTick>
 80021e2:	4602      	mov	r2, r0
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d914      	bls.n	8002216 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0301 	and.w	r3, r3, #1
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d00d      	beq.n	8002216 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021fe:	f043 0210 	orr.w	r2, r3, #16
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800220a:	f043 0201 	orr.w	r2, r3, #1
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e007      	b.n	8002226 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0301 	and.w	r3, r3, #1
 8002220:	2b01      	cmp	r3, #1
 8002222:	d1cf      	bne.n	80021c4 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002224:	2300      	movs	r3, #0
}
 8002226:	4618      	mov	r0, r3
 8002228:	3710      	adds	r7, #16
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	8000003f 	.word	0x8000003f

08002234 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002240:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002246:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800224a:	2b00      	cmp	r3, #0
 800224c:	d14b      	bne.n	80022e6 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002252:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0308 	and.w	r3, r3, #8
 8002264:	2b00      	cmp	r3, #0
 8002266:	d021      	beq.n	80022ac <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4618      	mov	r0, r3
 800226e:	f7ff f826 	bl	80012be <LL_ADC_REG_IsTriggerSourceSWStart>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d032      	beq.n	80022de <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d12b      	bne.n	80022de <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800228a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002296:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d11f      	bne.n	80022de <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022a2:	f043 0201 	orr.w	r2, r3, #1
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	655a      	str	r2, [r3, #84]	; 0x54
 80022aa:	e018      	b.n	80022de <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	68db      	ldr	r3, [r3, #12]
 80022b2:	f003 0302 	and.w	r3, r3, #2
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d111      	bne.n	80022de <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d105      	bne.n	80022de <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022d6:	f043 0201 	orr.w	r2, r3, #1
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80022de:	68f8      	ldr	r0, [r7, #12]
 80022e0:	f7fe f9b4 	bl	800064c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80022e4:	e00e      	b.n	8002304 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ea:	f003 0310 	and.w	r3, r3, #16
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d003      	beq.n	80022fa <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80022f2:	68f8      	ldr	r0, [r7, #12]
 80022f4:	f7ff fb42 	bl	800197c <HAL_ADC_ErrorCallback>
}
 80022f8:	e004      	b.n	8002304 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	4798      	blx	r3
}
 8002304:	bf00      	nop
 8002306:	3710      	adds	r7, #16
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}

0800230c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002318:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800231a:	68f8      	ldr	r0, [r7, #12]
 800231c:	f7fe f974 	bl	8000608 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002320:	bf00      	nop
 8002322:	3710      	adds	r7, #16
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}

08002328 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002334:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800233a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002346:	f043 0204 	orr.w	r2, r3, #4
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800234e:	68f8      	ldr	r0, [r7, #12]
 8002350:	f7ff fb14 	bl	800197c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002354:	bf00      	nop
 8002356:	3710      	adds	r7, #16
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}

0800235c <LL_ADC_IsEnabled>:
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	f003 0301 	and.w	r3, r3, #1
 800236c:	2b01      	cmp	r3, #1
 800236e:	d101      	bne.n	8002374 <LL_ADC_IsEnabled+0x18>
 8002370:	2301      	movs	r3, #1
 8002372:	e000      	b.n	8002376 <LL_ADC_IsEnabled+0x1a>
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	370c      	adds	r7, #12
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr

08002382 <LL_ADC_REG_IsConversionOngoing>:
{
 8002382:	b480      	push	{r7}
 8002384:	b083      	sub	sp, #12
 8002386:	af00      	add	r7, sp, #0
 8002388:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	f003 0304 	and.w	r3, r3, #4
 8002392:	2b04      	cmp	r3, #4
 8002394:	d101      	bne.n	800239a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002396:	2301      	movs	r3, #1
 8002398:	e000      	b.n	800239c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800239a:	2300      	movs	r3, #0
}
 800239c:	4618      	mov	r0, r3
 800239e:	370c      	adds	r7, #12
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr

080023a8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80023a8:	b590      	push	{r4, r7, lr}
 80023aa:	b09f      	sub	sp, #124	; 0x7c
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023b2:	2300      	movs	r3, #0
 80023b4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d101      	bne.n	80023c6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80023c2:	2302      	movs	r3, #2
 80023c4:	e093      	b.n	80024ee <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2201      	movs	r2, #1
 80023ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80023ce:	2300      	movs	r3, #0
 80023d0:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80023d2:	2300      	movs	r3, #0
 80023d4:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a47      	ldr	r2, [pc, #284]	; (80024f8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d102      	bne.n	80023e6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80023e0:	4b46      	ldr	r3, [pc, #280]	; (80024fc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80023e2:	60bb      	str	r3, [r7, #8]
 80023e4:	e001      	b.n	80023ea <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80023e6:	2300      	movs	r3, #0
 80023e8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d10b      	bne.n	8002408 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023f4:	f043 0220 	orr.w	r2, r3, #32
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2200      	movs	r2, #0
 8002400:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e072      	b.n	80024ee <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	4618      	mov	r0, r3
 800240c:	f7ff ffb9 	bl	8002382 <LL_ADC_REG_IsConversionOngoing>
 8002410:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4618      	mov	r0, r3
 8002418:	f7ff ffb3 	bl	8002382 <LL_ADC_REG_IsConversionOngoing>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d154      	bne.n	80024cc <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002422:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002424:	2b00      	cmp	r3, #0
 8002426:	d151      	bne.n	80024cc <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002428:	4b35      	ldr	r3, [pc, #212]	; (8002500 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800242a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d02c      	beq.n	800248e <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002434:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	6859      	ldr	r1, [r3, #4]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002446:	035b      	lsls	r3, r3, #13
 8002448:	430b      	orrs	r3, r1
 800244a:	431a      	orrs	r2, r3
 800244c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800244e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002450:	4829      	ldr	r0, [pc, #164]	; (80024f8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002452:	f7ff ff83 	bl	800235c <LL_ADC_IsEnabled>
 8002456:	4604      	mov	r4, r0
 8002458:	4828      	ldr	r0, [pc, #160]	; (80024fc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800245a:	f7ff ff7f 	bl	800235c <LL_ADC_IsEnabled>
 800245e:	4603      	mov	r3, r0
 8002460:	431c      	orrs	r4, r3
 8002462:	4828      	ldr	r0, [pc, #160]	; (8002504 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002464:	f7ff ff7a 	bl	800235c <LL_ADC_IsEnabled>
 8002468:	4603      	mov	r3, r0
 800246a:	4323      	orrs	r3, r4
 800246c:	2b00      	cmp	r3, #0
 800246e:	d137      	bne.n	80024e0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002470:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002478:	f023 030f 	bic.w	r3, r3, #15
 800247c:	683a      	ldr	r2, [r7, #0]
 800247e:	6811      	ldr	r1, [r2, #0]
 8002480:	683a      	ldr	r2, [r7, #0]
 8002482:	6892      	ldr	r2, [r2, #8]
 8002484:	430a      	orrs	r2, r1
 8002486:	431a      	orrs	r2, r3
 8002488:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800248a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800248c:	e028      	b.n	80024e0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800248e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002496:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002498:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800249a:	4817      	ldr	r0, [pc, #92]	; (80024f8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800249c:	f7ff ff5e 	bl	800235c <LL_ADC_IsEnabled>
 80024a0:	4604      	mov	r4, r0
 80024a2:	4816      	ldr	r0, [pc, #88]	; (80024fc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80024a4:	f7ff ff5a 	bl	800235c <LL_ADC_IsEnabled>
 80024a8:	4603      	mov	r3, r0
 80024aa:	431c      	orrs	r4, r3
 80024ac:	4815      	ldr	r0, [pc, #84]	; (8002504 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80024ae:	f7ff ff55 	bl	800235c <LL_ADC_IsEnabled>
 80024b2:	4603      	mov	r3, r0
 80024b4:	4323      	orrs	r3, r4
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d112      	bne.n	80024e0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80024ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80024c2:	f023 030f 	bic.w	r3, r3, #15
 80024c6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80024c8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80024ca:	e009      	b.n	80024e0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024d0:	f043 0220 	orr.w	r2, r3, #32
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80024de:	e000      	b.n	80024e2 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80024e0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2200      	movs	r2, #0
 80024e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80024ea:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	377c      	adds	r7, #124	; 0x7c
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd90      	pop	{r4, r7, pc}
 80024f6:	bf00      	nop
 80024f8:	50040000 	.word	0x50040000
 80024fc:	50040100 	.word	0x50040100
 8002500:	50040300 	.word	0x50040300
 8002504:	50040200 	.word	0x50040200

08002508 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002508:	b480      	push	{r7}
 800250a:	b085      	sub	sp, #20
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f003 0307 	and.w	r3, r3, #7
 8002516:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002518:	4b0c      	ldr	r3, [pc, #48]	; (800254c <__NVIC_SetPriorityGrouping+0x44>)
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800251e:	68ba      	ldr	r2, [r7, #8]
 8002520:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002524:	4013      	ands	r3, r2
 8002526:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002530:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002534:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002538:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800253a:	4a04      	ldr	r2, [pc, #16]	; (800254c <__NVIC_SetPriorityGrouping+0x44>)
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	60d3      	str	r3, [r2, #12]
}
 8002540:	bf00      	nop
 8002542:	3714      	adds	r7, #20
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr
 800254c:	e000ed00 	.word	0xe000ed00

08002550 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002554:	4b04      	ldr	r3, [pc, #16]	; (8002568 <__NVIC_GetPriorityGrouping+0x18>)
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	0a1b      	lsrs	r3, r3, #8
 800255a:	f003 0307 	and.w	r3, r3, #7
}
 800255e:	4618      	mov	r0, r3
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr
 8002568:	e000ed00 	.word	0xe000ed00

0800256c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	4603      	mov	r3, r0
 8002574:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800257a:	2b00      	cmp	r3, #0
 800257c:	db0b      	blt.n	8002596 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800257e:	79fb      	ldrb	r3, [r7, #7]
 8002580:	f003 021f 	and.w	r2, r3, #31
 8002584:	4907      	ldr	r1, [pc, #28]	; (80025a4 <__NVIC_EnableIRQ+0x38>)
 8002586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800258a:	095b      	lsrs	r3, r3, #5
 800258c:	2001      	movs	r0, #1
 800258e:	fa00 f202 	lsl.w	r2, r0, r2
 8002592:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002596:	bf00      	nop
 8002598:	370c      	adds	r7, #12
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop
 80025a4:	e000e100 	.word	0xe000e100

080025a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	4603      	mov	r3, r0
 80025b0:	6039      	str	r1, [r7, #0]
 80025b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	db0a      	blt.n	80025d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	b2da      	uxtb	r2, r3
 80025c0:	490c      	ldr	r1, [pc, #48]	; (80025f4 <__NVIC_SetPriority+0x4c>)
 80025c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c6:	0112      	lsls	r2, r2, #4
 80025c8:	b2d2      	uxtb	r2, r2
 80025ca:	440b      	add	r3, r1
 80025cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025d0:	e00a      	b.n	80025e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	b2da      	uxtb	r2, r3
 80025d6:	4908      	ldr	r1, [pc, #32]	; (80025f8 <__NVIC_SetPriority+0x50>)
 80025d8:	79fb      	ldrb	r3, [r7, #7]
 80025da:	f003 030f 	and.w	r3, r3, #15
 80025de:	3b04      	subs	r3, #4
 80025e0:	0112      	lsls	r2, r2, #4
 80025e2:	b2d2      	uxtb	r2, r2
 80025e4:	440b      	add	r3, r1
 80025e6:	761a      	strb	r2, [r3, #24]
}
 80025e8:	bf00      	nop
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr
 80025f4:	e000e100 	.word	0xe000e100
 80025f8:	e000ed00 	.word	0xe000ed00

080025fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b089      	sub	sp, #36	; 0x24
 8002600:	af00      	add	r7, sp, #0
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	60b9      	str	r1, [r7, #8]
 8002606:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f003 0307 	and.w	r3, r3, #7
 800260e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	f1c3 0307 	rsb	r3, r3, #7
 8002616:	2b04      	cmp	r3, #4
 8002618:	bf28      	it	cs
 800261a:	2304      	movcs	r3, #4
 800261c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	3304      	adds	r3, #4
 8002622:	2b06      	cmp	r3, #6
 8002624:	d902      	bls.n	800262c <NVIC_EncodePriority+0x30>
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	3b03      	subs	r3, #3
 800262a:	e000      	b.n	800262e <NVIC_EncodePriority+0x32>
 800262c:	2300      	movs	r3, #0
 800262e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002630:	f04f 32ff 	mov.w	r2, #4294967295
 8002634:	69bb      	ldr	r3, [r7, #24]
 8002636:	fa02 f303 	lsl.w	r3, r2, r3
 800263a:	43da      	mvns	r2, r3
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	401a      	ands	r2, r3
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002644:	f04f 31ff 	mov.w	r1, #4294967295
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	fa01 f303 	lsl.w	r3, r1, r3
 800264e:	43d9      	mvns	r1, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002654:	4313      	orrs	r3, r2
         );
}
 8002656:	4618      	mov	r0, r3
 8002658:	3724      	adds	r7, #36	; 0x24
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
	...

08002664 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	3b01      	subs	r3, #1
 8002670:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002674:	d301      	bcc.n	800267a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002676:	2301      	movs	r3, #1
 8002678:	e00f      	b.n	800269a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800267a:	4a0a      	ldr	r2, [pc, #40]	; (80026a4 <SysTick_Config+0x40>)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	3b01      	subs	r3, #1
 8002680:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002682:	210f      	movs	r1, #15
 8002684:	f04f 30ff 	mov.w	r0, #4294967295
 8002688:	f7ff ff8e 	bl	80025a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800268c:	4b05      	ldr	r3, [pc, #20]	; (80026a4 <SysTick_Config+0x40>)
 800268e:	2200      	movs	r2, #0
 8002690:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002692:	4b04      	ldr	r3, [pc, #16]	; (80026a4 <SysTick_Config+0x40>)
 8002694:	2207      	movs	r2, #7
 8002696:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	e000e010 	.word	0xe000e010

080026a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f7ff ff29 	bl	8002508 <__NVIC_SetPriorityGrouping>
}
 80026b6:	bf00      	nop
 80026b8:	3708      	adds	r7, #8
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}

080026be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026be:	b580      	push	{r7, lr}
 80026c0:	b086      	sub	sp, #24
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	4603      	mov	r3, r0
 80026c6:	60b9      	str	r1, [r7, #8]
 80026c8:	607a      	str	r2, [r7, #4]
 80026ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80026cc:	2300      	movs	r3, #0
 80026ce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80026d0:	f7ff ff3e 	bl	8002550 <__NVIC_GetPriorityGrouping>
 80026d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	68b9      	ldr	r1, [r7, #8]
 80026da:	6978      	ldr	r0, [r7, #20]
 80026dc:	f7ff ff8e 	bl	80025fc <NVIC_EncodePriority>
 80026e0:	4602      	mov	r2, r0
 80026e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026e6:	4611      	mov	r1, r2
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7ff ff5d 	bl	80025a8 <__NVIC_SetPriority>
}
 80026ee:	bf00      	nop
 80026f0:	3718      	adds	r7, #24
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}

080026f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026f6:	b580      	push	{r7, lr}
 80026f8:	b082      	sub	sp, #8
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	4603      	mov	r3, r0
 80026fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002700:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002704:	4618      	mov	r0, r3
 8002706:	f7ff ff31 	bl	800256c <__NVIC_EnableIRQ>
}
 800270a:	bf00      	nop
 800270c:	3708      	adds	r7, #8
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002712:	b580      	push	{r7, lr}
 8002714:	b082      	sub	sp, #8
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f7ff ffa2 	bl	8002664 <SysTick_Config>
 8002720:	4603      	mov	r3, r0
}
 8002722:	4618      	mov	r0, r3
 8002724:	3708      	adds	r7, #8
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800272a:	b580      	push	{r7, lr}
 800272c:	b082      	sub	sp, #8
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d101      	bne.n	800273c <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e014      	b.n	8002766 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	791b      	ldrb	r3, [r3, #4]
 8002740:	b2db      	uxtb	r3, r3
 8002742:	2b00      	cmp	r3, #0
 8002744:	d105      	bne.n	8002752 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f7fd fe55 	bl	80003fc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2202      	movs	r2, #2
 8002756:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2200      	movs	r2, #0
 800275c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2201      	movs	r2, #1
 8002762:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	3708      	adds	r7, #8
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
	...

08002770 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b086      	sub	sp, #24
 8002774:	af00      	add	r7, sp, #0
 8002776:	60f8      	str	r0, [r7, #12]
 8002778:	60b9      	str	r1, [r7, #8]
 800277a:	607a      	str	r2, [r7, #4]
 800277c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 800277e:	2300      	movs	r3, #0
 8002780:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	795b      	ldrb	r3, [r3, #5]
 8002786:	2b01      	cmp	r3, #1
 8002788:	d101      	bne.n	800278e <HAL_DAC_Start_DMA+0x1e>
 800278a:	2302      	movs	r3, #2
 800278c:	e0ab      	b.n	80028e6 <HAL_DAC_Start_DMA+0x176>
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2201      	movs	r2, #1
 8002792:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2202      	movs	r2, #2
 8002798:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d12f      	bne.n	8002800 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	4a52      	ldr	r2, [pc, #328]	; (80028f0 <HAL_DAC_Start_DMA+0x180>)
 80027a6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	4a51      	ldr	r2, [pc, #324]	; (80028f4 <HAL_DAC_Start_DMA+0x184>)
 80027ae:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	4a50      	ldr	r2, [pc, #320]	; (80028f8 <HAL_DAC_Start_DMA+0x188>)
 80027b6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80027c6:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80027c8:	6a3b      	ldr	r3, [r7, #32]
 80027ca:	2b08      	cmp	r3, #8
 80027cc:	d013      	beq.n	80027f6 <HAL_DAC_Start_DMA+0x86>
 80027ce:	6a3b      	ldr	r3, [r7, #32]
 80027d0:	2b08      	cmp	r3, #8
 80027d2:	d845      	bhi.n	8002860 <HAL_DAC_Start_DMA+0xf0>
 80027d4:	6a3b      	ldr	r3, [r7, #32]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d003      	beq.n	80027e2 <HAL_DAC_Start_DMA+0x72>
 80027da:	6a3b      	ldr	r3, [r7, #32]
 80027dc:	2b04      	cmp	r3, #4
 80027de:	d005      	beq.n	80027ec <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80027e0:	e03e      	b.n	8002860 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	3308      	adds	r3, #8
 80027e8:	613b      	str	r3, [r7, #16]
        break;
 80027ea:	e03c      	b.n	8002866 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	330c      	adds	r3, #12
 80027f2:	613b      	str	r3, [r7, #16]
        break;
 80027f4:	e037      	b.n	8002866 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	3310      	adds	r3, #16
 80027fc:	613b      	str	r3, [r7, #16]
        break;
 80027fe:	e032      	b.n	8002866 <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	4a3d      	ldr	r2, [pc, #244]	; (80028fc <HAL_DAC_Start_DMA+0x18c>)
 8002806:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	4a3c      	ldr	r2, [pc, #240]	; (8002900 <HAL_DAC_Start_DMA+0x190>)
 800280e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	4a3b      	ldr	r2, [pc, #236]	; (8002904 <HAL_DAC_Start_DMA+0x194>)
 8002816:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002826:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8002828:	6a3b      	ldr	r3, [r7, #32]
 800282a:	2b08      	cmp	r3, #8
 800282c:	d013      	beq.n	8002856 <HAL_DAC_Start_DMA+0xe6>
 800282e:	6a3b      	ldr	r3, [r7, #32]
 8002830:	2b08      	cmp	r3, #8
 8002832:	d817      	bhi.n	8002864 <HAL_DAC_Start_DMA+0xf4>
 8002834:	6a3b      	ldr	r3, [r7, #32]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d003      	beq.n	8002842 <HAL_DAC_Start_DMA+0xd2>
 800283a:	6a3b      	ldr	r3, [r7, #32]
 800283c:	2b04      	cmp	r3, #4
 800283e:	d005      	beq.n	800284c <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8002840:	e010      	b.n	8002864 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	3314      	adds	r3, #20
 8002848:	613b      	str	r3, [r7, #16]
        break;
 800284a:	e00c      	b.n	8002866 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	3318      	adds	r3, #24
 8002852:	613b      	str	r3, [r7, #16]
        break;
 8002854:	e007      	b.n	8002866 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	331c      	adds	r3, #28
 800285c:	613b      	str	r3, [r7, #16]
        break;
 800285e:	e002      	b.n	8002866 <HAL_DAC_Start_DMA+0xf6>
        break;
 8002860:	bf00      	nop
 8002862:	e000      	b.n	8002866 <HAL_DAC_Start_DMA+0xf6>
        break;
 8002864:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d111      	bne.n	8002890 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800287a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6898      	ldr	r0, [r3, #8]
 8002880:	6879      	ldr	r1, [r7, #4]
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	693a      	ldr	r2, [r7, #16]
 8002886:	f000 fab9 	bl	8002dfc <HAL_DMA_Start_IT>
 800288a:	4603      	mov	r3, r0
 800288c:	75fb      	strb	r3, [r7, #23]
 800288e:	e010      	b.n	80028b2 <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800289e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	68d8      	ldr	r0, [r3, #12]
 80028a4:	6879      	ldr	r1, [r7, #4]
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	693a      	ldr	r2, [r7, #16]
 80028aa:	f000 faa7 	bl	8002dfc <HAL_DMA_Start_IT>
 80028ae:	4603      	mov	r3, r0
 80028b0:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2200      	movs	r2, #0
 80028b6:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80028b8:	7dfb      	ldrb	r3, [r7, #23]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d10c      	bne.n	80028d8 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	6819      	ldr	r1, [r3, #0]
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	f003 0310 	and.w	r3, r3, #16
 80028ca:	2201      	movs	r2, #1
 80028cc:	409a      	lsls	r2, r3
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	430a      	orrs	r2, r1
 80028d4:	601a      	str	r2, [r3, #0]
 80028d6:	e005      	b.n	80028e4 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	691b      	ldr	r3, [r3, #16]
 80028dc:	f043 0204 	orr.w	r2, r3, #4
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80028e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3718      	adds	r7, #24
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	08002b79 	.word	0x08002b79
 80028f4:	08002b9b 	.word	0x08002b9b
 80028f8:	08002bb7 	.word	0x08002bb7
 80028fc:	08002c21 	.word	0x08002c21
 8002900:	08002c43 	.word	0x08002c43
 8002904:	08002c5f 	.word	0x08002c5f

08002908 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8002910:	bf00      	nop
 8002912:	370c      	adds	r7, #12
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr

0800291c <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002924:	bf00      	nop
 8002926:	370c      	adds	r7, #12
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr

08002930 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8002938:	bf00      	nop
 800293a:	370c      	adds	r7, #12
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr

08002944 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b088      	sub	sp, #32
 8002948:	af00      	add	r7, sp, #0
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	60b9      	str	r1, [r7, #8]
 800294e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8002950:	2300      	movs	r3, #0
 8002952:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	795b      	ldrb	r3, [r3, #5]
 8002958:	2b01      	cmp	r3, #1
 800295a:	d101      	bne.n	8002960 <HAL_DAC_ConfigChannel+0x1c>
 800295c:	2302      	movs	r3, #2
 800295e:	e107      	b.n	8002b70 <HAL_DAC_ConfigChannel+0x22c>
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2201      	movs	r2, #1
 8002964:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2202      	movs	r2, #2
 800296a:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2b04      	cmp	r3, #4
 8002972:	d174      	bne.n	8002a5e <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002974:	f7fe fbea 	bl	800114c <HAL_GetTick>
 8002978:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d134      	bne.n	80029ea <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002980:	e011      	b.n	80029a6 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002982:	f7fe fbe3 	bl	800114c <HAL_GetTick>
 8002986:	4602      	mov	r2, r0
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	2b01      	cmp	r3, #1
 800298e:	d90a      	bls.n	80029a6 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	691b      	ldr	r3, [r3, #16]
 8002994:	f043 0208 	orr.w	r2, r3, #8
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2203      	movs	r2, #3
 80029a0:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e0e4      	b.n	8002b70 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d1e6      	bne.n	8002982 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 80029b4:	2001      	movs	r0, #1
 80029b6:	f7fe fbd5 	bl	8001164 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	68ba      	ldr	r2, [r7, #8]
 80029c0:	6992      	ldr	r2, [r2, #24]
 80029c2:	641a      	str	r2, [r3, #64]	; 0x40
 80029c4:	e01e      	b.n	8002a04 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80029c6:	f7fe fbc1 	bl	800114c <HAL_GetTick>
 80029ca:	4602      	mov	r2, r0
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d90a      	bls.n	80029ea <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	691b      	ldr	r3, [r3, #16]
 80029d8:	f043 0208 	orr.w	r2, r3, #8
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2203      	movs	r2, #3
 80029e4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e0c2      	b.n	8002b70 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	dbe8      	blt.n	80029c6 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 80029f4:	2001      	movs	r0, #1
 80029f6:	f7fe fbb5 	bl	8001164 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	68ba      	ldr	r2, [r7, #8]
 8002a00:	6992      	ldr	r2, [r2, #24]
 8002a02:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f003 0310 	and.w	r3, r3, #16
 8002a10:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002a14:	fa01 f303 	lsl.w	r3, r1, r3
 8002a18:	43db      	mvns	r3, r3
 8002a1a:	ea02 0103 	and.w	r1, r2, r3
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	69da      	ldr	r2, [r3, #28]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f003 0310 	and.w	r3, r3, #16
 8002a28:	409a      	lsls	r2, r3
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	430a      	orrs	r2, r1
 8002a30:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f003 0310 	and.w	r3, r3, #16
 8002a3e:	21ff      	movs	r1, #255	; 0xff
 8002a40:	fa01 f303 	lsl.w	r3, r1, r3
 8002a44:	43db      	mvns	r3, r3
 8002a46:	ea02 0103 	and.w	r1, r2, r3
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	6a1a      	ldr	r2, [r3, #32]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f003 0310 	and.w	r3, r3, #16
 8002a54:	409a      	lsls	r2, r3
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	430a      	orrs	r2, r1
 8002a5c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d11d      	bne.n	8002aa2 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a6c:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f003 0310 	and.w	r3, r3, #16
 8002a74:	221f      	movs	r2, #31
 8002a76:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7a:	43db      	mvns	r3, r3
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	4013      	ands	r3, r2
 8002a80:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	695b      	ldr	r3, [r3, #20]
 8002a86:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	f003 0310 	and.w	r3, r3, #16
 8002a8e:	697a      	ldr	r2, [r7, #20]
 8002a90:	fa02 f303 	lsl.w	r3, r2, r3
 8002a94:	69ba      	ldr	r2, [r7, #24]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	69ba      	ldr	r2, [r7, #24]
 8002aa0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aa8:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f003 0310 	and.w	r3, r3, #16
 8002ab0:	2207      	movs	r2, #7
 8002ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab6:	43db      	mvns	r3, r3
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	4013      	ands	r3, r2
 8002abc:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	431a      	orrs	r2, r3
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f003 0310 	and.w	r3, r3, #16
 8002ad6:	697a      	ldr	r2, [r7, #20]
 8002ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8002adc:	69ba      	ldr	r2, [r7, #24]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	69ba      	ldr	r2, [r7, #24]
 8002ae8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	6819      	ldr	r1, [r3, #0]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f003 0310 	and.w	r3, r3, #16
 8002af6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002afa:	fa02 f303 	lsl.w	r3, r2, r3
 8002afe:	43da      	mvns	r2, r3
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	400a      	ands	r2, r1
 8002b06:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f003 0310 	and.w	r3, r3, #16
 8002b16:	f640 72fc 	movw	r2, #4092	; 0xffc
 8002b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1e:	43db      	mvns	r3, r3
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	4013      	ands	r3, r2
 8002b24:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	f003 0310 	and.w	r3, r3, #16
 8002b32:	697a      	ldr	r2, [r7, #20]
 8002b34:	fa02 f303 	lsl.w	r3, r2, r3
 8002b38:	69ba      	ldr	r2, [r7, #24]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	69ba      	ldr	r2, [r7, #24]
 8002b44:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	6819      	ldr	r1, [r3, #0]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f003 0310 	and.w	r3, r3, #16
 8002b52:	22c0      	movs	r2, #192	; 0xc0
 8002b54:	fa02 f303 	lsl.w	r3, r2, r3
 8002b58:	43da      	mvns	r2, r3
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	400a      	ands	r2, r1
 8002b60:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2201      	movs	r2, #1
 8002b66:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002b6e:	2300      	movs	r3, #0
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3720      	adds	r7, #32
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b084      	sub	sp, #16
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b84:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8002b86:	68f8      	ldr	r0, [r7, #12]
 8002b88:	f7ff febe 	bl	8002908 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	711a      	strb	r2, [r3, #4]
}
 8002b92:	bf00      	nop
 8002b94:	3710      	adds	r7, #16
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}

08002b9a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002b9a:	b580      	push	{r7, lr}
 8002b9c:	b084      	sub	sp, #16
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba6:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002ba8:	68f8      	ldr	r0, [r7, #12]
 8002baa:	f7ff feb7 	bl	800291c <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002bae:	bf00      	nop
 8002bb0:	3710      	adds	r7, #16
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}

08002bb6 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8002bb6:	b580      	push	{r7, lr}
 8002bb8:	b084      	sub	sp, #16
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc2:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	691b      	ldr	r3, [r3, #16]
 8002bc8:	f043 0204 	orr.w	r2, r3, #4
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8002bd0:	68f8      	ldr	r0, [r7, #12]
 8002bd2:	f7ff fead 	bl	8002930 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2201      	movs	r2, #1
 8002bda:	711a      	strb	r2, [r3, #4]
}
 8002bdc:	bf00      	nop
 8002bde:	3710      	adds	r7, #16
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8002bec:	bf00      	nop
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr

08002bf8 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002c00:	bf00      	nop
 8002c02:	370c      	adds	r7, #12
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr

08002c0c <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8002c14:	bf00      	nop
 8002c16:	370c      	adds	r7, #12
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr

08002c20 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c2c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8002c2e:	68f8      	ldr	r0, [r7, #12]
 8002c30:	f7ff ffd8 	bl	8002be4 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2201      	movs	r2, #1
 8002c38:	711a      	strb	r2, [r3, #4]
}
 8002c3a:	bf00      	nop
 8002c3c:	3710      	adds	r7, #16
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}

08002c42 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002c42:	b580      	push	{r7, lr}
 8002c44:	b084      	sub	sp, #16
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c4e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8002c50:	68f8      	ldr	r0, [r7, #12]
 8002c52:	f7ff ffd1 	bl	8002bf8 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002c56:	bf00      	nop
 8002c58:	3710      	adds	r7, #16
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}

08002c5e <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8002c5e:	b580      	push	{r7, lr}
 8002c60:	b084      	sub	sp, #16
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c6a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	691b      	ldr	r3, [r3, #16]
 8002c70:	f043 0204 	orr.w	r2, r3, #4
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8002c78:	68f8      	ldr	r0, [r7, #12]
 8002c7a:	f7ff ffc7 	bl	8002c0c <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2201      	movs	r2, #1
 8002c82:	711a      	strb	r2, [r3, #4]
}
 8002c84:	bf00      	nop
 8002c86:	3710      	adds	r7, #16
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b085      	sub	sp, #20
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d101      	bne.n	8002c9e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e098      	b.n	8002dd0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	4b4d      	ldr	r3, [pc, #308]	; (8002ddc <HAL_DMA_Init+0x150>)
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d80f      	bhi.n	8002cca <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	461a      	mov	r2, r3
 8002cb0:	4b4b      	ldr	r3, [pc, #300]	; (8002de0 <HAL_DMA_Init+0x154>)
 8002cb2:	4413      	add	r3, r2
 8002cb4:	4a4b      	ldr	r2, [pc, #300]	; (8002de4 <HAL_DMA_Init+0x158>)
 8002cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cba:	091b      	lsrs	r3, r3, #4
 8002cbc:	009a      	lsls	r2, r3, #2
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a48      	ldr	r2, [pc, #288]	; (8002de8 <HAL_DMA_Init+0x15c>)
 8002cc6:	641a      	str	r2, [r3, #64]	; 0x40
 8002cc8:	e00e      	b.n	8002ce8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	461a      	mov	r2, r3
 8002cd0:	4b46      	ldr	r3, [pc, #280]	; (8002dec <HAL_DMA_Init+0x160>)
 8002cd2:	4413      	add	r3, r2
 8002cd4:	4a43      	ldr	r2, [pc, #268]	; (8002de4 <HAL_DMA_Init+0x158>)
 8002cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cda:	091b      	lsrs	r3, r3, #4
 8002cdc:	009a      	lsls	r2, r3, #2
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a42      	ldr	r2, [pc, #264]	; (8002df0 <HAL_DMA_Init+0x164>)
 8002ce6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2202      	movs	r2, #2
 8002cec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002cfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d02:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002d0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	691b      	ldr	r3, [r3, #16]
 8002d12:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d18:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	699b      	ldr	r3, [r3, #24]
 8002d1e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d24:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6a1b      	ldr	r3, [r3, #32]
 8002d2a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002d2c:	68fa      	ldr	r2, [r7, #12]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	68fa      	ldr	r2, [r7, #12]
 8002d38:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d42:	d039      	beq.n	8002db8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d48:	4a27      	ldr	r2, [pc, #156]	; (8002de8 <HAL_DMA_Init+0x15c>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d11a      	bne.n	8002d84 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002d4e:	4b29      	ldr	r3, [pc, #164]	; (8002df4 <HAL_DMA_Init+0x168>)
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d56:	f003 031c 	and.w	r3, r3, #28
 8002d5a:	210f      	movs	r1, #15
 8002d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d60:	43db      	mvns	r3, r3
 8002d62:	4924      	ldr	r1, [pc, #144]	; (8002df4 <HAL_DMA_Init+0x168>)
 8002d64:	4013      	ands	r3, r2
 8002d66:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002d68:	4b22      	ldr	r3, [pc, #136]	; (8002df4 <HAL_DMA_Init+0x168>)
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6859      	ldr	r1, [r3, #4]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d74:	f003 031c 	and.w	r3, r3, #28
 8002d78:	fa01 f303 	lsl.w	r3, r1, r3
 8002d7c:	491d      	ldr	r1, [pc, #116]	; (8002df4 <HAL_DMA_Init+0x168>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	600b      	str	r3, [r1, #0]
 8002d82:	e019      	b.n	8002db8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002d84:	4b1c      	ldr	r3, [pc, #112]	; (8002df8 <HAL_DMA_Init+0x16c>)
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d8c:	f003 031c 	and.w	r3, r3, #28
 8002d90:	210f      	movs	r1, #15
 8002d92:	fa01 f303 	lsl.w	r3, r1, r3
 8002d96:	43db      	mvns	r3, r3
 8002d98:	4917      	ldr	r1, [pc, #92]	; (8002df8 <HAL_DMA_Init+0x16c>)
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002d9e:	4b16      	ldr	r3, [pc, #88]	; (8002df8 <HAL_DMA_Init+0x16c>)
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6859      	ldr	r1, [r3, #4]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002daa:	f003 031c 	and.w	r3, r3, #28
 8002dae:	fa01 f303 	lsl.w	r3, r1, r3
 8002db2:	4911      	ldr	r1, [pc, #68]	; (8002df8 <HAL_DMA_Init+0x16c>)
 8002db4:	4313      	orrs	r3, r2
 8002db6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002dce:	2300      	movs	r3, #0
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3714      	adds	r7, #20
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr
 8002ddc:	40020407 	.word	0x40020407
 8002de0:	bffdfff8 	.word	0xbffdfff8
 8002de4:	cccccccd 	.word	0xcccccccd
 8002de8:	40020000 	.word	0x40020000
 8002dec:	bffdfbf8 	.word	0xbffdfbf8
 8002df0:	40020400 	.word	0x40020400
 8002df4:	400200a8 	.word	0x400200a8
 8002df8:	400204a8 	.word	0x400204a8

08002dfc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b086      	sub	sp, #24
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	60b9      	str	r1, [r7, #8]
 8002e06:	607a      	str	r2, [r7, #4]
 8002e08:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d101      	bne.n	8002e1c <HAL_DMA_Start_IT+0x20>
 8002e18:	2302      	movs	r3, #2
 8002e1a:	e04b      	b.n	8002eb4 <HAL_DMA_Start_IT+0xb8>
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d13a      	bne.n	8002ea6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2202      	movs	r2, #2
 8002e34:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f022 0201 	bic.w	r2, r2, #1
 8002e4c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	68b9      	ldr	r1, [r7, #8]
 8002e54:	68f8      	ldr	r0, [r7, #12]
 8002e56:	f000 f8e0 	bl	800301a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d008      	beq.n	8002e74 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f042 020e 	orr.w	r2, r2, #14
 8002e70:	601a      	str	r2, [r3, #0]
 8002e72:	e00f      	b.n	8002e94 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f022 0204 	bic.w	r2, r2, #4
 8002e82:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f042 020a 	orr.w	r2, r2, #10
 8002e92:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f042 0201 	orr.w	r2, r2, #1
 8002ea2:	601a      	str	r2, [r3, #0]
 8002ea4:	e005      	b.n	8002eb2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002eae:	2302      	movs	r3, #2
 8002eb0:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002eb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3718      	adds	r7, #24
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed8:	f003 031c 	and.w	r3, r3, #28
 8002edc:	2204      	movs	r2, #4
 8002ede:	409a      	lsls	r2, r3
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d026      	beq.n	8002f36 <HAL_DMA_IRQHandler+0x7a>
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	f003 0304 	and.w	r3, r3, #4
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d021      	beq.n	8002f36 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0320 	and.w	r3, r3, #32
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d107      	bne.n	8002f10 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f022 0204 	bic.w	r2, r2, #4
 8002f0e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f14:	f003 021c 	and.w	r2, r3, #28
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1c:	2104      	movs	r1, #4
 8002f1e:	fa01 f202 	lsl.w	r2, r1, r2
 8002f22:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d071      	beq.n	8003010 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002f34:	e06c      	b.n	8003010 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f3a:	f003 031c 	and.w	r3, r3, #28
 8002f3e:	2202      	movs	r2, #2
 8002f40:	409a      	lsls	r2, r3
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	4013      	ands	r3, r2
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d02e      	beq.n	8002fa8 <HAL_DMA_IRQHandler+0xec>
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	f003 0302 	and.w	r3, r3, #2
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d029      	beq.n	8002fa8 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0320 	and.w	r3, r3, #32
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d10b      	bne.n	8002f7a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f022 020a 	bic.w	r2, r2, #10
 8002f70:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2201      	movs	r2, #1
 8002f76:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f7e:	f003 021c 	and.w	r2, r3, #28
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f86:	2102      	movs	r1, #2
 8002f88:	fa01 f202 	lsl.w	r2, r1, r2
 8002f8c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d038      	beq.n	8003010 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002fa6:	e033      	b.n	8003010 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fac:	f003 031c 	and.w	r3, r3, #28
 8002fb0:	2208      	movs	r2, #8
 8002fb2:	409a      	lsls	r2, r3
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d02a      	beq.n	8003012 <HAL_DMA_IRQHandler+0x156>
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	f003 0308 	and.w	r3, r3, #8
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d025      	beq.n	8003012 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f022 020e 	bic.w	r2, r2, #14
 8002fd4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fda:	f003 021c 	and.w	r2, r3, #28
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe2:	2101      	movs	r1, #1
 8002fe4:	fa01 f202 	lsl.w	r2, r1, r2
 8002fe8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2201      	movs	r2, #1
 8002fee:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003004:	2b00      	cmp	r3, #0
 8003006:	d004      	beq.n	8003012 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003010:	bf00      	nop
 8003012:	bf00      	nop
}
 8003014:	3710      	adds	r7, #16
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}

0800301a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800301a:	b480      	push	{r7}
 800301c:	b085      	sub	sp, #20
 800301e:	af00      	add	r7, sp, #0
 8003020:	60f8      	str	r0, [r7, #12]
 8003022:	60b9      	str	r1, [r7, #8]
 8003024:	607a      	str	r2, [r7, #4]
 8003026:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800302c:	f003 021c 	and.w	r2, r3, #28
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003034:	2101      	movs	r1, #1
 8003036:	fa01 f202 	lsl.w	r2, r1, r2
 800303a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	683a      	ldr	r2, [r7, #0]
 8003042:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	2b10      	cmp	r3, #16
 800304a:	d108      	bne.n	800305e <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	68ba      	ldr	r2, [r7, #8]
 800305a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800305c:	e007      	b.n	800306e <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	68ba      	ldr	r2, [r7, #8]
 8003064:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	60da      	str	r2, [r3, #12]
}
 800306e:	bf00      	nop
 8003070:	3714      	adds	r7, #20
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr
	...

0800307c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800307c:	b480      	push	{r7}
 800307e:	b087      	sub	sp, #28
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003086:	2300      	movs	r3, #0
 8003088:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800308a:	e17f      	b.n	800338c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	2101      	movs	r1, #1
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	fa01 f303 	lsl.w	r3, r1, r3
 8003098:	4013      	ands	r3, r2
 800309a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	f000 8171 	beq.w	8003386 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f003 0303 	and.w	r3, r3, #3
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d005      	beq.n	80030bc <HAL_GPIO_Init+0x40>
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f003 0303 	and.w	r3, r3, #3
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d130      	bne.n	800311e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	005b      	lsls	r3, r3, #1
 80030c6:	2203      	movs	r2, #3
 80030c8:	fa02 f303 	lsl.w	r3, r2, r3
 80030cc:	43db      	mvns	r3, r3
 80030ce:	693a      	ldr	r2, [r7, #16]
 80030d0:	4013      	ands	r3, r2
 80030d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	68da      	ldr	r2, [r3, #12]
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	005b      	lsls	r3, r3, #1
 80030dc:	fa02 f303 	lsl.w	r3, r2, r3
 80030e0:	693a      	ldr	r2, [r7, #16]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	693a      	ldr	r2, [r7, #16]
 80030ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80030f2:	2201      	movs	r2, #1
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	fa02 f303 	lsl.w	r3, r2, r3
 80030fa:	43db      	mvns	r3, r3
 80030fc:	693a      	ldr	r2, [r7, #16]
 80030fe:	4013      	ands	r3, r2
 8003100:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	091b      	lsrs	r3, r3, #4
 8003108:	f003 0201 	and.w	r2, r3, #1
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	fa02 f303 	lsl.w	r3, r2, r3
 8003112:	693a      	ldr	r2, [r7, #16]
 8003114:	4313      	orrs	r3, r2
 8003116:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	693a      	ldr	r2, [r7, #16]
 800311c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f003 0303 	and.w	r3, r3, #3
 8003126:	2b03      	cmp	r3, #3
 8003128:	d118      	bne.n	800315c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800312e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003130:	2201      	movs	r2, #1
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	fa02 f303 	lsl.w	r3, r2, r3
 8003138:	43db      	mvns	r3, r3
 800313a:	693a      	ldr	r2, [r7, #16]
 800313c:	4013      	ands	r3, r2
 800313e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	08db      	lsrs	r3, r3, #3
 8003146:	f003 0201 	and.w	r2, r3, #1
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	fa02 f303 	lsl.w	r3, r2, r3
 8003150:	693a      	ldr	r2, [r7, #16]
 8003152:	4313      	orrs	r3, r2
 8003154:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	693a      	ldr	r2, [r7, #16]
 800315a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f003 0303 	and.w	r3, r3, #3
 8003164:	2b03      	cmp	r3, #3
 8003166:	d017      	beq.n	8003198 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	005b      	lsls	r3, r3, #1
 8003172:	2203      	movs	r2, #3
 8003174:	fa02 f303 	lsl.w	r3, r2, r3
 8003178:	43db      	mvns	r3, r3
 800317a:	693a      	ldr	r2, [r7, #16]
 800317c:	4013      	ands	r3, r2
 800317e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	689a      	ldr	r2, [r3, #8]
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	005b      	lsls	r3, r3, #1
 8003188:	fa02 f303 	lsl.w	r3, r2, r3
 800318c:	693a      	ldr	r2, [r7, #16]
 800318e:	4313      	orrs	r3, r2
 8003190:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	693a      	ldr	r2, [r7, #16]
 8003196:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f003 0303 	and.w	r3, r3, #3
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d123      	bne.n	80031ec <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	08da      	lsrs	r2, r3, #3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	3208      	adds	r2, #8
 80031ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	f003 0307 	and.w	r3, r3, #7
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	220f      	movs	r2, #15
 80031bc:	fa02 f303 	lsl.w	r3, r2, r3
 80031c0:	43db      	mvns	r3, r3
 80031c2:	693a      	ldr	r2, [r7, #16]
 80031c4:	4013      	ands	r3, r2
 80031c6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	691a      	ldr	r2, [r3, #16]
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	f003 0307 	and.w	r3, r3, #7
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	fa02 f303 	lsl.w	r3, r2, r3
 80031d8:	693a      	ldr	r2, [r7, #16]
 80031da:	4313      	orrs	r3, r2
 80031dc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	08da      	lsrs	r2, r3, #3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	3208      	adds	r2, #8
 80031e6:	6939      	ldr	r1, [r7, #16]
 80031e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	005b      	lsls	r3, r3, #1
 80031f6:	2203      	movs	r2, #3
 80031f8:	fa02 f303 	lsl.w	r3, r2, r3
 80031fc:	43db      	mvns	r3, r3
 80031fe:	693a      	ldr	r2, [r7, #16]
 8003200:	4013      	ands	r3, r2
 8003202:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f003 0203 	and.w	r2, r3, #3
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	005b      	lsls	r3, r3, #1
 8003210:	fa02 f303 	lsl.w	r3, r2, r3
 8003214:	693a      	ldr	r2, [r7, #16]
 8003216:	4313      	orrs	r3, r2
 8003218:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	693a      	ldr	r2, [r7, #16]
 800321e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003228:	2b00      	cmp	r3, #0
 800322a:	f000 80ac 	beq.w	8003386 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800322e:	4b5f      	ldr	r3, [pc, #380]	; (80033ac <HAL_GPIO_Init+0x330>)
 8003230:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003232:	4a5e      	ldr	r2, [pc, #376]	; (80033ac <HAL_GPIO_Init+0x330>)
 8003234:	f043 0301 	orr.w	r3, r3, #1
 8003238:	6613      	str	r3, [r2, #96]	; 0x60
 800323a:	4b5c      	ldr	r3, [pc, #368]	; (80033ac <HAL_GPIO_Init+0x330>)
 800323c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800323e:	f003 0301 	and.w	r3, r3, #1
 8003242:	60bb      	str	r3, [r7, #8]
 8003244:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003246:	4a5a      	ldr	r2, [pc, #360]	; (80033b0 <HAL_GPIO_Init+0x334>)
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	089b      	lsrs	r3, r3, #2
 800324c:	3302      	adds	r3, #2
 800324e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003252:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	f003 0303 	and.w	r3, r3, #3
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	220f      	movs	r2, #15
 800325e:	fa02 f303 	lsl.w	r3, r2, r3
 8003262:	43db      	mvns	r3, r3
 8003264:	693a      	ldr	r2, [r7, #16]
 8003266:	4013      	ands	r3, r2
 8003268:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003270:	d025      	beq.n	80032be <HAL_GPIO_Init+0x242>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a4f      	ldr	r2, [pc, #316]	; (80033b4 <HAL_GPIO_Init+0x338>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d01f      	beq.n	80032ba <HAL_GPIO_Init+0x23e>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a4e      	ldr	r2, [pc, #312]	; (80033b8 <HAL_GPIO_Init+0x33c>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d019      	beq.n	80032b6 <HAL_GPIO_Init+0x23a>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4a4d      	ldr	r2, [pc, #308]	; (80033bc <HAL_GPIO_Init+0x340>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d013      	beq.n	80032b2 <HAL_GPIO_Init+0x236>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a4c      	ldr	r2, [pc, #304]	; (80033c0 <HAL_GPIO_Init+0x344>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d00d      	beq.n	80032ae <HAL_GPIO_Init+0x232>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a4b      	ldr	r2, [pc, #300]	; (80033c4 <HAL_GPIO_Init+0x348>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d007      	beq.n	80032aa <HAL_GPIO_Init+0x22e>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a4a      	ldr	r2, [pc, #296]	; (80033c8 <HAL_GPIO_Init+0x34c>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d101      	bne.n	80032a6 <HAL_GPIO_Init+0x22a>
 80032a2:	2306      	movs	r3, #6
 80032a4:	e00c      	b.n	80032c0 <HAL_GPIO_Init+0x244>
 80032a6:	2307      	movs	r3, #7
 80032a8:	e00a      	b.n	80032c0 <HAL_GPIO_Init+0x244>
 80032aa:	2305      	movs	r3, #5
 80032ac:	e008      	b.n	80032c0 <HAL_GPIO_Init+0x244>
 80032ae:	2304      	movs	r3, #4
 80032b0:	e006      	b.n	80032c0 <HAL_GPIO_Init+0x244>
 80032b2:	2303      	movs	r3, #3
 80032b4:	e004      	b.n	80032c0 <HAL_GPIO_Init+0x244>
 80032b6:	2302      	movs	r3, #2
 80032b8:	e002      	b.n	80032c0 <HAL_GPIO_Init+0x244>
 80032ba:	2301      	movs	r3, #1
 80032bc:	e000      	b.n	80032c0 <HAL_GPIO_Init+0x244>
 80032be:	2300      	movs	r3, #0
 80032c0:	697a      	ldr	r2, [r7, #20]
 80032c2:	f002 0203 	and.w	r2, r2, #3
 80032c6:	0092      	lsls	r2, r2, #2
 80032c8:	4093      	lsls	r3, r2
 80032ca:	693a      	ldr	r2, [r7, #16]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80032d0:	4937      	ldr	r1, [pc, #220]	; (80033b0 <HAL_GPIO_Init+0x334>)
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	089b      	lsrs	r3, r3, #2
 80032d6:	3302      	adds	r3, #2
 80032d8:	693a      	ldr	r2, [r7, #16]
 80032da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80032de:	4b3b      	ldr	r3, [pc, #236]	; (80033cc <HAL_GPIO_Init+0x350>)
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	43db      	mvns	r3, r3
 80032e8:	693a      	ldr	r2, [r7, #16]
 80032ea:	4013      	ands	r3, r2
 80032ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d003      	beq.n	8003302 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80032fa:	693a      	ldr	r2, [r7, #16]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	4313      	orrs	r3, r2
 8003300:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003302:	4a32      	ldr	r2, [pc, #200]	; (80033cc <HAL_GPIO_Init+0x350>)
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003308:	4b30      	ldr	r3, [pc, #192]	; (80033cc <HAL_GPIO_Init+0x350>)
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	43db      	mvns	r3, r3
 8003312:	693a      	ldr	r2, [r7, #16]
 8003314:	4013      	ands	r3, r2
 8003316:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d003      	beq.n	800332c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003324:	693a      	ldr	r2, [r7, #16]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	4313      	orrs	r3, r2
 800332a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800332c:	4a27      	ldr	r2, [pc, #156]	; (80033cc <HAL_GPIO_Init+0x350>)
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003332:	4b26      	ldr	r3, [pc, #152]	; (80033cc <HAL_GPIO_Init+0x350>)
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	43db      	mvns	r3, r3
 800333c:	693a      	ldr	r2, [r7, #16]
 800333e:	4013      	ands	r3, r2
 8003340:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d003      	beq.n	8003356 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800334e:	693a      	ldr	r2, [r7, #16]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	4313      	orrs	r3, r2
 8003354:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003356:	4a1d      	ldr	r2, [pc, #116]	; (80033cc <HAL_GPIO_Init+0x350>)
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800335c:	4b1b      	ldr	r3, [pc, #108]	; (80033cc <HAL_GPIO_Init+0x350>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	43db      	mvns	r3, r3
 8003366:	693a      	ldr	r2, [r7, #16]
 8003368:	4013      	ands	r3, r2
 800336a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003374:	2b00      	cmp	r3, #0
 8003376:	d003      	beq.n	8003380 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003378:	693a      	ldr	r2, [r7, #16]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	4313      	orrs	r3, r2
 800337e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003380:	4a12      	ldr	r2, [pc, #72]	; (80033cc <HAL_GPIO_Init+0x350>)
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	3301      	adds	r3, #1
 800338a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	fa22 f303 	lsr.w	r3, r2, r3
 8003396:	2b00      	cmp	r3, #0
 8003398:	f47f ae78 	bne.w	800308c <HAL_GPIO_Init+0x10>
  }
}
 800339c:	bf00      	nop
 800339e:	bf00      	nop
 80033a0:	371c      	adds	r7, #28
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop
 80033ac:	40021000 	.word	0x40021000
 80033b0:	40010000 	.word	0x40010000
 80033b4:	48000400 	.word	0x48000400
 80033b8:	48000800 	.word	0x48000800
 80033bc:	48000c00 	.word	0x48000c00
 80033c0:	48001000 	.word	0x48001000
 80033c4:	48001400 	.word	0x48001400
 80033c8:	48001800 	.word	0x48001800
 80033cc:	40010400 	.word	0x40010400

080033d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	460b      	mov	r3, r1
 80033da:	807b      	strh	r3, [r7, #2]
 80033dc:	4613      	mov	r3, r2
 80033de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033e0:	787b      	ldrb	r3, [r7, #1]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d003      	beq.n	80033ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80033e6:	887a      	ldrh	r2, [r7, #2]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80033ec:	e002      	b.n	80033f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80033ee:	887a      	ldrh	r2, [r7, #2]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80033f4:	bf00      	nop
 80033f6:	370c      	adds	r7, #12
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr

08003400 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	460b      	mov	r3, r1
 800340a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d10c      	bne.n	800342c <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8003412:	4b13      	ldr	r3, [pc, #76]	; (8003460 <HAL_PWR_EnterSLEEPMode+0x60>)
 8003414:	695b      	ldr	r3, [r3, #20]
 8003416:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800341a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800341e:	d10e      	bne.n	800343e <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8003420:	f000 f896 	bl	8003550 <HAL_PWREx_DisableLowPowerRunMode>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d009      	beq.n	800343e <HAL_PWR_EnterSLEEPMode+0x3e>
      {
        return ;
 800342a:	e016      	b.n	800345a <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF) == RESET)
 800342c:	4b0c      	ldr	r3, [pc, #48]	; (8003460 <HAL_PWR_EnterSLEEPMode+0x60>)
 800342e:	695b      	ldr	r3, [r3, #20]
 8003430:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003434:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003438:	d001      	beq.n	800343e <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 800343a:	f000 f879 	bl	8003530 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800343e:	4b09      	ldr	r3, [pc, #36]	; (8003464 <HAL_PWR_EnterSLEEPMode+0x64>)
 8003440:	691b      	ldr	r3, [r3, #16]
 8003442:	4a08      	ldr	r2, [pc, #32]	; (8003464 <HAL_PWR_EnterSLEEPMode+0x64>)
 8003444:	f023 0304 	bic.w	r3, r3, #4
 8003448:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 800344a:	78fb      	ldrb	r3, [r7, #3]
 800344c:	2b01      	cmp	r3, #1
 800344e:	d101      	bne.n	8003454 <HAL_PWR_EnterSLEEPMode+0x54>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8003450:	bf30      	wfi
 8003452:	e002      	b.n	800345a <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8003454:	bf40      	sev
    __WFE();
 8003456:	bf20      	wfe
    __WFE();
 8003458:	bf20      	wfe
  }

}
 800345a:	3708      	adds	r7, #8
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}
 8003460:	40007000 	.word	0x40007000
 8003464:	e000ed00 	.word	0xe000ed00

08003468 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003468:	b480      	push	{r7}
 800346a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800346c:	4b04      	ldr	r3, [pc, #16]	; (8003480 <HAL_PWREx_GetVoltageRange+0x18>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003474:	4618      	mov	r0, r3
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop
 8003480:	40007000 	.word	0x40007000

08003484 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003484:	b480      	push	{r7}
 8003486:	b085      	sub	sp, #20
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003492:	d130      	bne.n	80034f6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003494:	4b23      	ldr	r3, [pc, #140]	; (8003524 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800349c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034a0:	d038      	beq.n	8003514 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80034a2:	4b20      	ldr	r3, [pc, #128]	; (8003524 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80034aa:	4a1e      	ldr	r2, [pc, #120]	; (8003524 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80034b0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80034b2:	4b1d      	ldr	r3, [pc, #116]	; (8003528 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	2232      	movs	r2, #50	; 0x32
 80034b8:	fb02 f303 	mul.w	r3, r2, r3
 80034bc:	4a1b      	ldr	r2, [pc, #108]	; (800352c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80034be:	fba2 2303 	umull	r2, r3, r2, r3
 80034c2:	0c9b      	lsrs	r3, r3, #18
 80034c4:	3301      	adds	r3, #1
 80034c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034c8:	e002      	b.n	80034d0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	3b01      	subs	r3, #1
 80034ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034d0:	4b14      	ldr	r3, [pc, #80]	; (8003524 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034d2:	695b      	ldr	r3, [r3, #20]
 80034d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034dc:	d102      	bne.n	80034e4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d1f2      	bne.n	80034ca <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80034e4:	4b0f      	ldr	r3, [pc, #60]	; (8003524 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034e6:	695b      	ldr	r3, [r3, #20]
 80034e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034f0:	d110      	bne.n	8003514 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	e00f      	b.n	8003516 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80034f6:	4b0b      	ldr	r3, [pc, #44]	; (8003524 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80034fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003502:	d007      	beq.n	8003514 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003504:	4b07      	ldr	r3, [pc, #28]	; (8003524 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800350c:	4a05      	ldr	r2, [pc, #20]	; (8003524 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800350e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003512:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003514:	2300      	movs	r3, #0
}
 8003516:	4618      	mov	r0, r3
 8003518:	3714      	adds	r7, #20
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	40007000 	.word	0x40007000
 8003528:	20000024 	.word	0x20000024
 800352c:	431bde83 	.word	0x431bde83

08003530 <HAL_PWREx_EnableLowPowerRunMode>:
  *        Setting RUN_PD in FLASH_ACR then appropriately reducing the clock frequency must
  *        be done before calling HAL_PWREx_EnableLowPowerRunMode() API.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8003530:	b480      	push	{r7}
 8003532:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8003534:	4b05      	ldr	r3, [pc, #20]	; (800354c <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a04      	ldr	r2, [pc, #16]	; (800354c <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 800353a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800353e:	6013      	str	r3, [r2, #0]
}
 8003540:	bf00      	nop
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr
 800354a:	bf00      	nop
 800354c:	40007000 	.word	0x40007000

08003550 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8003556:	4b17      	ldr	r3, [pc, #92]	; (80035b4 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a16      	ldr	r2, [pc, #88]	; (80035b4 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800355c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003560:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003562:	4b15      	ldr	r3, [pc, #84]	; (80035b8 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	2232      	movs	r2, #50	; 0x32
 8003568:	fb02 f303 	mul.w	r3, r2, r3
 800356c:	4a13      	ldr	r2, [pc, #76]	; (80035bc <HAL_PWREx_DisableLowPowerRunMode+0x6c>)
 800356e:	fba2 2303 	umull	r2, r3, r2, r3
 8003572:	0c9b      	lsrs	r3, r3, #18
 8003574:	3301      	adds	r3, #1
 8003576:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8003578:	e002      	b.n	8003580 <HAL_PWREx_DisableLowPowerRunMode+0x30>
  {
    wait_loop_index--;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	3b01      	subs	r3, #1
 800357e:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8003580:	4b0c      	ldr	r3, [pc, #48]	; (80035b4 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8003582:	695b      	ldr	r3, [r3, #20]
 8003584:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003588:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800358c:	d102      	bne.n	8003594 <HAL_PWREx_DisableLowPowerRunMode+0x44>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d1f2      	bne.n	800357a <HAL_PWREx_DisableLowPowerRunMode+0x2a>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8003594:	4b07      	ldr	r3, [pc, #28]	; (80035b4 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8003596:	695b      	ldr	r3, [r3, #20]
 8003598:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800359c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035a0:	d101      	bne.n	80035a6 <HAL_PWREx_DisableLowPowerRunMode+0x56>
  {
    return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e000      	b.n	80035a8 <HAL_PWREx_DisableLowPowerRunMode+0x58>
  }

  return HAL_OK;
 80035a6:	2300      	movs	r3, #0
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	370c      	adds	r7, #12
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr
 80035b4:	40007000 	.word	0x40007000
 80035b8:	20000024 	.word	0x20000024
 80035bc:	431bde83 	.word	0x431bde83

080035c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b088      	sub	sp, #32
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d101      	bne.n	80035d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e3d4      	b.n	8003d7c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035d2:	4ba1      	ldr	r3, [pc, #644]	; (8003858 <HAL_RCC_OscConfig+0x298>)
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	f003 030c 	and.w	r3, r3, #12
 80035da:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035dc:	4b9e      	ldr	r3, [pc, #632]	; (8003858 <HAL_RCC_OscConfig+0x298>)
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	f003 0303 	and.w	r3, r3, #3
 80035e4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0310 	and.w	r3, r3, #16
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	f000 80e4 	beq.w	80037bc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d007      	beq.n	800360a <HAL_RCC_OscConfig+0x4a>
 80035fa:	69bb      	ldr	r3, [r7, #24]
 80035fc:	2b0c      	cmp	r3, #12
 80035fe:	f040 808b 	bne.w	8003718 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	2b01      	cmp	r3, #1
 8003606:	f040 8087 	bne.w	8003718 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800360a:	4b93      	ldr	r3, [pc, #588]	; (8003858 <HAL_RCC_OscConfig+0x298>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0302 	and.w	r3, r3, #2
 8003612:	2b00      	cmp	r3, #0
 8003614:	d005      	beq.n	8003622 <HAL_RCC_OscConfig+0x62>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	699b      	ldr	r3, [r3, #24]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d101      	bne.n	8003622 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e3ac      	b.n	8003d7c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a1a      	ldr	r2, [r3, #32]
 8003626:	4b8c      	ldr	r3, [pc, #560]	; (8003858 <HAL_RCC_OscConfig+0x298>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0308 	and.w	r3, r3, #8
 800362e:	2b00      	cmp	r3, #0
 8003630:	d004      	beq.n	800363c <HAL_RCC_OscConfig+0x7c>
 8003632:	4b89      	ldr	r3, [pc, #548]	; (8003858 <HAL_RCC_OscConfig+0x298>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800363a:	e005      	b.n	8003648 <HAL_RCC_OscConfig+0x88>
 800363c:	4b86      	ldr	r3, [pc, #536]	; (8003858 <HAL_RCC_OscConfig+0x298>)
 800363e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003642:	091b      	lsrs	r3, r3, #4
 8003644:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003648:	4293      	cmp	r3, r2
 800364a:	d223      	bcs.n	8003694 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6a1b      	ldr	r3, [r3, #32]
 8003650:	4618      	mov	r0, r3
 8003652:	f000 fd09 	bl	8004068 <RCC_SetFlashLatencyFromMSIRange>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d001      	beq.n	8003660 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e38d      	b.n	8003d7c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003660:	4b7d      	ldr	r3, [pc, #500]	; (8003858 <HAL_RCC_OscConfig+0x298>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a7c      	ldr	r2, [pc, #496]	; (8003858 <HAL_RCC_OscConfig+0x298>)
 8003666:	f043 0308 	orr.w	r3, r3, #8
 800366a:	6013      	str	r3, [r2, #0]
 800366c:	4b7a      	ldr	r3, [pc, #488]	; (8003858 <HAL_RCC_OscConfig+0x298>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6a1b      	ldr	r3, [r3, #32]
 8003678:	4977      	ldr	r1, [pc, #476]	; (8003858 <HAL_RCC_OscConfig+0x298>)
 800367a:	4313      	orrs	r3, r2
 800367c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800367e:	4b76      	ldr	r3, [pc, #472]	; (8003858 <HAL_RCC_OscConfig+0x298>)
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	69db      	ldr	r3, [r3, #28]
 800368a:	021b      	lsls	r3, r3, #8
 800368c:	4972      	ldr	r1, [pc, #456]	; (8003858 <HAL_RCC_OscConfig+0x298>)
 800368e:	4313      	orrs	r3, r2
 8003690:	604b      	str	r3, [r1, #4]
 8003692:	e025      	b.n	80036e0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003694:	4b70      	ldr	r3, [pc, #448]	; (8003858 <HAL_RCC_OscConfig+0x298>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a6f      	ldr	r2, [pc, #444]	; (8003858 <HAL_RCC_OscConfig+0x298>)
 800369a:	f043 0308 	orr.w	r3, r3, #8
 800369e:	6013      	str	r3, [r2, #0]
 80036a0:	4b6d      	ldr	r3, [pc, #436]	; (8003858 <HAL_RCC_OscConfig+0x298>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6a1b      	ldr	r3, [r3, #32]
 80036ac:	496a      	ldr	r1, [pc, #424]	; (8003858 <HAL_RCC_OscConfig+0x298>)
 80036ae:	4313      	orrs	r3, r2
 80036b0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80036b2:	4b69      	ldr	r3, [pc, #420]	; (8003858 <HAL_RCC_OscConfig+0x298>)
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	69db      	ldr	r3, [r3, #28]
 80036be:	021b      	lsls	r3, r3, #8
 80036c0:	4965      	ldr	r1, [pc, #404]	; (8003858 <HAL_RCC_OscConfig+0x298>)
 80036c2:	4313      	orrs	r3, r2
 80036c4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80036c6:	69bb      	ldr	r3, [r7, #24]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d109      	bne.n	80036e0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6a1b      	ldr	r3, [r3, #32]
 80036d0:	4618      	mov	r0, r3
 80036d2:	f000 fcc9 	bl	8004068 <RCC_SetFlashLatencyFromMSIRange>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d001      	beq.n	80036e0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e34d      	b.n	8003d7c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80036e0:	f000 fc36 	bl	8003f50 <HAL_RCC_GetSysClockFreq>
 80036e4:	4602      	mov	r2, r0
 80036e6:	4b5c      	ldr	r3, [pc, #368]	; (8003858 <HAL_RCC_OscConfig+0x298>)
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	091b      	lsrs	r3, r3, #4
 80036ec:	f003 030f 	and.w	r3, r3, #15
 80036f0:	495a      	ldr	r1, [pc, #360]	; (800385c <HAL_RCC_OscConfig+0x29c>)
 80036f2:	5ccb      	ldrb	r3, [r1, r3]
 80036f4:	f003 031f 	and.w	r3, r3, #31
 80036f8:	fa22 f303 	lsr.w	r3, r2, r3
 80036fc:	4a58      	ldr	r2, [pc, #352]	; (8003860 <HAL_RCC_OscConfig+0x2a0>)
 80036fe:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003700:	4b58      	ldr	r3, [pc, #352]	; (8003864 <HAL_RCC_OscConfig+0x2a4>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4618      	mov	r0, r3
 8003706:	f7fd fcd1 	bl	80010ac <HAL_InitTick>
 800370a:	4603      	mov	r3, r0
 800370c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800370e:	7bfb      	ldrb	r3, [r7, #15]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d052      	beq.n	80037ba <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003714:	7bfb      	ldrb	r3, [r7, #15]
 8003716:	e331      	b.n	8003d7c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	699b      	ldr	r3, [r3, #24]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d032      	beq.n	8003786 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003720:	4b4d      	ldr	r3, [pc, #308]	; (8003858 <HAL_RCC_OscConfig+0x298>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a4c      	ldr	r2, [pc, #304]	; (8003858 <HAL_RCC_OscConfig+0x298>)
 8003726:	f043 0301 	orr.w	r3, r3, #1
 800372a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800372c:	f7fd fd0e 	bl	800114c <HAL_GetTick>
 8003730:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003732:	e008      	b.n	8003746 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003734:	f7fd fd0a 	bl	800114c <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	2b02      	cmp	r3, #2
 8003740:	d901      	bls.n	8003746 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e31a      	b.n	8003d7c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003746:	4b44      	ldr	r3, [pc, #272]	; (8003858 <HAL_RCC_OscConfig+0x298>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0302 	and.w	r3, r3, #2
 800374e:	2b00      	cmp	r3, #0
 8003750:	d0f0      	beq.n	8003734 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003752:	4b41      	ldr	r3, [pc, #260]	; (8003858 <HAL_RCC_OscConfig+0x298>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a40      	ldr	r2, [pc, #256]	; (8003858 <HAL_RCC_OscConfig+0x298>)
 8003758:	f043 0308 	orr.w	r3, r3, #8
 800375c:	6013      	str	r3, [r2, #0]
 800375e:	4b3e      	ldr	r3, [pc, #248]	; (8003858 <HAL_RCC_OscConfig+0x298>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a1b      	ldr	r3, [r3, #32]
 800376a:	493b      	ldr	r1, [pc, #236]	; (8003858 <HAL_RCC_OscConfig+0x298>)
 800376c:	4313      	orrs	r3, r2
 800376e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003770:	4b39      	ldr	r3, [pc, #228]	; (8003858 <HAL_RCC_OscConfig+0x298>)
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	69db      	ldr	r3, [r3, #28]
 800377c:	021b      	lsls	r3, r3, #8
 800377e:	4936      	ldr	r1, [pc, #216]	; (8003858 <HAL_RCC_OscConfig+0x298>)
 8003780:	4313      	orrs	r3, r2
 8003782:	604b      	str	r3, [r1, #4]
 8003784:	e01a      	b.n	80037bc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003786:	4b34      	ldr	r3, [pc, #208]	; (8003858 <HAL_RCC_OscConfig+0x298>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a33      	ldr	r2, [pc, #204]	; (8003858 <HAL_RCC_OscConfig+0x298>)
 800378c:	f023 0301 	bic.w	r3, r3, #1
 8003790:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003792:	f7fd fcdb 	bl	800114c <HAL_GetTick>
 8003796:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003798:	e008      	b.n	80037ac <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800379a:	f7fd fcd7 	bl	800114c <HAL_GetTick>
 800379e:	4602      	mov	r2, r0
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	2b02      	cmp	r3, #2
 80037a6:	d901      	bls.n	80037ac <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80037a8:	2303      	movs	r3, #3
 80037aa:	e2e7      	b.n	8003d7c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80037ac:	4b2a      	ldr	r3, [pc, #168]	; (8003858 <HAL_RCC_OscConfig+0x298>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0302 	and.w	r3, r3, #2
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d1f0      	bne.n	800379a <HAL_RCC_OscConfig+0x1da>
 80037b8:	e000      	b.n	80037bc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80037ba:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 0301 	and.w	r3, r3, #1
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d074      	beq.n	80038b2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80037c8:	69bb      	ldr	r3, [r7, #24]
 80037ca:	2b08      	cmp	r3, #8
 80037cc:	d005      	beq.n	80037da <HAL_RCC_OscConfig+0x21a>
 80037ce:	69bb      	ldr	r3, [r7, #24]
 80037d0:	2b0c      	cmp	r3, #12
 80037d2:	d10e      	bne.n	80037f2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	2b03      	cmp	r3, #3
 80037d8:	d10b      	bne.n	80037f2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037da:	4b1f      	ldr	r3, [pc, #124]	; (8003858 <HAL_RCC_OscConfig+0x298>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d064      	beq.n	80038b0 <HAL_RCC_OscConfig+0x2f0>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d160      	bne.n	80038b0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e2c4      	b.n	8003d7c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037fa:	d106      	bne.n	800380a <HAL_RCC_OscConfig+0x24a>
 80037fc:	4b16      	ldr	r3, [pc, #88]	; (8003858 <HAL_RCC_OscConfig+0x298>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a15      	ldr	r2, [pc, #84]	; (8003858 <HAL_RCC_OscConfig+0x298>)
 8003802:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003806:	6013      	str	r3, [r2, #0]
 8003808:	e01d      	b.n	8003846 <HAL_RCC_OscConfig+0x286>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003812:	d10c      	bne.n	800382e <HAL_RCC_OscConfig+0x26e>
 8003814:	4b10      	ldr	r3, [pc, #64]	; (8003858 <HAL_RCC_OscConfig+0x298>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a0f      	ldr	r2, [pc, #60]	; (8003858 <HAL_RCC_OscConfig+0x298>)
 800381a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800381e:	6013      	str	r3, [r2, #0]
 8003820:	4b0d      	ldr	r3, [pc, #52]	; (8003858 <HAL_RCC_OscConfig+0x298>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a0c      	ldr	r2, [pc, #48]	; (8003858 <HAL_RCC_OscConfig+0x298>)
 8003826:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800382a:	6013      	str	r3, [r2, #0]
 800382c:	e00b      	b.n	8003846 <HAL_RCC_OscConfig+0x286>
 800382e:	4b0a      	ldr	r3, [pc, #40]	; (8003858 <HAL_RCC_OscConfig+0x298>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a09      	ldr	r2, [pc, #36]	; (8003858 <HAL_RCC_OscConfig+0x298>)
 8003834:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003838:	6013      	str	r3, [r2, #0]
 800383a:	4b07      	ldr	r3, [pc, #28]	; (8003858 <HAL_RCC_OscConfig+0x298>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a06      	ldr	r2, [pc, #24]	; (8003858 <HAL_RCC_OscConfig+0x298>)
 8003840:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003844:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d01c      	beq.n	8003888 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800384e:	f7fd fc7d 	bl	800114c <HAL_GetTick>
 8003852:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003854:	e011      	b.n	800387a <HAL_RCC_OscConfig+0x2ba>
 8003856:	bf00      	nop
 8003858:	40021000 	.word	0x40021000
 800385c:	08004ed4 	.word	0x08004ed4
 8003860:	20000024 	.word	0x20000024
 8003864:	20000028 	.word	0x20000028
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003868:	f7fd fc70 	bl	800114c <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	2b64      	cmp	r3, #100	; 0x64
 8003874:	d901      	bls.n	800387a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e280      	b.n	8003d7c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800387a:	4baf      	ldr	r3, [pc, #700]	; (8003b38 <HAL_RCC_OscConfig+0x578>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d0f0      	beq.n	8003868 <HAL_RCC_OscConfig+0x2a8>
 8003886:	e014      	b.n	80038b2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003888:	f7fd fc60 	bl	800114c <HAL_GetTick>
 800388c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800388e:	e008      	b.n	80038a2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003890:	f7fd fc5c 	bl	800114c <HAL_GetTick>
 8003894:	4602      	mov	r2, r0
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	2b64      	cmp	r3, #100	; 0x64
 800389c:	d901      	bls.n	80038a2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	e26c      	b.n	8003d7c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80038a2:	4ba5      	ldr	r3, [pc, #660]	; (8003b38 <HAL_RCC_OscConfig+0x578>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d1f0      	bne.n	8003890 <HAL_RCC_OscConfig+0x2d0>
 80038ae:	e000      	b.n	80038b2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0302 	and.w	r3, r3, #2
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d060      	beq.n	8003980 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80038be:	69bb      	ldr	r3, [r7, #24]
 80038c0:	2b04      	cmp	r3, #4
 80038c2:	d005      	beq.n	80038d0 <HAL_RCC_OscConfig+0x310>
 80038c4:	69bb      	ldr	r3, [r7, #24]
 80038c6:	2b0c      	cmp	r3, #12
 80038c8:	d119      	bne.n	80038fe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	2b02      	cmp	r3, #2
 80038ce:	d116      	bne.n	80038fe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038d0:	4b99      	ldr	r3, [pc, #612]	; (8003b38 <HAL_RCC_OscConfig+0x578>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d005      	beq.n	80038e8 <HAL_RCC_OscConfig+0x328>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d101      	bne.n	80038e8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e249      	b.n	8003d7c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038e8:	4b93      	ldr	r3, [pc, #588]	; (8003b38 <HAL_RCC_OscConfig+0x578>)
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	691b      	ldr	r3, [r3, #16]
 80038f4:	061b      	lsls	r3, r3, #24
 80038f6:	4990      	ldr	r1, [pc, #576]	; (8003b38 <HAL_RCC_OscConfig+0x578>)
 80038f8:	4313      	orrs	r3, r2
 80038fa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038fc:	e040      	b.n	8003980 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d023      	beq.n	800394e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003906:	4b8c      	ldr	r3, [pc, #560]	; (8003b38 <HAL_RCC_OscConfig+0x578>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a8b      	ldr	r2, [pc, #556]	; (8003b38 <HAL_RCC_OscConfig+0x578>)
 800390c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003910:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003912:	f7fd fc1b 	bl	800114c <HAL_GetTick>
 8003916:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003918:	e008      	b.n	800392c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800391a:	f7fd fc17 	bl	800114c <HAL_GetTick>
 800391e:	4602      	mov	r2, r0
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	1ad3      	subs	r3, r2, r3
 8003924:	2b02      	cmp	r3, #2
 8003926:	d901      	bls.n	800392c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003928:	2303      	movs	r3, #3
 800392a:	e227      	b.n	8003d7c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800392c:	4b82      	ldr	r3, [pc, #520]	; (8003b38 <HAL_RCC_OscConfig+0x578>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003934:	2b00      	cmp	r3, #0
 8003936:	d0f0      	beq.n	800391a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003938:	4b7f      	ldr	r3, [pc, #508]	; (8003b38 <HAL_RCC_OscConfig+0x578>)
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	691b      	ldr	r3, [r3, #16]
 8003944:	061b      	lsls	r3, r3, #24
 8003946:	497c      	ldr	r1, [pc, #496]	; (8003b38 <HAL_RCC_OscConfig+0x578>)
 8003948:	4313      	orrs	r3, r2
 800394a:	604b      	str	r3, [r1, #4]
 800394c:	e018      	b.n	8003980 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800394e:	4b7a      	ldr	r3, [pc, #488]	; (8003b38 <HAL_RCC_OscConfig+0x578>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a79      	ldr	r2, [pc, #484]	; (8003b38 <HAL_RCC_OscConfig+0x578>)
 8003954:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003958:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800395a:	f7fd fbf7 	bl	800114c <HAL_GetTick>
 800395e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003960:	e008      	b.n	8003974 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003962:	f7fd fbf3 	bl	800114c <HAL_GetTick>
 8003966:	4602      	mov	r2, r0
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	2b02      	cmp	r3, #2
 800396e:	d901      	bls.n	8003974 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003970:	2303      	movs	r3, #3
 8003972:	e203      	b.n	8003d7c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003974:	4b70      	ldr	r3, [pc, #448]	; (8003b38 <HAL_RCC_OscConfig+0x578>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800397c:	2b00      	cmp	r3, #0
 800397e:	d1f0      	bne.n	8003962 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0308 	and.w	r3, r3, #8
 8003988:	2b00      	cmp	r3, #0
 800398a:	d03c      	beq.n	8003a06 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	695b      	ldr	r3, [r3, #20]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d01c      	beq.n	80039ce <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003994:	4b68      	ldr	r3, [pc, #416]	; (8003b38 <HAL_RCC_OscConfig+0x578>)
 8003996:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800399a:	4a67      	ldr	r2, [pc, #412]	; (8003b38 <HAL_RCC_OscConfig+0x578>)
 800399c:	f043 0301 	orr.w	r3, r3, #1
 80039a0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039a4:	f7fd fbd2 	bl	800114c <HAL_GetTick>
 80039a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80039aa:	e008      	b.n	80039be <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039ac:	f7fd fbce 	bl	800114c <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	2b02      	cmp	r3, #2
 80039b8:	d901      	bls.n	80039be <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80039ba:	2303      	movs	r3, #3
 80039bc:	e1de      	b.n	8003d7c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80039be:	4b5e      	ldr	r3, [pc, #376]	; (8003b38 <HAL_RCC_OscConfig+0x578>)
 80039c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039c4:	f003 0302 	and.w	r3, r3, #2
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d0ef      	beq.n	80039ac <HAL_RCC_OscConfig+0x3ec>
 80039cc:	e01b      	b.n	8003a06 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039ce:	4b5a      	ldr	r3, [pc, #360]	; (8003b38 <HAL_RCC_OscConfig+0x578>)
 80039d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039d4:	4a58      	ldr	r2, [pc, #352]	; (8003b38 <HAL_RCC_OscConfig+0x578>)
 80039d6:	f023 0301 	bic.w	r3, r3, #1
 80039da:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039de:	f7fd fbb5 	bl	800114c <HAL_GetTick>
 80039e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80039e4:	e008      	b.n	80039f8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039e6:	f7fd fbb1 	bl	800114c <HAL_GetTick>
 80039ea:	4602      	mov	r2, r0
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	1ad3      	subs	r3, r2, r3
 80039f0:	2b02      	cmp	r3, #2
 80039f2:	d901      	bls.n	80039f8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80039f4:	2303      	movs	r3, #3
 80039f6:	e1c1      	b.n	8003d7c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80039f8:	4b4f      	ldr	r3, [pc, #316]	; (8003b38 <HAL_RCC_OscConfig+0x578>)
 80039fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039fe:	f003 0302 	and.w	r3, r3, #2
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d1ef      	bne.n	80039e6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0304 	and.w	r3, r3, #4
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	f000 80a6 	beq.w	8003b60 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a14:	2300      	movs	r3, #0
 8003a16:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003a18:	4b47      	ldr	r3, [pc, #284]	; (8003b38 <HAL_RCC_OscConfig+0x578>)
 8003a1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d10d      	bne.n	8003a40 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a24:	4b44      	ldr	r3, [pc, #272]	; (8003b38 <HAL_RCC_OscConfig+0x578>)
 8003a26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a28:	4a43      	ldr	r2, [pc, #268]	; (8003b38 <HAL_RCC_OscConfig+0x578>)
 8003a2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a2e:	6593      	str	r3, [r2, #88]	; 0x58
 8003a30:	4b41      	ldr	r3, [pc, #260]	; (8003b38 <HAL_RCC_OscConfig+0x578>)
 8003a32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a38:	60bb      	str	r3, [r7, #8]
 8003a3a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a40:	4b3e      	ldr	r3, [pc, #248]	; (8003b3c <HAL_RCC_OscConfig+0x57c>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d118      	bne.n	8003a7e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a4c:	4b3b      	ldr	r3, [pc, #236]	; (8003b3c <HAL_RCC_OscConfig+0x57c>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a3a      	ldr	r2, [pc, #232]	; (8003b3c <HAL_RCC_OscConfig+0x57c>)
 8003a52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a56:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a58:	f7fd fb78 	bl	800114c <HAL_GetTick>
 8003a5c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a5e:	e008      	b.n	8003a72 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a60:	f7fd fb74 	bl	800114c <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	2b02      	cmp	r3, #2
 8003a6c:	d901      	bls.n	8003a72 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e184      	b.n	8003d7c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a72:	4b32      	ldr	r3, [pc, #200]	; (8003b3c <HAL_RCC_OscConfig+0x57c>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d0f0      	beq.n	8003a60 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d108      	bne.n	8003a98 <HAL_RCC_OscConfig+0x4d8>
 8003a86:	4b2c      	ldr	r3, [pc, #176]	; (8003b38 <HAL_RCC_OscConfig+0x578>)
 8003a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a8c:	4a2a      	ldr	r2, [pc, #168]	; (8003b38 <HAL_RCC_OscConfig+0x578>)
 8003a8e:	f043 0301 	orr.w	r3, r3, #1
 8003a92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a96:	e024      	b.n	8003ae2 <HAL_RCC_OscConfig+0x522>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	2b05      	cmp	r3, #5
 8003a9e:	d110      	bne.n	8003ac2 <HAL_RCC_OscConfig+0x502>
 8003aa0:	4b25      	ldr	r3, [pc, #148]	; (8003b38 <HAL_RCC_OscConfig+0x578>)
 8003aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aa6:	4a24      	ldr	r2, [pc, #144]	; (8003b38 <HAL_RCC_OscConfig+0x578>)
 8003aa8:	f043 0304 	orr.w	r3, r3, #4
 8003aac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ab0:	4b21      	ldr	r3, [pc, #132]	; (8003b38 <HAL_RCC_OscConfig+0x578>)
 8003ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ab6:	4a20      	ldr	r2, [pc, #128]	; (8003b38 <HAL_RCC_OscConfig+0x578>)
 8003ab8:	f043 0301 	orr.w	r3, r3, #1
 8003abc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ac0:	e00f      	b.n	8003ae2 <HAL_RCC_OscConfig+0x522>
 8003ac2:	4b1d      	ldr	r3, [pc, #116]	; (8003b38 <HAL_RCC_OscConfig+0x578>)
 8003ac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ac8:	4a1b      	ldr	r2, [pc, #108]	; (8003b38 <HAL_RCC_OscConfig+0x578>)
 8003aca:	f023 0301 	bic.w	r3, r3, #1
 8003ace:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ad2:	4b19      	ldr	r3, [pc, #100]	; (8003b38 <HAL_RCC_OscConfig+0x578>)
 8003ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ad8:	4a17      	ldr	r2, [pc, #92]	; (8003b38 <HAL_RCC_OscConfig+0x578>)
 8003ada:	f023 0304 	bic.w	r3, r3, #4
 8003ade:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d016      	beq.n	8003b18 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aea:	f7fd fb2f 	bl	800114c <HAL_GetTick>
 8003aee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003af0:	e00a      	b.n	8003b08 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003af2:	f7fd fb2b 	bl	800114c <HAL_GetTick>
 8003af6:	4602      	mov	r2, r0
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d901      	bls.n	8003b08 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003b04:	2303      	movs	r3, #3
 8003b06:	e139      	b.n	8003d7c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b08:	4b0b      	ldr	r3, [pc, #44]	; (8003b38 <HAL_RCC_OscConfig+0x578>)
 8003b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b0e:	f003 0302 	and.w	r3, r3, #2
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d0ed      	beq.n	8003af2 <HAL_RCC_OscConfig+0x532>
 8003b16:	e01a      	b.n	8003b4e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b18:	f7fd fb18 	bl	800114c <HAL_GetTick>
 8003b1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b1e:	e00f      	b.n	8003b40 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b20:	f7fd fb14 	bl	800114c <HAL_GetTick>
 8003b24:	4602      	mov	r2, r0
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d906      	bls.n	8003b40 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e122      	b.n	8003d7c <HAL_RCC_OscConfig+0x7bc>
 8003b36:	bf00      	nop
 8003b38:	40021000 	.word	0x40021000
 8003b3c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b40:	4b90      	ldr	r3, [pc, #576]	; (8003d84 <HAL_RCC_OscConfig+0x7c4>)
 8003b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b46:	f003 0302 	and.w	r3, r3, #2
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d1e8      	bne.n	8003b20 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b4e:	7ffb      	ldrb	r3, [r7, #31]
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d105      	bne.n	8003b60 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b54:	4b8b      	ldr	r3, [pc, #556]	; (8003d84 <HAL_RCC_OscConfig+0x7c4>)
 8003b56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b58:	4a8a      	ldr	r2, [pc, #552]	; (8003d84 <HAL_RCC_OscConfig+0x7c4>)
 8003b5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b5e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	f000 8108 	beq.w	8003d7a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	f040 80d0 	bne.w	8003d14 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003b74:	4b83      	ldr	r3, [pc, #524]	; (8003d84 <HAL_RCC_OscConfig+0x7c4>)
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	f003 0203 	and.w	r2, r3, #3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d130      	bne.n	8003bea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b92:	3b01      	subs	r3, #1
 8003b94:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d127      	bne.n	8003bea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ba4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d11f      	bne.n	8003bea <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003bb4:	2a07      	cmp	r2, #7
 8003bb6:	bf14      	ite	ne
 8003bb8:	2201      	movne	r2, #1
 8003bba:	2200      	moveq	r2, #0
 8003bbc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d113      	bne.n	8003bea <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bcc:	085b      	lsrs	r3, r3, #1
 8003bce:	3b01      	subs	r3, #1
 8003bd0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d109      	bne.n	8003bea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be0:	085b      	lsrs	r3, r3, #1
 8003be2:	3b01      	subs	r3, #1
 8003be4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d06e      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	2b0c      	cmp	r3, #12
 8003bee:	d069      	beq.n	8003cc4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003bf0:	4b64      	ldr	r3, [pc, #400]	; (8003d84 <HAL_RCC_OscConfig+0x7c4>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d105      	bne.n	8003c08 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003bfc:	4b61      	ldr	r3, [pc, #388]	; (8003d84 <HAL_RCC_OscConfig+0x7c4>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d001      	beq.n	8003c0c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e0b7      	b.n	8003d7c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003c0c:	4b5d      	ldr	r3, [pc, #372]	; (8003d84 <HAL_RCC_OscConfig+0x7c4>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a5c      	ldr	r2, [pc, #368]	; (8003d84 <HAL_RCC_OscConfig+0x7c4>)
 8003c12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c16:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003c18:	f7fd fa98 	bl	800114c <HAL_GetTick>
 8003c1c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c1e:	e008      	b.n	8003c32 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c20:	f7fd fa94 	bl	800114c <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d901      	bls.n	8003c32 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e0a4      	b.n	8003d7c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c32:	4b54      	ldr	r3, [pc, #336]	; (8003d84 <HAL_RCC_OscConfig+0x7c4>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d1f0      	bne.n	8003c20 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c3e:	4b51      	ldr	r3, [pc, #324]	; (8003d84 <HAL_RCC_OscConfig+0x7c4>)
 8003c40:	68da      	ldr	r2, [r3, #12]
 8003c42:	4b51      	ldr	r3, [pc, #324]	; (8003d88 <HAL_RCC_OscConfig+0x7c8>)
 8003c44:	4013      	ands	r3, r2
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003c4e:	3a01      	subs	r2, #1
 8003c50:	0112      	lsls	r2, r2, #4
 8003c52:	4311      	orrs	r1, r2
 8003c54:	687a      	ldr	r2, [r7, #4]
 8003c56:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003c58:	0212      	lsls	r2, r2, #8
 8003c5a:	4311      	orrs	r1, r2
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003c60:	0852      	lsrs	r2, r2, #1
 8003c62:	3a01      	subs	r2, #1
 8003c64:	0552      	lsls	r2, r2, #21
 8003c66:	4311      	orrs	r1, r2
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003c6c:	0852      	lsrs	r2, r2, #1
 8003c6e:	3a01      	subs	r2, #1
 8003c70:	0652      	lsls	r2, r2, #25
 8003c72:	4311      	orrs	r1, r2
 8003c74:	687a      	ldr	r2, [r7, #4]
 8003c76:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c78:	0912      	lsrs	r2, r2, #4
 8003c7a:	0452      	lsls	r2, r2, #17
 8003c7c:	430a      	orrs	r2, r1
 8003c7e:	4941      	ldr	r1, [pc, #260]	; (8003d84 <HAL_RCC_OscConfig+0x7c4>)
 8003c80:	4313      	orrs	r3, r2
 8003c82:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003c84:	4b3f      	ldr	r3, [pc, #252]	; (8003d84 <HAL_RCC_OscConfig+0x7c4>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a3e      	ldr	r2, [pc, #248]	; (8003d84 <HAL_RCC_OscConfig+0x7c4>)
 8003c8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c8e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c90:	4b3c      	ldr	r3, [pc, #240]	; (8003d84 <HAL_RCC_OscConfig+0x7c4>)
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	4a3b      	ldr	r2, [pc, #236]	; (8003d84 <HAL_RCC_OscConfig+0x7c4>)
 8003c96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c9a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003c9c:	f7fd fa56 	bl	800114c <HAL_GetTick>
 8003ca0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ca2:	e008      	b.n	8003cb6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ca4:	f7fd fa52 	bl	800114c <HAL_GetTick>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	d901      	bls.n	8003cb6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	e062      	b.n	8003d7c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cb6:	4b33      	ldr	r3, [pc, #204]	; (8003d84 <HAL_RCC_OscConfig+0x7c4>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d0f0      	beq.n	8003ca4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003cc2:	e05a      	b.n	8003d7a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e059      	b.n	8003d7c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cc8:	4b2e      	ldr	r3, [pc, #184]	; (8003d84 <HAL_RCC_OscConfig+0x7c4>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d152      	bne.n	8003d7a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003cd4:	4b2b      	ldr	r3, [pc, #172]	; (8003d84 <HAL_RCC_OscConfig+0x7c4>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a2a      	ldr	r2, [pc, #168]	; (8003d84 <HAL_RCC_OscConfig+0x7c4>)
 8003cda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cde:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ce0:	4b28      	ldr	r3, [pc, #160]	; (8003d84 <HAL_RCC_OscConfig+0x7c4>)
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	4a27      	ldr	r2, [pc, #156]	; (8003d84 <HAL_RCC_OscConfig+0x7c4>)
 8003ce6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003cec:	f7fd fa2e 	bl	800114c <HAL_GetTick>
 8003cf0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cf2:	e008      	b.n	8003d06 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cf4:	f7fd fa2a 	bl	800114c <HAL_GetTick>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	2b02      	cmp	r3, #2
 8003d00:	d901      	bls.n	8003d06 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	e03a      	b.n	8003d7c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d06:	4b1f      	ldr	r3, [pc, #124]	; (8003d84 <HAL_RCC_OscConfig+0x7c4>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d0f0      	beq.n	8003cf4 <HAL_RCC_OscConfig+0x734>
 8003d12:	e032      	b.n	8003d7a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d14:	69bb      	ldr	r3, [r7, #24]
 8003d16:	2b0c      	cmp	r3, #12
 8003d18:	d02d      	beq.n	8003d76 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d1a:	4b1a      	ldr	r3, [pc, #104]	; (8003d84 <HAL_RCC_OscConfig+0x7c4>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a19      	ldr	r2, [pc, #100]	; (8003d84 <HAL_RCC_OscConfig+0x7c4>)
 8003d20:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d24:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003d26:	4b17      	ldr	r3, [pc, #92]	; (8003d84 <HAL_RCC_OscConfig+0x7c4>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d105      	bne.n	8003d3e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003d32:	4b14      	ldr	r3, [pc, #80]	; (8003d84 <HAL_RCC_OscConfig+0x7c4>)
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	4a13      	ldr	r2, [pc, #76]	; (8003d84 <HAL_RCC_OscConfig+0x7c4>)
 8003d38:	f023 0303 	bic.w	r3, r3, #3
 8003d3c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003d3e:	4b11      	ldr	r3, [pc, #68]	; (8003d84 <HAL_RCC_OscConfig+0x7c4>)
 8003d40:	68db      	ldr	r3, [r3, #12]
 8003d42:	4a10      	ldr	r2, [pc, #64]	; (8003d84 <HAL_RCC_OscConfig+0x7c4>)
 8003d44:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003d48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d4c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d4e:	f7fd f9fd 	bl	800114c <HAL_GetTick>
 8003d52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d54:	e008      	b.n	8003d68 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d56:	f7fd f9f9 	bl	800114c <HAL_GetTick>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	1ad3      	subs	r3, r2, r3
 8003d60:	2b02      	cmp	r3, #2
 8003d62:	d901      	bls.n	8003d68 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003d64:	2303      	movs	r3, #3
 8003d66:	e009      	b.n	8003d7c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d68:	4b06      	ldr	r3, [pc, #24]	; (8003d84 <HAL_RCC_OscConfig+0x7c4>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d1f0      	bne.n	8003d56 <HAL_RCC_OscConfig+0x796>
 8003d74:	e001      	b.n	8003d7a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e000      	b.n	8003d7c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8003d7a:	2300      	movs	r3, #0
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3720      	adds	r7, #32
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	40021000 	.word	0x40021000
 8003d88:	f99d808c 	.word	0xf99d808c

08003d8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b084      	sub	sp, #16
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d101      	bne.n	8003da0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e0c8      	b.n	8003f32 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003da0:	4b66      	ldr	r3, [pc, #408]	; (8003f3c <HAL_RCC_ClockConfig+0x1b0>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 0307 	and.w	r3, r3, #7
 8003da8:	683a      	ldr	r2, [r7, #0]
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d910      	bls.n	8003dd0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dae:	4b63      	ldr	r3, [pc, #396]	; (8003f3c <HAL_RCC_ClockConfig+0x1b0>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f023 0207 	bic.w	r2, r3, #7
 8003db6:	4961      	ldr	r1, [pc, #388]	; (8003f3c <HAL_RCC_ClockConfig+0x1b0>)
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dbe:	4b5f      	ldr	r3, [pc, #380]	; (8003f3c <HAL_RCC_ClockConfig+0x1b0>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0307 	and.w	r3, r3, #7
 8003dc6:	683a      	ldr	r2, [r7, #0]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d001      	beq.n	8003dd0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e0b0      	b.n	8003f32 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0301 	and.w	r3, r3, #1
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d04c      	beq.n	8003e76 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	2b03      	cmp	r3, #3
 8003de2:	d107      	bne.n	8003df4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003de4:	4b56      	ldr	r3, [pc, #344]	; (8003f40 <HAL_RCC_ClockConfig+0x1b4>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d121      	bne.n	8003e34 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e09e      	b.n	8003f32 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	2b02      	cmp	r3, #2
 8003dfa:	d107      	bne.n	8003e0c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003dfc:	4b50      	ldr	r3, [pc, #320]	; (8003f40 <HAL_RCC_ClockConfig+0x1b4>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d115      	bne.n	8003e34 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e092      	b.n	8003f32 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d107      	bne.n	8003e24 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e14:	4b4a      	ldr	r3, [pc, #296]	; (8003f40 <HAL_RCC_ClockConfig+0x1b4>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0302 	and.w	r3, r3, #2
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d109      	bne.n	8003e34 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	e086      	b.n	8003f32 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e24:	4b46      	ldr	r3, [pc, #280]	; (8003f40 <HAL_RCC_ClockConfig+0x1b4>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d101      	bne.n	8003e34 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	e07e      	b.n	8003f32 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003e34:	4b42      	ldr	r3, [pc, #264]	; (8003f40 <HAL_RCC_ClockConfig+0x1b4>)
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	f023 0203 	bic.w	r2, r3, #3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	493f      	ldr	r1, [pc, #252]	; (8003f40 <HAL_RCC_ClockConfig+0x1b4>)
 8003e42:	4313      	orrs	r3, r2
 8003e44:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e46:	f7fd f981 	bl	800114c <HAL_GetTick>
 8003e4a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e4c:	e00a      	b.n	8003e64 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e4e:	f7fd f97d 	bl	800114c <HAL_GetTick>
 8003e52:	4602      	mov	r2, r0
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d901      	bls.n	8003e64 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003e60:	2303      	movs	r3, #3
 8003e62:	e066      	b.n	8003f32 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e64:	4b36      	ldr	r3, [pc, #216]	; (8003f40 <HAL_RCC_ClockConfig+0x1b4>)
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	f003 020c 	and.w	r2, r3, #12
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d1eb      	bne.n	8003e4e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0302 	and.w	r3, r3, #2
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d008      	beq.n	8003e94 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e82:	4b2f      	ldr	r3, [pc, #188]	; (8003f40 <HAL_RCC_ClockConfig+0x1b4>)
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	492c      	ldr	r1, [pc, #176]	; (8003f40 <HAL_RCC_ClockConfig+0x1b4>)
 8003e90:	4313      	orrs	r3, r2
 8003e92:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e94:	4b29      	ldr	r3, [pc, #164]	; (8003f3c <HAL_RCC_ClockConfig+0x1b0>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0307 	and.w	r3, r3, #7
 8003e9c:	683a      	ldr	r2, [r7, #0]
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d210      	bcs.n	8003ec4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ea2:	4b26      	ldr	r3, [pc, #152]	; (8003f3c <HAL_RCC_ClockConfig+0x1b0>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f023 0207 	bic.w	r2, r3, #7
 8003eaa:	4924      	ldr	r1, [pc, #144]	; (8003f3c <HAL_RCC_ClockConfig+0x1b0>)
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eb2:	4b22      	ldr	r3, [pc, #136]	; (8003f3c <HAL_RCC_ClockConfig+0x1b0>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 0307 	and.w	r3, r3, #7
 8003eba:	683a      	ldr	r2, [r7, #0]
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d001      	beq.n	8003ec4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e036      	b.n	8003f32 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0304 	and.w	r3, r3, #4
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d008      	beq.n	8003ee2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ed0:	4b1b      	ldr	r3, [pc, #108]	; (8003f40 <HAL_RCC_ClockConfig+0x1b4>)
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	4918      	ldr	r1, [pc, #96]	; (8003f40 <HAL_RCC_ClockConfig+0x1b4>)
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 0308 	and.w	r3, r3, #8
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d009      	beq.n	8003f02 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003eee:	4b14      	ldr	r3, [pc, #80]	; (8003f40 <HAL_RCC_ClockConfig+0x1b4>)
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	691b      	ldr	r3, [r3, #16]
 8003efa:	00db      	lsls	r3, r3, #3
 8003efc:	4910      	ldr	r1, [pc, #64]	; (8003f40 <HAL_RCC_ClockConfig+0x1b4>)
 8003efe:	4313      	orrs	r3, r2
 8003f00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003f02:	f000 f825 	bl	8003f50 <HAL_RCC_GetSysClockFreq>
 8003f06:	4602      	mov	r2, r0
 8003f08:	4b0d      	ldr	r3, [pc, #52]	; (8003f40 <HAL_RCC_ClockConfig+0x1b4>)
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	091b      	lsrs	r3, r3, #4
 8003f0e:	f003 030f 	and.w	r3, r3, #15
 8003f12:	490c      	ldr	r1, [pc, #48]	; (8003f44 <HAL_RCC_ClockConfig+0x1b8>)
 8003f14:	5ccb      	ldrb	r3, [r1, r3]
 8003f16:	f003 031f 	and.w	r3, r3, #31
 8003f1a:	fa22 f303 	lsr.w	r3, r2, r3
 8003f1e:	4a0a      	ldr	r2, [pc, #40]	; (8003f48 <HAL_RCC_ClockConfig+0x1bc>)
 8003f20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003f22:	4b0a      	ldr	r3, [pc, #40]	; (8003f4c <HAL_RCC_ClockConfig+0x1c0>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4618      	mov	r0, r3
 8003f28:	f7fd f8c0 	bl	80010ac <HAL_InitTick>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	72fb      	strb	r3, [r7, #11]

  return status;
 8003f30:	7afb      	ldrb	r3, [r7, #11]
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3710      	adds	r7, #16
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	40022000 	.word	0x40022000
 8003f40:	40021000 	.word	0x40021000
 8003f44:	08004ed4 	.word	0x08004ed4
 8003f48:	20000024 	.word	0x20000024
 8003f4c:	20000028 	.word	0x20000028

08003f50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b089      	sub	sp, #36	; 0x24
 8003f54:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003f56:	2300      	movs	r3, #0
 8003f58:	61fb      	str	r3, [r7, #28]
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f5e:	4b3e      	ldr	r3, [pc, #248]	; (8004058 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	f003 030c 	and.w	r3, r3, #12
 8003f66:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f68:	4b3b      	ldr	r3, [pc, #236]	; (8004058 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	f003 0303 	and.w	r3, r3, #3
 8003f70:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d005      	beq.n	8003f84 <HAL_RCC_GetSysClockFreq+0x34>
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	2b0c      	cmp	r3, #12
 8003f7c:	d121      	bne.n	8003fc2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d11e      	bne.n	8003fc2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003f84:	4b34      	ldr	r3, [pc, #208]	; (8004058 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 0308 	and.w	r3, r3, #8
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d107      	bne.n	8003fa0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003f90:	4b31      	ldr	r3, [pc, #196]	; (8004058 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f96:	0a1b      	lsrs	r3, r3, #8
 8003f98:	f003 030f 	and.w	r3, r3, #15
 8003f9c:	61fb      	str	r3, [r7, #28]
 8003f9e:	e005      	b.n	8003fac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003fa0:	4b2d      	ldr	r3, [pc, #180]	; (8004058 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	091b      	lsrs	r3, r3, #4
 8003fa6:	f003 030f 	and.w	r3, r3, #15
 8003faa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003fac:	4a2b      	ldr	r2, [pc, #172]	; (800405c <HAL_RCC_GetSysClockFreq+0x10c>)
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fb4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d10d      	bne.n	8003fd8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003fc0:	e00a      	b.n	8003fd8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	2b04      	cmp	r3, #4
 8003fc6:	d102      	bne.n	8003fce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003fc8:	4b25      	ldr	r3, [pc, #148]	; (8004060 <HAL_RCC_GetSysClockFreq+0x110>)
 8003fca:	61bb      	str	r3, [r7, #24]
 8003fcc:	e004      	b.n	8003fd8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	2b08      	cmp	r3, #8
 8003fd2:	d101      	bne.n	8003fd8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003fd4:	4b23      	ldr	r3, [pc, #140]	; (8004064 <HAL_RCC_GetSysClockFreq+0x114>)
 8003fd6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	2b0c      	cmp	r3, #12
 8003fdc:	d134      	bne.n	8004048 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003fde:	4b1e      	ldr	r3, [pc, #120]	; (8004058 <HAL_RCC_GetSysClockFreq+0x108>)
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	f003 0303 	and.w	r3, r3, #3
 8003fe6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	2b02      	cmp	r3, #2
 8003fec:	d003      	beq.n	8003ff6 <HAL_RCC_GetSysClockFreq+0xa6>
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	2b03      	cmp	r3, #3
 8003ff2:	d003      	beq.n	8003ffc <HAL_RCC_GetSysClockFreq+0xac>
 8003ff4:	e005      	b.n	8004002 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003ff6:	4b1a      	ldr	r3, [pc, #104]	; (8004060 <HAL_RCC_GetSysClockFreq+0x110>)
 8003ff8:	617b      	str	r3, [r7, #20]
      break;
 8003ffa:	e005      	b.n	8004008 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003ffc:	4b19      	ldr	r3, [pc, #100]	; (8004064 <HAL_RCC_GetSysClockFreq+0x114>)
 8003ffe:	617b      	str	r3, [r7, #20]
      break;
 8004000:	e002      	b.n	8004008 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	617b      	str	r3, [r7, #20]
      break;
 8004006:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004008:	4b13      	ldr	r3, [pc, #76]	; (8004058 <HAL_RCC_GetSysClockFreq+0x108>)
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	091b      	lsrs	r3, r3, #4
 800400e:	f003 0307 	and.w	r3, r3, #7
 8004012:	3301      	adds	r3, #1
 8004014:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004016:	4b10      	ldr	r3, [pc, #64]	; (8004058 <HAL_RCC_GetSysClockFreq+0x108>)
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	0a1b      	lsrs	r3, r3, #8
 800401c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004020:	697a      	ldr	r2, [r7, #20]
 8004022:	fb02 f203 	mul.w	r2, r2, r3
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	fbb2 f3f3 	udiv	r3, r2, r3
 800402c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800402e:	4b0a      	ldr	r3, [pc, #40]	; (8004058 <HAL_RCC_GetSysClockFreq+0x108>)
 8004030:	68db      	ldr	r3, [r3, #12]
 8004032:	0e5b      	lsrs	r3, r3, #25
 8004034:	f003 0303 	and.w	r3, r3, #3
 8004038:	3301      	adds	r3, #1
 800403a:	005b      	lsls	r3, r3, #1
 800403c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800403e:	697a      	ldr	r2, [r7, #20]
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	fbb2 f3f3 	udiv	r3, r2, r3
 8004046:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004048:	69bb      	ldr	r3, [r7, #24]
}
 800404a:	4618      	mov	r0, r3
 800404c:	3724      	adds	r7, #36	; 0x24
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr
 8004056:	bf00      	nop
 8004058:	40021000 	.word	0x40021000
 800405c:	08004ee4 	.word	0x08004ee4
 8004060:	00f42400 	.word	0x00f42400
 8004064:	007a1200 	.word	0x007a1200

08004068 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b086      	sub	sp, #24
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004070:	2300      	movs	r3, #0
 8004072:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004074:	4b2a      	ldr	r3, [pc, #168]	; (8004120 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004076:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004078:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800407c:	2b00      	cmp	r3, #0
 800407e:	d003      	beq.n	8004088 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004080:	f7ff f9f2 	bl	8003468 <HAL_PWREx_GetVoltageRange>
 8004084:	6178      	str	r0, [r7, #20]
 8004086:	e014      	b.n	80040b2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004088:	4b25      	ldr	r3, [pc, #148]	; (8004120 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800408a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800408c:	4a24      	ldr	r2, [pc, #144]	; (8004120 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800408e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004092:	6593      	str	r3, [r2, #88]	; 0x58
 8004094:	4b22      	ldr	r3, [pc, #136]	; (8004120 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004098:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800409c:	60fb      	str	r3, [r7, #12]
 800409e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80040a0:	f7ff f9e2 	bl	8003468 <HAL_PWREx_GetVoltageRange>
 80040a4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80040a6:	4b1e      	ldr	r3, [pc, #120]	; (8004120 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040aa:	4a1d      	ldr	r2, [pc, #116]	; (8004120 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040b0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040b8:	d10b      	bne.n	80040d2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2b80      	cmp	r3, #128	; 0x80
 80040be:	d919      	bls.n	80040f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2ba0      	cmp	r3, #160	; 0xa0
 80040c4:	d902      	bls.n	80040cc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80040c6:	2302      	movs	r3, #2
 80040c8:	613b      	str	r3, [r7, #16]
 80040ca:	e013      	b.n	80040f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80040cc:	2301      	movs	r3, #1
 80040ce:	613b      	str	r3, [r7, #16]
 80040d0:	e010      	b.n	80040f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2b80      	cmp	r3, #128	; 0x80
 80040d6:	d902      	bls.n	80040de <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80040d8:	2303      	movs	r3, #3
 80040da:	613b      	str	r3, [r7, #16]
 80040dc:	e00a      	b.n	80040f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2b80      	cmp	r3, #128	; 0x80
 80040e2:	d102      	bne.n	80040ea <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80040e4:	2302      	movs	r3, #2
 80040e6:	613b      	str	r3, [r7, #16]
 80040e8:	e004      	b.n	80040f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2b70      	cmp	r3, #112	; 0x70
 80040ee:	d101      	bne.n	80040f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80040f0:	2301      	movs	r3, #1
 80040f2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80040f4:	4b0b      	ldr	r3, [pc, #44]	; (8004124 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f023 0207 	bic.w	r2, r3, #7
 80040fc:	4909      	ldr	r1, [pc, #36]	; (8004124 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	4313      	orrs	r3, r2
 8004102:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004104:	4b07      	ldr	r3, [pc, #28]	; (8004124 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 0307 	and.w	r3, r3, #7
 800410c:	693a      	ldr	r2, [r7, #16]
 800410e:	429a      	cmp	r2, r3
 8004110:	d001      	beq.n	8004116 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e000      	b.n	8004118 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004116:	2300      	movs	r3, #0
}
 8004118:	4618      	mov	r0, r3
 800411a:	3718      	adds	r7, #24
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}
 8004120:	40021000 	.word	0x40021000
 8004124:	40022000 	.word	0x40022000

08004128 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b086      	sub	sp, #24
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004130:	2300      	movs	r3, #0
 8004132:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004134:	2300      	movs	r3, #0
 8004136:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004140:	2b00      	cmp	r3, #0
 8004142:	d041      	beq.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004148:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800414c:	d02a      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800414e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004152:	d824      	bhi.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004154:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004158:	d008      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800415a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800415e:	d81e      	bhi.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004160:	2b00      	cmp	r3, #0
 8004162:	d00a      	beq.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004164:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004168:	d010      	beq.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800416a:	e018      	b.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800416c:	4b86      	ldr	r3, [pc, #536]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	4a85      	ldr	r2, [pc, #532]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004172:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004176:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004178:	e015      	b.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	3304      	adds	r3, #4
 800417e:	2100      	movs	r1, #0
 8004180:	4618      	mov	r0, r3
 8004182:	f000 fabb 	bl	80046fc <RCCEx_PLLSAI1_Config>
 8004186:	4603      	mov	r3, r0
 8004188:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800418a:	e00c      	b.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	3320      	adds	r3, #32
 8004190:	2100      	movs	r1, #0
 8004192:	4618      	mov	r0, r3
 8004194:	f000 fba6 	bl	80048e4 <RCCEx_PLLSAI2_Config>
 8004198:	4603      	mov	r3, r0
 800419a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800419c:	e003      	b.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	74fb      	strb	r3, [r7, #19]
      break;
 80041a2:	e000      	b.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80041a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041a6:	7cfb      	ldrb	r3, [r7, #19]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d10b      	bne.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80041ac:	4b76      	ldr	r3, [pc, #472]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041b2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041ba:	4973      	ldr	r1, [pc, #460]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041bc:	4313      	orrs	r3, r2
 80041be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80041c2:	e001      	b.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041c4:	7cfb      	ldrb	r3, [r7, #19]
 80041c6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d041      	beq.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041d8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80041dc:	d02a      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80041de:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80041e2:	d824      	bhi.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80041e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80041e8:	d008      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80041ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80041ee:	d81e      	bhi.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d00a      	beq.n	800420a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80041f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80041f8:	d010      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80041fa:	e018      	b.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80041fc:	4b62      	ldr	r3, [pc, #392]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	4a61      	ldr	r2, [pc, #388]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004202:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004206:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004208:	e015      	b.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	3304      	adds	r3, #4
 800420e:	2100      	movs	r1, #0
 8004210:	4618      	mov	r0, r3
 8004212:	f000 fa73 	bl	80046fc <RCCEx_PLLSAI1_Config>
 8004216:	4603      	mov	r3, r0
 8004218:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800421a:	e00c      	b.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	3320      	adds	r3, #32
 8004220:	2100      	movs	r1, #0
 8004222:	4618      	mov	r0, r3
 8004224:	f000 fb5e 	bl	80048e4 <RCCEx_PLLSAI2_Config>
 8004228:	4603      	mov	r3, r0
 800422a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800422c:	e003      	b.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	74fb      	strb	r3, [r7, #19]
      break;
 8004232:	e000      	b.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004234:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004236:	7cfb      	ldrb	r3, [r7, #19]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d10b      	bne.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800423c:	4b52      	ldr	r3, [pc, #328]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800423e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004242:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800424a:	494f      	ldr	r1, [pc, #316]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800424c:	4313      	orrs	r3, r2
 800424e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004252:	e001      	b.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004254:	7cfb      	ldrb	r3, [r7, #19]
 8004256:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004260:	2b00      	cmp	r3, #0
 8004262:	f000 80a0 	beq.w	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004266:	2300      	movs	r3, #0
 8004268:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800426a:	4b47      	ldr	r3, [pc, #284]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800426c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800426e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004272:	2b00      	cmp	r3, #0
 8004274:	d101      	bne.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004276:	2301      	movs	r3, #1
 8004278:	e000      	b.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800427a:	2300      	movs	r3, #0
 800427c:	2b00      	cmp	r3, #0
 800427e:	d00d      	beq.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004280:	4b41      	ldr	r3, [pc, #260]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004282:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004284:	4a40      	ldr	r2, [pc, #256]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004286:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800428a:	6593      	str	r3, [r2, #88]	; 0x58
 800428c:	4b3e      	ldr	r3, [pc, #248]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800428e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004290:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004294:	60bb      	str	r3, [r7, #8]
 8004296:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004298:	2301      	movs	r3, #1
 800429a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800429c:	4b3b      	ldr	r3, [pc, #236]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a3a      	ldr	r2, [pc, #232]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80042a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042a6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80042a8:	f7fc ff50 	bl	800114c <HAL_GetTick>
 80042ac:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80042ae:	e009      	b.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042b0:	f7fc ff4c 	bl	800114c <HAL_GetTick>
 80042b4:	4602      	mov	r2, r0
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	2b02      	cmp	r3, #2
 80042bc:	d902      	bls.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80042be:	2303      	movs	r3, #3
 80042c0:	74fb      	strb	r3, [r7, #19]
        break;
 80042c2:	e005      	b.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80042c4:	4b31      	ldr	r3, [pc, #196]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d0ef      	beq.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80042d0:	7cfb      	ldrb	r3, [r7, #19]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d15c      	bne.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80042d6:	4b2c      	ldr	r3, [pc, #176]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042e0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d01f      	beq.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042ee:	697a      	ldr	r2, [r7, #20]
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d019      	beq.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80042f4:	4b24      	ldr	r3, [pc, #144]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042fe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004300:	4b21      	ldr	r3, [pc, #132]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004302:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004306:	4a20      	ldr	r2, [pc, #128]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004308:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800430c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004310:	4b1d      	ldr	r3, [pc, #116]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004316:	4a1c      	ldr	r2, [pc, #112]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004318:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800431c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004320:	4a19      	ldr	r2, [pc, #100]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	f003 0301 	and.w	r3, r3, #1
 800432e:	2b00      	cmp	r3, #0
 8004330:	d016      	beq.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004332:	f7fc ff0b 	bl	800114c <HAL_GetTick>
 8004336:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004338:	e00b      	b.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800433a:	f7fc ff07 	bl	800114c <HAL_GetTick>
 800433e:	4602      	mov	r2, r0
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	f241 3288 	movw	r2, #5000	; 0x1388
 8004348:	4293      	cmp	r3, r2
 800434a:	d902      	bls.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800434c:	2303      	movs	r3, #3
 800434e:	74fb      	strb	r3, [r7, #19]
            break;
 8004350:	e006      	b.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004352:	4b0d      	ldr	r3, [pc, #52]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004354:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004358:	f003 0302 	and.w	r3, r3, #2
 800435c:	2b00      	cmp	r3, #0
 800435e:	d0ec      	beq.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004360:	7cfb      	ldrb	r3, [r7, #19]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d10c      	bne.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004366:	4b08      	ldr	r3, [pc, #32]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004368:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800436c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004376:	4904      	ldr	r1, [pc, #16]	; (8004388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004378:	4313      	orrs	r3, r2
 800437a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800437e:	e009      	b.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004380:	7cfb      	ldrb	r3, [r7, #19]
 8004382:	74bb      	strb	r3, [r7, #18]
 8004384:	e006      	b.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004386:	bf00      	nop
 8004388:	40021000 	.word	0x40021000
 800438c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004390:	7cfb      	ldrb	r3, [r7, #19]
 8004392:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004394:	7c7b      	ldrb	r3, [r7, #17]
 8004396:	2b01      	cmp	r3, #1
 8004398:	d105      	bne.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800439a:	4b9e      	ldr	r3, [pc, #632]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800439c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800439e:	4a9d      	ldr	r2, [pc, #628]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043a4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0301 	and.w	r3, r3, #1
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d00a      	beq.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80043b2:	4b98      	ldr	r3, [pc, #608]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043b8:	f023 0203 	bic.w	r2, r3, #3
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c0:	4994      	ldr	r1, [pc, #592]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043c2:	4313      	orrs	r3, r2
 80043c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 0302 	and.w	r3, r3, #2
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d00a      	beq.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80043d4:	4b8f      	ldr	r3, [pc, #572]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043da:	f023 020c 	bic.w	r2, r3, #12
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043e2:	498c      	ldr	r1, [pc, #560]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043e4:	4313      	orrs	r3, r2
 80043e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 0304 	and.w	r3, r3, #4
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d00a      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80043f6:	4b87      	ldr	r3, [pc, #540]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043fc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004404:	4983      	ldr	r1, [pc, #524]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004406:	4313      	orrs	r3, r2
 8004408:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0308 	and.w	r3, r3, #8
 8004414:	2b00      	cmp	r3, #0
 8004416:	d00a      	beq.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004418:	4b7e      	ldr	r3, [pc, #504]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800441a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800441e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004426:	497b      	ldr	r1, [pc, #492]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004428:	4313      	orrs	r3, r2
 800442a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0310 	and.w	r3, r3, #16
 8004436:	2b00      	cmp	r3, #0
 8004438:	d00a      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800443a:	4b76      	ldr	r3, [pc, #472]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800443c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004440:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004448:	4972      	ldr	r1, [pc, #456]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800444a:	4313      	orrs	r3, r2
 800444c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 0320 	and.w	r3, r3, #32
 8004458:	2b00      	cmp	r3, #0
 800445a:	d00a      	beq.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800445c:	4b6d      	ldr	r3, [pc, #436]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800445e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004462:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800446a:	496a      	ldr	r1, [pc, #424]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800446c:	4313      	orrs	r3, r2
 800446e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800447a:	2b00      	cmp	r3, #0
 800447c:	d00a      	beq.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800447e:	4b65      	ldr	r3, [pc, #404]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004480:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004484:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800448c:	4961      	ldr	r1, [pc, #388]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800448e:	4313      	orrs	r3, r2
 8004490:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800449c:	2b00      	cmp	r3, #0
 800449e:	d00a      	beq.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80044a0:	4b5c      	ldr	r3, [pc, #368]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044ae:	4959      	ldr	r1, [pc, #356]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044b0:	4313      	orrs	r3, r2
 80044b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d00a      	beq.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80044c2:	4b54      	ldr	r3, [pc, #336]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044c8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044d0:	4950      	ldr	r1, [pc, #320]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044d2:	4313      	orrs	r3, r2
 80044d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d00a      	beq.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80044e4:	4b4b      	ldr	r3, [pc, #300]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ea:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044f2:	4948      	ldr	r1, [pc, #288]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044f4:	4313      	orrs	r3, r2
 80044f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004502:	2b00      	cmp	r3, #0
 8004504:	d00a      	beq.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004506:	4b43      	ldr	r3, [pc, #268]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004508:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800450c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004514:	493f      	ldr	r1, [pc, #252]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004516:	4313      	orrs	r3, r2
 8004518:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004524:	2b00      	cmp	r3, #0
 8004526:	d028      	beq.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004528:	4b3a      	ldr	r3, [pc, #232]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800452a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800452e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004536:	4937      	ldr	r1, [pc, #220]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004538:	4313      	orrs	r3, r2
 800453a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004542:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004546:	d106      	bne.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004548:	4b32      	ldr	r3, [pc, #200]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	4a31      	ldr	r2, [pc, #196]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800454e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004552:	60d3      	str	r3, [r2, #12]
 8004554:	e011      	b.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800455a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800455e:	d10c      	bne.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	3304      	adds	r3, #4
 8004564:	2101      	movs	r1, #1
 8004566:	4618      	mov	r0, r3
 8004568:	f000 f8c8 	bl	80046fc <RCCEx_PLLSAI1_Config>
 800456c:	4603      	mov	r3, r0
 800456e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004570:	7cfb      	ldrb	r3, [r7, #19]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d001      	beq.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004576:	7cfb      	ldrb	r3, [r7, #19]
 8004578:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d028      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004586:	4b23      	ldr	r3, [pc, #140]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004588:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800458c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004594:	491f      	ldr	r1, [pc, #124]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004596:	4313      	orrs	r3, r2
 8004598:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045a4:	d106      	bne.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045a6:	4b1b      	ldr	r3, [pc, #108]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	4a1a      	ldr	r2, [pc, #104]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045b0:	60d3      	str	r3, [r2, #12]
 80045b2:	e011      	b.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80045bc:	d10c      	bne.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	3304      	adds	r3, #4
 80045c2:	2101      	movs	r1, #1
 80045c4:	4618      	mov	r0, r3
 80045c6:	f000 f899 	bl	80046fc <RCCEx_PLLSAI1_Config>
 80045ca:	4603      	mov	r3, r0
 80045cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80045ce:	7cfb      	ldrb	r3, [r7, #19]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d001      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80045d4:	7cfb      	ldrb	r3, [r7, #19]
 80045d6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d02b      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80045e4:	4b0b      	ldr	r3, [pc, #44]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045f2:	4908      	ldr	r1, [pc, #32]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045f4:	4313      	orrs	r3, r2
 80045f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004602:	d109      	bne.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004604:	4b03      	ldr	r3, [pc, #12]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	4a02      	ldr	r2, [pc, #8]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800460a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800460e:	60d3      	str	r3, [r2, #12]
 8004610:	e014      	b.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004612:	bf00      	nop
 8004614:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800461c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004620:	d10c      	bne.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	3304      	adds	r3, #4
 8004626:	2101      	movs	r1, #1
 8004628:	4618      	mov	r0, r3
 800462a:	f000 f867 	bl	80046fc <RCCEx_PLLSAI1_Config>
 800462e:	4603      	mov	r3, r0
 8004630:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004632:	7cfb      	ldrb	r3, [r7, #19]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d001      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004638:	7cfb      	ldrb	r3, [r7, #19]
 800463a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004644:	2b00      	cmp	r3, #0
 8004646:	d02f      	beq.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004648:	4b2b      	ldr	r3, [pc, #172]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800464a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800464e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004656:	4928      	ldr	r1, [pc, #160]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004658:	4313      	orrs	r3, r2
 800465a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004662:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004666:	d10d      	bne.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	3304      	adds	r3, #4
 800466c:	2102      	movs	r1, #2
 800466e:	4618      	mov	r0, r3
 8004670:	f000 f844 	bl	80046fc <RCCEx_PLLSAI1_Config>
 8004674:	4603      	mov	r3, r0
 8004676:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004678:	7cfb      	ldrb	r3, [r7, #19]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d014      	beq.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800467e:	7cfb      	ldrb	r3, [r7, #19]
 8004680:	74bb      	strb	r3, [r7, #18]
 8004682:	e011      	b.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004688:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800468c:	d10c      	bne.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	3320      	adds	r3, #32
 8004692:	2102      	movs	r1, #2
 8004694:	4618      	mov	r0, r3
 8004696:	f000 f925 	bl	80048e4 <RCCEx_PLLSAI2_Config>
 800469a:	4603      	mov	r3, r0
 800469c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800469e:	7cfb      	ldrb	r3, [r7, #19]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d001      	beq.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80046a4:	7cfb      	ldrb	r3, [r7, #19]
 80046a6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d00a      	beq.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80046b4:	4b10      	ldr	r3, [pc, #64]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80046b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ba:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046c2:	490d      	ldr	r1, [pc, #52]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80046c4:	4313      	orrs	r3, r2
 80046c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d00b      	beq.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80046d6:	4b08      	ldr	r3, [pc, #32]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80046d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046dc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046e6:	4904      	ldr	r1, [pc, #16]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80046e8:	4313      	orrs	r3, r2
 80046ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80046ee:	7cbb      	ldrb	r3, [r7, #18]
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3718      	adds	r7, #24
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	40021000 	.word	0x40021000

080046fc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004706:	2300      	movs	r3, #0
 8004708:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800470a:	4b75      	ldr	r3, [pc, #468]	; (80048e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800470c:	68db      	ldr	r3, [r3, #12]
 800470e:	f003 0303 	and.w	r3, r3, #3
 8004712:	2b00      	cmp	r3, #0
 8004714:	d018      	beq.n	8004748 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004716:	4b72      	ldr	r3, [pc, #456]	; (80048e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	f003 0203 	and.w	r2, r3, #3
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	429a      	cmp	r2, r3
 8004724:	d10d      	bne.n	8004742 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
       ||
 800472a:	2b00      	cmp	r3, #0
 800472c:	d009      	beq.n	8004742 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800472e:	4b6c      	ldr	r3, [pc, #432]	; (80048e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004730:	68db      	ldr	r3, [r3, #12]
 8004732:	091b      	lsrs	r3, r3, #4
 8004734:	f003 0307 	and.w	r3, r3, #7
 8004738:	1c5a      	adds	r2, r3, #1
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	685b      	ldr	r3, [r3, #4]
       ||
 800473e:	429a      	cmp	r2, r3
 8004740:	d047      	beq.n	80047d2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	73fb      	strb	r3, [r7, #15]
 8004746:	e044      	b.n	80047d2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	2b03      	cmp	r3, #3
 800474e:	d018      	beq.n	8004782 <RCCEx_PLLSAI1_Config+0x86>
 8004750:	2b03      	cmp	r3, #3
 8004752:	d825      	bhi.n	80047a0 <RCCEx_PLLSAI1_Config+0xa4>
 8004754:	2b01      	cmp	r3, #1
 8004756:	d002      	beq.n	800475e <RCCEx_PLLSAI1_Config+0x62>
 8004758:	2b02      	cmp	r3, #2
 800475a:	d009      	beq.n	8004770 <RCCEx_PLLSAI1_Config+0x74>
 800475c:	e020      	b.n	80047a0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800475e:	4b60      	ldr	r3, [pc, #384]	; (80048e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 0302 	and.w	r3, r3, #2
 8004766:	2b00      	cmp	r3, #0
 8004768:	d11d      	bne.n	80047a6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800476e:	e01a      	b.n	80047a6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004770:	4b5b      	ldr	r3, [pc, #364]	; (80048e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004778:	2b00      	cmp	r3, #0
 800477a:	d116      	bne.n	80047aa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004780:	e013      	b.n	80047aa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004782:	4b57      	ldr	r3, [pc, #348]	; (80048e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800478a:	2b00      	cmp	r3, #0
 800478c:	d10f      	bne.n	80047ae <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800478e:	4b54      	ldr	r3, [pc, #336]	; (80048e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004796:	2b00      	cmp	r3, #0
 8004798:	d109      	bne.n	80047ae <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800479e:	e006      	b.n	80047ae <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	73fb      	strb	r3, [r7, #15]
      break;
 80047a4:	e004      	b.n	80047b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80047a6:	bf00      	nop
 80047a8:	e002      	b.n	80047b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80047aa:	bf00      	nop
 80047ac:	e000      	b.n	80047b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80047ae:	bf00      	nop
    }

    if(status == HAL_OK)
 80047b0:	7bfb      	ldrb	r3, [r7, #15]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d10d      	bne.n	80047d2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80047b6:	4b4a      	ldr	r3, [pc, #296]	; (80048e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047b8:	68db      	ldr	r3, [r3, #12]
 80047ba:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6819      	ldr	r1, [r3, #0]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	3b01      	subs	r3, #1
 80047c8:	011b      	lsls	r3, r3, #4
 80047ca:	430b      	orrs	r3, r1
 80047cc:	4944      	ldr	r1, [pc, #272]	; (80048e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047ce:	4313      	orrs	r3, r2
 80047d0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80047d2:	7bfb      	ldrb	r3, [r7, #15]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d17d      	bne.n	80048d4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80047d8:	4b41      	ldr	r3, [pc, #260]	; (80048e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a40      	ldr	r2, [pc, #256]	; (80048e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80047de:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80047e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047e4:	f7fc fcb2 	bl	800114c <HAL_GetTick>
 80047e8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80047ea:	e009      	b.n	8004800 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80047ec:	f7fc fcae 	bl	800114c <HAL_GetTick>
 80047f0:	4602      	mov	r2, r0
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	1ad3      	subs	r3, r2, r3
 80047f6:	2b02      	cmp	r3, #2
 80047f8:	d902      	bls.n	8004800 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80047fa:	2303      	movs	r3, #3
 80047fc:	73fb      	strb	r3, [r7, #15]
        break;
 80047fe:	e005      	b.n	800480c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004800:	4b37      	ldr	r3, [pc, #220]	; (80048e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004808:	2b00      	cmp	r3, #0
 800480a:	d1ef      	bne.n	80047ec <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800480c:	7bfb      	ldrb	r3, [r7, #15]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d160      	bne.n	80048d4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d111      	bne.n	800483c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004818:	4b31      	ldr	r3, [pc, #196]	; (80048e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800481a:	691b      	ldr	r3, [r3, #16]
 800481c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004820:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	6892      	ldr	r2, [r2, #8]
 8004828:	0211      	lsls	r1, r2, #8
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	68d2      	ldr	r2, [r2, #12]
 800482e:	0912      	lsrs	r2, r2, #4
 8004830:	0452      	lsls	r2, r2, #17
 8004832:	430a      	orrs	r2, r1
 8004834:	492a      	ldr	r1, [pc, #168]	; (80048e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004836:	4313      	orrs	r3, r2
 8004838:	610b      	str	r3, [r1, #16]
 800483a:	e027      	b.n	800488c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	2b01      	cmp	r3, #1
 8004840:	d112      	bne.n	8004868 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004842:	4b27      	ldr	r3, [pc, #156]	; (80048e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004844:	691b      	ldr	r3, [r3, #16]
 8004846:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800484a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	6892      	ldr	r2, [r2, #8]
 8004852:	0211      	lsls	r1, r2, #8
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	6912      	ldr	r2, [r2, #16]
 8004858:	0852      	lsrs	r2, r2, #1
 800485a:	3a01      	subs	r2, #1
 800485c:	0552      	lsls	r2, r2, #21
 800485e:	430a      	orrs	r2, r1
 8004860:	491f      	ldr	r1, [pc, #124]	; (80048e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004862:	4313      	orrs	r3, r2
 8004864:	610b      	str	r3, [r1, #16]
 8004866:	e011      	b.n	800488c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004868:	4b1d      	ldr	r3, [pc, #116]	; (80048e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800486a:	691b      	ldr	r3, [r3, #16]
 800486c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004870:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	6892      	ldr	r2, [r2, #8]
 8004878:	0211      	lsls	r1, r2, #8
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	6952      	ldr	r2, [r2, #20]
 800487e:	0852      	lsrs	r2, r2, #1
 8004880:	3a01      	subs	r2, #1
 8004882:	0652      	lsls	r2, r2, #25
 8004884:	430a      	orrs	r2, r1
 8004886:	4916      	ldr	r1, [pc, #88]	; (80048e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004888:	4313      	orrs	r3, r2
 800488a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800488c:	4b14      	ldr	r3, [pc, #80]	; (80048e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a13      	ldr	r2, [pc, #76]	; (80048e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004892:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004896:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004898:	f7fc fc58 	bl	800114c <HAL_GetTick>
 800489c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800489e:	e009      	b.n	80048b4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80048a0:	f7fc fc54 	bl	800114c <HAL_GetTick>
 80048a4:	4602      	mov	r2, r0
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	1ad3      	subs	r3, r2, r3
 80048aa:	2b02      	cmp	r3, #2
 80048ac:	d902      	bls.n	80048b4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	73fb      	strb	r3, [r7, #15]
          break;
 80048b2:	e005      	b.n	80048c0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80048b4:	4b0a      	ldr	r3, [pc, #40]	; (80048e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d0ef      	beq.n	80048a0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80048c0:	7bfb      	ldrb	r3, [r7, #15]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d106      	bne.n	80048d4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80048c6:	4b06      	ldr	r3, [pc, #24]	; (80048e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048c8:	691a      	ldr	r2, [r3, #16]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	699b      	ldr	r3, [r3, #24]
 80048ce:	4904      	ldr	r1, [pc, #16]	; (80048e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048d0:	4313      	orrs	r3, r2
 80048d2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80048d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3710      	adds	r7, #16
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop
 80048e0:	40021000 	.word	0x40021000

080048e4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b084      	sub	sp, #16
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80048ee:	2300      	movs	r3, #0
 80048f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80048f2:	4b6a      	ldr	r3, [pc, #424]	; (8004a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 80048f4:	68db      	ldr	r3, [r3, #12]
 80048f6:	f003 0303 	and.w	r3, r3, #3
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d018      	beq.n	8004930 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80048fe:	4b67      	ldr	r3, [pc, #412]	; (8004a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004900:	68db      	ldr	r3, [r3, #12]
 8004902:	f003 0203 	and.w	r2, r3, #3
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	429a      	cmp	r2, r3
 800490c:	d10d      	bne.n	800492a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
       ||
 8004912:	2b00      	cmp	r3, #0
 8004914:	d009      	beq.n	800492a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004916:	4b61      	ldr	r3, [pc, #388]	; (8004a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004918:	68db      	ldr	r3, [r3, #12]
 800491a:	091b      	lsrs	r3, r3, #4
 800491c:	f003 0307 	and.w	r3, r3, #7
 8004920:	1c5a      	adds	r2, r3, #1
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	685b      	ldr	r3, [r3, #4]
       ||
 8004926:	429a      	cmp	r2, r3
 8004928:	d047      	beq.n	80049ba <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	73fb      	strb	r3, [r7, #15]
 800492e:	e044      	b.n	80049ba <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	2b03      	cmp	r3, #3
 8004936:	d018      	beq.n	800496a <RCCEx_PLLSAI2_Config+0x86>
 8004938:	2b03      	cmp	r3, #3
 800493a:	d825      	bhi.n	8004988 <RCCEx_PLLSAI2_Config+0xa4>
 800493c:	2b01      	cmp	r3, #1
 800493e:	d002      	beq.n	8004946 <RCCEx_PLLSAI2_Config+0x62>
 8004940:	2b02      	cmp	r3, #2
 8004942:	d009      	beq.n	8004958 <RCCEx_PLLSAI2_Config+0x74>
 8004944:	e020      	b.n	8004988 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004946:	4b55      	ldr	r3, [pc, #340]	; (8004a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 0302 	and.w	r3, r3, #2
 800494e:	2b00      	cmp	r3, #0
 8004950:	d11d      	bne.n	800498e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004956:	e01a      	b.n	800498e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004958:	4b50      	ldr	r3, [pc, #320]	; (8004a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004960:	2b00      	cmp	r3, #0
 8004962:	d116      	bne.n	8004992 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004968:	e013      	b.n	8004992 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800496a:	4b4c      	ldr	r3, [pc, #304]	; (8004a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d10f      	bne.n	8004996 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004976:	4b49      	ldr	r3, [pc, #292]	; (8004a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800497e:	2b00      	cmp	r3, #0
 8004980:	d109      	bne.n	8004996 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004986:	e006      	b.n	8004996 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	73fb      	strb	r3, [r7, #15]
      break;
 800498c:	e004      	b.n	8004998 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800498e:	bf00      	nop
 8004990:	e002      	b.n	8004998 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004992:	bf00      	nop
 8004994:	e000      	b.n	8004998 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004996:	bf00      	nop
    }

    if(status == HAL_OK)
 8004998:	7bfb      	ldrb	r3, [r7, #15]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d10d      	bne.n	80049ba <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800499e:	4b3f      	ldr	r3, [pc, #252]	; (8004a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 80049a0:	68db      	ldr	r3, [r3, #12]
 80049a2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6819      	ldr	r1, [r3, #0]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	3b01      	subs	r3, #1
 80049b0:	011b      	lsls	r3, r3, #4
 80049b2:	430b      	orrs	r3, r1
 80049b4:	4939      	ldr	r1, [pc, #228]	; (8004a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 80049b6:	4313      	orrs	r3, r2
 80049b8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80049ba:	7bfb      	ldrb	r3, [r7, #15]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d167      	bne.n	8004a90 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80049c0:	4b36      	ldr	r3, [pc, #216]	; (8004a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a35      	ldr	r2, [pc, #212]	; (8004a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 80049c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049cc:	f7fc fbbe 	bl	800114c <HAL_GetTick>
 80049d0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80049d2:	e009      	b.n	80049e8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80049d4:	f7fc fbba 	bl	800114c <HAL_GetTick>
 80049d8:	4602      	mov	r2, r0
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	1ad3      	subs	r3, r2, r3
 80049de:	2b02      	cmp	r3, #2
 80049e0:	d902      	bls.n	80049e8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80049e2:	2303      	movs	r3, #3
 80049e4:	73fb      	strb	r3, [r7, #15]
        break;
 80049e6:	e005      	b.n	80049f4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80049e8:	4b2c      	ldr	r3, [pc, #176]	; (8004a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d1ef      	bne.n	80049d4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80049f4:	7bfb      	ldrb	r3, [r7, #15]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d14a      	bne.n	8004a90 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d111      	bne.n	8004a24 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004a00:	4b26      	ldr	r3, [pc, #152]	; (8004a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a02:	695b      	ldr	r3, [r3, #20]
 8004a04:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004a08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	6892      	ldr	r2, [r2, #8]
 8004a10:	0211      	lsls	r1, r2, #8
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	68d2      	ldr	r2, [r2, #12]
 8004a16:	0912      	lsrs	r2, r2, #4
 8004a18:	0452      	lsls	r2, r2, #17
 8004a1a:	430a      	orrs	r2, r1
 8004a1c:	491f      	ldr	r1, [pc, #124]	; (8004a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	614b      	str	r3, [r1, #20]
 8004a22:	e011      	b.n	8004a48 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004a24:	4b1d      	ldr	r3, [pc, #116]	; (8004a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a26:	695b      	ldr	r3, [r3, #20]
 8004a28:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004a2c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	6892      	ldr	r2, [r2, #8]
 8004a34:	0211      	lsls	r1, r2, #8
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	6912      	ldr	r2, [r2, #16]
 8004a3a:	0852      	lsrs	r2, r2, #1
 8004a3c:	3a01      	subs	r2, #1
 8004a3e:	0652      	lsls	r2, r2, #25
 8004a40:	430a      	orrs	r2, r1
 8004a42:	4916      	ldr	r1, [pc, #88]	; (8004a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a44:	4313      	orrs	r3, r2
 8004a46:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004a48:	4b14      	ldr	r3, [pc, #80]	; (8004a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a13      	ldr	r2, [pc, #76]	; (8004a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a52:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a54:	f7fc fb7a 	bl	800114c <HAL_GetTick>
 8004a58:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004a5a:	e009      	b.n	8004a70 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004a5c:	f7fc fb76 	bl	800114c <HAL_GetTick>
 8004a60:	4602      	mov	r2, r0
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	2b02      	cmp	r3, #2
 8004a68:	d902      	bls.n	8004a70 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	73fb      	strb	r3, [r7, #15]
          break;
 8004a6e:	e005      	b.n	8004a7c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004a70:	4b0a      	ldr	r3, [pc, #40]	; (8004a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d0ef      	beq.n	8004a5c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004a7c:	7bfb      	ldrb	r3, [r7, #15]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d106      	bne.n	8004a90 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004a82:	4b06      	ldr	r3, [pc, #24]	; (8004a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a84:	695a      	ldr	r2, [r3, #20]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	695b      	ldr	r3, [r3, #20]
 8004a8a:	4904      	ldr	r1, [pc, #16]	; (8004a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3710      	adds	r7, #16
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}
 8004a9a:	bf00      	nop
 8004a9c:	40021000 	.word	0x40021000

08004aa0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b082      	sub	sp, #8
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d101      	bne.n	8004ab2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e049      	b.n	8004b46 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d106      	bne.n	8004acc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f7fc fa86 	bl	8000fd8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2202      	movs	r2, #2
 8004ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	3304      	adds	r3, #4
 8004adc:	4619      	mov	r1, r3
 8004ade:	4610      	mov	r0, r2
 8004ae0:	f000 f89e 	bl	8004c20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2201      	movs	r2, #1
 8004af0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2201      	movs	r2, #1
 8004af8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2201      	movs	r2, #1
 8004b00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2201      	movs	r2, #1
 8004b28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2201      	movs	r2, #1
 8004b38:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b44:	2300      	movs	r3, #0
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3708      	adds	r7, #8
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}
	...

08004b50 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b085      	sub	sp, #20
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d001      	beq.n	8004b68 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	e047      	b.n	8004bf8 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2202      	movs	r2, #2
 8004b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a23      	ldr	r2, [pc, #140]	; (8004c04 <HAL_TIM_Base_Start+0xb4>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d01d      	beq.n	8004bb6 <HAL_TIM_Base_Start+0x66>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b82:	d018      	beq.n	8004bb6 <HAL_TIM_Base_Start+0x66>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a1f      	ldr	r2, [pc, #124]	; (8004c08 <HAL_TIM_Base_Start+0xb8>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d013      	beq.n	8004bb6 <HAL_TIM_Base_Start+0x66>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a1e      	ldr	r2, [pc, #120]	; (8004c0c <HAL_TIM_Base_Start+0xbc>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d00e      	beq.n	8004bb6 <HAL_TIM_Base_Start+0x66>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a1c      	ldr	r2, [pc, #112]	; (8004c10 <HAL_TIM_Base_Start+0xc0>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d009      	beq.n	8004bb6 <HAL_TIM_Base_Start+0x66>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a1b      	ldr	r2, [pc, #108]	; (8004c14 <HAL_TIM_Base_Start+0xc4>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d004      	beq.n	8004bb6 <HAL_TIM_Base_Start+0x66>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a19      	ldr	r2, [pc, #100]	; (8004c18 <HAL_TIM_Base_Start+0xc8>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d115      	bne.n	8004be2 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	689a      	ldr	r2, [r3, #8]
 8004bbc:	4b17      	ldr	r3, [pc, #92]	; (8004c1c <HAL_TIM_Base_Start+0xcc>)
 8004bbe:	4013      	ands	r3, r2
 8004bc0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2b06      	cmp	r3, #6
 8004bc6:	d015      	beq.n	8004bf4 <HAL_TIM_Base_Start+0xa4>
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bce:	d011      	beq.n	8004bf4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f042 0201 	orr.w	r2, r2, #1
 8004bde:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004be0:	e008      	b.n	8004bf4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f042 0201 	orr.w	r2, r2, #1
 8004bf0:	601a      	str	r2, [r3, #0]
 8004bf2:	e000      	b.n	8004bf6 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bf4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004bf6:	2300      	movs	r3, #0
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3714      	adds	r7, #20
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr
 8004c04:	40012c00 	.word	0x40012c00
 8004c08:	40000400 	.word	0x40000400
 8004c0c:	40000800 	.word	0x40000800
 8004c10:	40000c00 	.word	0x40000c00
 8004c14:	40013400 	.word	0x40013400
 8004c18:	40014000 	.word	0x40014000
 8004c1c:	00010007 	.word	0x00010007

08004c20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b085      	sub	sp, #20
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	4a40      	ldr	r2, [pc, #256]	; (8004d34 <TIM_Base_SetConfig+0x114>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d013      	beq.n	8004c60 <TIM_Base_SetConfig+0x40>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c3e:	d00f      	beq.n	8004c60 <TIM_Base_SetConfig+0x40>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	4a3d      	ldr	r2, [pc, #244]	; (8004d38 <TIM_Base_SetConfig+0x118>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d00b      	beq.n	8004c60 <TIM_Base_SetConfig+0x40>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	4a3c      	ldr	r2, [pc, #240]	; (8004d3c <TIM_Base_SetConfig+0x11c>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d007      	beq.n	8004c60 <TIM_Base_SetConfig+0x40>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	4a3b      	ldr	r2, [pc, #236]	; (8004d40 <TIM_Base_SetConfig+0x120>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d003      	beq.n	8004c60 <TIM_Base_SetConfig+0x40>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	4a3a      	ldr	r2, [pc, #232]	; (8004d44 <TIM_Base_SetConfig+0x124>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d108      	bne.n	8004c72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	68fa      	ldr	r2, [r7, #12]
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	4a2f      	ldr	r2, [pc, #188]	; (8004d34 <TIM_Base_SetConfig+0x114>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d01f      	beq.n	8004cba <TIM_Base_SetConfig+0x9a>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c80:	d01b      	beq.n	8004cba <TIM_Base_SetConfig+0x9a>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	4a2c      	ldr	r2, [pc, #176]	; (8004d38 <TIM_Base_SetConfig+0x118>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d017      	beq.n	8004cba <TIM_Base_SetConfig+0x9a>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	4a2b      	ldr	r2, [pc, #172]	; (8004d3c <TIM_Base_SetConfig+0x11c>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d013      	beq.n	8004cba <TIM_Base_SetConfig+0x9a>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	4a2a      	ldr	r2, [pc, #168]	; (8004d40 <TIM_Base_SetConfig+0x120>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d00f      	beq.n	8004cba <TIM_Base_SetConfig+0x9a>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4a29      	ldr	r2, [pc, #164]	; (8004d44 <TIM_Base_SetConfig+0x124>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d00b      	beq.n	8004cba <TIM_Base_SetConfig+0x9a>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	4a28      	ldr	r2, [pc, #160]	; (8004d48 <TIM_Base_SetConfig+0x128>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d007      	beq.n	8004cba <TIM_Base_SetConfig+0x9a>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4a27      	ldr	r2, [pc, #156]	; (8004d4c <TIM_Base_SetConfig+0x12c>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d003      	beq.n	8004cba <TIM_Base_SetConfig+0x9a>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4a26      	ldr	r2, [pc, #152]	; (8004d50 <TIM_Base_SetConfig+0x130>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d108      	bne.n	8004ccc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	68db      	ldr	r3, [r3, #12]
 8004cc6:	68fa      	ldr	r2, [r7, #12]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	695b      	ldr	r3, [r3, #20]
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	68fa      	ldr	r2, [r7, #12]
 8004cde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	689a      	ldr	r2, [r3, #8]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	4a10      	ldr	r2, [pc, #64]	; (8004d34 <TIM_Base_SetConfig+0x114>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d00f      	beq.n	8004d18 <TIM_Base_SetConfig+0xf8>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	4a12      	ldr	r2, [pc, #72]	; (8004d44 <TIM_Base_SetConfig+0x124>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d00b      	beq.n	8004d18 <TIM_Base_SetConfig+0xf8>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	4a11      	ldr	r2, [pc, #68]	; (8004d48 <TIM_Base_SetConfig+0x128>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d007      	beq.n	8004d18 <TIM_Base_SetConfig+0xf8>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	4a10      	ldr	r2, [pc, #64]	; (8004d4c <TIM_Base_SetConfig+0x12c>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d003      	beq.n	8004d18 <TIM_Base_SetConfig+0xf8>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	4a0f      	ldr	r2, [pc, #60]	; (8004d50 <TIM_Base_SetConfig+0x130>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d103      	bne.n	8004d20 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	691a      	ldr	r2, [r3, #16]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	615a      	str	r2, [r3, #20]
}
 8004d26:	bf00      	nop
 8004d28:	3714      	adds	r7, #20
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr
 8004d32:	bf00      	nop
 8004d34:	40012c00 	.word	0x40012c00
 8004d38:	40000400 	.word	0x40000400
 8004d3c:	40000800 	.word	0x40000800
 8004d40:	40000c00 	.word	0x40000c00
 8004d44:	40013400 	.word	0x40013400
 8004d48:	40014000 	.word	0x40014000
 8004d4c:	40014400 	.word	0x40014400
 8004d50:	40014800 	.word	0x40014800

08004d54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b085      	sub	sp, #20
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d101      	bne.n	8004d6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d68:	2302      	movs	r3, #2
 8004d6a:	e068      	b.n	8004e3e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2202      	movs	r2, #2
 8004d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a2e      	ldr	r2, [pc, #184]	; (8004e4c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d004      	beq.n	8004da0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a2d      	ldr	r2, [pc, #180]	; (8004e50 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d108      	bne.n	8004db2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004da6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	68fa      	ldr	r2, [r7, #12]
 8004dae:	4313      	orrs	r3, r2
 8004db0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004db8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	68fa      	ldr	r2, [r7, #12]
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	68fa      	ldr	r2, [r7, #12]
 8004dca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a1e      	ldr	r2, [pc, #120]	; (8004e4c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d01d      	beq.n	8004e12 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dde:	d018      	beq.n	8004e12 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a1b      	ldr	r2, [pc, #108]	; (8004e54 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d013      	beq.n	8004e12 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a1a      	ldr	r2, [pc, #104]	; (8004e58 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d00e      	beq.n	8004e12 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a18      	ldr	r2, [pc, #96]	; (8004e5c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d009      	beq.n	8004e12 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a13      	ldr	r2, [pc, #76]	; (8004e50 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d004      	beq.n	8004e12 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a14      	ldr	r2, [pc, #80]	; (8004e60 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d10c      	bne.n	8004e2c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	68ba      	ldr	r2, [r7, #8]
 8004e20:	4313      	orrs	r3, r2
 8004e22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	68ba      	ldr	r2, [r7, #8]
 8004e2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2200      	movs	r2, #0
 8004e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e3c:	2300      	movs	r3, #0
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3714      	adds	r7, #20
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr
 8004e4a:	bf00      	nop
 8004e4c:	40012c00 	.word	0x40012c00
 8004e50:	40013400 	.word	0x40013400
 8004e54:	40000400 	.word	0x40000400
 8004e58:	40000800 	.word	0x40000800
 8004e5c:	40000c00 	.word	0x40000c00
 8004e60:	40014000 	.word	0x40014000

08004e64 <__libc_init_array>:
 8004e64:	b570      	push	{r4, r5, r6, lr}
 8004e66:	4d0d      	ldr	r5, [pc, #52]	; (8004e9c <__libc_init_array+0x38>)
 8004e68:	4c0d      	ldr	r4, [pc, #52]	; (8004ea0 <__libc_init_array+0x3c>)
 8004e6a:	1b64      	subs	r4, r4, r5
 8004e6c:	10a4      	asrs	r4, r4, #2
 8004e6e:	2600      	movs	r6, #0
 8004e70:	42a6      	cmp	r6, r4
 8004e72:	d109      	bne.n	8004e88 <__libc_init_array+0x24>
 8004e74:	4d0b      	ldr	r5, [pc, #44]	; (8004ea4 <__libc_init_array+0x40>)
 8004e76:	4c0c      	ldr	r4, [pc, #48]	; (8004ea8 <__libc_init_array+0x44>)
 8004e78:	f000 f820 	bl	8004ebc <_init>
 8004e7c:	1b64      	subs	r4, r4, r5
 8004e7e:	10a4      	asrs	r4, r4, #2
 8004e80:	2600      	movs	r6, #0
 8004e82:	42a6      	cmp	r6, r4
 8004e84:	d105      	bne.n	8004e92 <__libc_init_array+0x2e>
 8004e86:	bd70      	pop	{r4, r5, r6, pc}
 8004e88:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e8c:	4798      	blx	r3
 8004e8e:	3601      	adds	r6, #1
 8004e90:	e7ee      	b.n	8004e70 <__libc_init_array+0xc>
 8004e92:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e96:	4798      	blx	r3
 8004e98:	3601      	adds	r6, #1
 8004e9a:	e7f2      	b.n	8004e82 <__libc_init_array+0x1e>
 8004e9c:	08004f14 	.word	0x08004f14
 8004ea0:	08004f14 	.word	0x08004f14
 8004ea4:	08004f14 	.word	0x08004f14
 8004ea8:	08004f18 	.word	0x08004f18

08004eac <memset>:
 8004eac:	4402      	add	r2, r0
 8004eae:	4603      	mov	r3, r0
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d100      	bne.n	8004eb6 <memset+0xa>
 8004eb4:	4770      	bx	lr
 8004eb6:	f803 1b01 	strb.w	r1, [r3], #1
 8004eba:	e7f9      	b.n	8004eb0 <memset+0x4>

08004ebc <_init>:
 8004ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ebe:	bf00      	nop
 8004ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ec2:	bc08      	pop	{r3}
 8004ec4:	469e      	mov	lr, r3
 8004ec6:	4770      	bx	lr

08004ec8 <_fini>:
 8004ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eca:	bf00      	nop
 8004ecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ece:	bc08      	pop	{r3}
 8004ed0:	469e      	mov	lr, r3
 8004ed2:	4770      	bx	lr
