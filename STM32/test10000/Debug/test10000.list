
test10000.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051f4  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800537c  0800537c  0001537c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053bc  080053bc  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080053bc  080053bc  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080053bc  080053bc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053bc  080053bc  000153bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080053c0  080053c0  000153c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080053c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000041f4  20000010  080053d4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004204  080053d4  00024204  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013bb7  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d57  00000000  00000000  00033bf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001290  00000000  00000000  00036950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001128  00000000  00000000  00037be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000293bb  00000000  00000000  00038d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001530f  00000000  00000000  000620c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00103c66  00000000  00000000  000773d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017b038  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e90  00000000  00000000  0017b088  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005364 	.word	0x08005364

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08005364 	.word	0x08005364

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	; 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	; 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__aeabi_d2f>:
 8000794:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000798:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800079c:	bf24      	itt	cs
 800079e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007a2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007a6:	d90d      	bls.n	80007c4 <__aeabi_d2f+0x30>
 80007a8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007ac:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007b0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007b4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80007b8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007bc:	bf08      	it	eq
 80007be:	f020 0001 	biceq.w	r0, r0, #1
 80007c2:	4770      	bx	lr
 80007c4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80007c8:	d121      	bne.n	800080e <__aeabi_d2f+0x7a>
 80007ca:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80007ce:	bfbc      	itt	lt
 80007d0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80007d4:	4770      	bxlt	lr
 80007d6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007da:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007de:	f1c2 0218 	rsb	r2, r2, #24
 80007e2:	f1c2 0c20 	rsb	ip, r2, #32
 80007e6:	fa10 f30c 	lsls.w	r3, r0, ip
 80007ea:	fa20 f002 	lsr.w	r0, r0, r2
 80007ee:	bf18      	it	ne
 80007f0:	f040 0001 	orrne.w	r0, r0, #1
 80007f4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007f8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80007fc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000800:	ea40 000c 	orr.w	r0, r0, ip
 8000804:	fa23 f302 	lsr.w	r3, r3, r2
 8000808:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800080c:	e7cc      	b.n	80007a8 <__aeabi_d2f+0x14>
 800080e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000812:	d107      	bne.n	8000824 <__aeabi_d2f+0x90>
 8000814:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000818:	bf1e      	ittt	ne
 800081a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800081e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000822:	4770      	bxne	lr
 8000824:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000828:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800082c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop

08000834 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b08a      	sub	sp, #40	; 0x28
 8000838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800083a:	f107 031c 	add.w	r3, r7, #28
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]
 8000844:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000846:	1d3b      	adds	r3, r7, #4
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	605a      	str	r2, [r3, #4]
 800084e:	609a      	str	r2, [r3, #8]
 8000850:	60da      	str	r2, [r3, #12]
 8000852:	611a      	str	r2, [r3, #16]
 8000854:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000856:	4b30      	ldr	r3, [pc, #192]	; (8000918 <MX_ADC1_Init+0xe4>)
 8000858:	4a30      	ldr	r2, [pc, #192]	; (800091c <MX_ADC1_Init+0xe8>)
 800085a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800085c:	4b2e      	ldr	r3, [pc, #184]	; (8000918 <MX_ADC1_Init+0xe4>)
 800085e:	2200      	movs	r2, #0
 8000860:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000862:	4b2d      	ldr	r3, [pc, #180]	; (8000918 <MX_ADC1_Init+0xe4>)
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000868:	4b2b      	ldr	r3, [pc, #172]	; (8000918 <MX_ADC1_Init+0xe4>)
 800086a:	2200      	movs	r2, #0
 800086c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800086e:	4b2a      	ldr	r3, [pc, #168]	; (8000918 <MX_ADC1_Init+0xe4>)
 8000870:	2200      	movs	r2, #0
 8000872:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000874:	4b28      	ldr	r3, [pc, #160]	; (8000918 <MX_ADC1_Init+0xe4>)
 8000876:	2204      	movs	r2, #4
 8000878:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800087a:	4b27      	ldr	r3, [pc, #156]	; (8000918 <MX_ADC1_Init+0xe4>)
 800087c:	2200      	movs	r2, #0
 800087e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000880:	4b25      	ldr	r3, [pc, #148]	; (8000918 <MX_ADC1_Init+0xe4>)
 8000882:	2200      	movs	r2, #0
 8000884:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000886:	4b24      	ldr	r3, [pc, #144]	; (8000918 <MX_ADC1_Init+0xe4>)
 8000888:	2201      	movs	r2, #1
 800088a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800088c:	4b22      	ldr	r3, [pc, #136]	; (8000918 <MX_ADC1_Init+0xe4>)
 800088e:	2200      	movs	r2, #0
 8000890:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8000894:	4b20      	ldr	r3, [pc, #128]	; (8000918 <MX_ADC1_Init+0xe4>)
 8000896:	f44f 62e8 	mov.w	r2, #1856	; 0x740
 800089a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800089c:	4b1e      	ldr	r3, [pc, #120]	; (8000918 <MX_ADC1_Init+0xe4>)
 800089e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80008a4:	4b1c      	ldr	r3, [pc, #112]	; (8000918 <MX_ADC1_Init+0xe4>)
 80008a6:	2201      	movs	r2, #1
 80008a8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008ac:	4b1a      	ldr	r3, [pc, #104]	; (8000918 <MX_ADC1_Init+0xe4>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80008b2:	4b19      	ldr	r3, [pc, #100]	; (8000918 <MX_ADC1_Init+0xe4>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008ba:	4817      	ldr	r0, [pc, #92]	; (8000918 <MX_ADC1_Init+0xe4>)
 80008bc:	f000 ffaa 	bl	8001814 <HAL_ADC_Init>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 80008c6:	f000 fbd9 	bl	800107c <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80008ca:	2300      	movs	r3, #0
 80008cc:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80008ce:	f107 031c 	add.w	r3, r7, #28
 80008d2:	4619      	mov	r1, r3
 80008d4:	4810      	ldr	r0, [pc, #64]	; (8000918 <MX_ADC1_Init+0xe4>)
 80008d6:	f001 fec5 	bl	8002664 <HAL_ADCEx_MultiModeConfigChannel>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 80008e0:	f000 fbcc 	bl	800107c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80008e4:	4b0e      	ldr	r3, [pc, #56]	; (8000920 <MX_ADC1_Init+0xec>)
 80008e6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008e8:	2306      	movs	r3, #6
 80008ea:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80008ec:	2300      	movs	r3, #0
 80008ee:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008f0:	237f      	movs	r3, #127	; 0x7f
 80008f2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008f4:	2304      	movs	r3, #4
 80008f6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80008f8:	2300      	movs	r3, #0
 80008fa:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008fc:	1d3b      	adds	r3, r7, #4
 80008fe:	4619      	mov	r1, r3
 8000900:	4805      	ldr	r0, [pc, #20]	; (8000918 <MX_ADC1_Init+0xe4>)
 8000902:	f001 f9a3 	bl	8001c4c <HAL_ADC_ConfigChannel>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 800090c:	f000 fbb6 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000910:	bf00      	nop
 8000912:	3728      	adds	r7, #40	; 0x28
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	2000002c 	.word	0x2000002c
 800091c:	50040000 	.word	0x50040000
 8000920:	04300002 	.word	0x04300002

08000924 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b08a      	sub	sp, #40	; 0x28
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092c:	f107 0314 	add.w	r3, r7, #20
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	605a      	str	r2, [r3, #4]
 8000936:	609a      	str	r2, [r3, #8]
 8000938:	60da      	str	r2, [r3, #12]
 800093a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a2b      	ldr	r2, [pc, #172]	; (80009f0 <HAL_ADC_MspInit+0xcc>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d14f      	bne.n	80009e6 <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000946:	4b2b      	ldr	r3, [pc, #172]	; (80009f4 <HAL_ADC_MspInit+0xd0>)
 8000948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800094a:	4a2a      	ldr	r2, [pc, #168]	; (80009f4 <HAL_ADC_MspInit+0xd0>)
 800094c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000950:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000952:	4b28      	ldr	r3, [pc, #160]	; (80009f4 <HAL_ADC_MspInit+0xd0>)
 8000954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000956:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800095a:	613b      	str	r3, [r7, #16]
 800095c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800095e:	4b25      	ldr	r3, [pc, #148]	; (80009f4 <HAL_ADC_MspInit+0xd0>)
 8000960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000962:	4a24      	ldr	r2, [pc, #144]	; (80009f4 <HAL_ADC_MspInit+0xd0>)
 8000964:	f043 0304 	orr.w	r3, r3, #4
 8000968:	64d3      	str	r3, [r2, #76]	; 0x4c
 800096a:	4b22      	ldr	r3, [pc, #136]	; (80009f4 <HAL_ADC_MspInit+0xd0>)
 800096c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096e:	f003 0304 	and.w	r3, r3, #4
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000976:	2301      	movs	r3, #1
 8000978:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800097a:	230b      	movs	r3, #11
 800097c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000982:	f107 0314 	add.w	r3, r7, #20
 8000986:	4619      	mov	r1, r3
 8000988:	481b      	ldr	r0, [pc, #108]	; (80009f8 <HAL_ADC_MspInit+0xd4>)
 800098a:	f002 fcd5 	bl	8003338 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800098e:	4b1b      	ldr	r3, [pc, #108]	; (80009fc <HAL_ADC_MspInit+0xd8>)
 8000990:	4a1b      	ldr	r2, [pc, #108]	; (8000a00 <HAL_ADC_MspInit+0xdc>)
 8000992:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000994:	4b19      	ldr	r3, [pc, #100]	; (80009fc <HAL_ADC_MspInit+0xd8>)
 8000996:	2200      	movs	r2, #0
 8000998:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800099a:	4b18      	ldr	r3, [pc, #96]	; (80009fc <HAL_ADC_MspInit+0xd8>)
 800099c:	2200      	movs	r2, #0
 800099e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80009a0:	4b16      	ldr	r3, [pc, #88]	; (80009fc <HAL_ADC_MspInit+0xd8>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80009a6:	4b15      	ldr	r3, [pc, #84]	; (80009fc <HAL_ADC_MspInit+0xd8>)
 80009a8:	2280      	movs	r2, #128	; 0x80
 80009aa:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80009ac:	4b13      	ldr	r3, [pc, #76]	; (80009fc <HAL_ADC_MspInit+0xd8>)
 80009ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009b2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80009b4:	4b11      	ldr	r3, [pc, #68]	; (80009fc <HAL_ADC_MspInit+0xd8>)
 80009b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80009ba:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80009bc:	4b0f      	ldr	r3, [pc, #60]	; (80009fc <HAL_ADC_MspInit+0xd8>)
 80009be:	2220      	movs	r2, #32
 80009c0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80009c2:	4b0e      	ldr	r3, [pc, #56]	; (80009fc <HAL_ADC_MspInit+0xd8>)
 80009c4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009c8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80009ca:	480c      	ldr	r0, [pc, #48]	; (80009fc <HAL_ADC_MspInit+0xd8>)
 80009cc:	f002 fabc 	bl	8002f48 <HAL_DMA_Init>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 80009d6:	f000 fb51 	bl	800107c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	4a07      	ldr	r2, [pc, #28]	; (80009fc <HAL_ADC_MspInit+0xd8>)
 80009de:	64da      	str	r2, [r3, #76]	; 0x4c
 80009e0:	4a06      	ldr	r2, [pc, #24]	; (80009fc <HAL_ADC_MspInit+0xd8>)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80009e6:	bf00      	nop
 80009e8:	3728      	adds	r7, #40	; 0x28
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	50040000 	.word	0x50040000
 80009f4:	40021000 	.word	0x40021000
 80009f8:	48000800 	.word	0x48000800
 80009fc:	20000090 	.word	0x20000090
 8000a00:	40020008 	.word	0x40020008

08000a04 <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DMA_HandleTypeDef hdma_dac_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b08a      	sub	sp, #40	; 0x28
 8000a08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000a0a:	1d3b      	adds	r3, r7, #4
 8000a0c:	2224      	movs	r2, #36	; 0x24
 8000a0e:	2100      	movs	r1, #0
 8000a10:	4618      	mov	r0, r3
 8000a12:	f004 fc9f 	bl	8005354 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000a16:	4b12      	ldr	r3, [pc, #72]	; (8000a60 <MX_DAC1_Init+0x5c>)
 8000a18:	4a12      	ldr	r2, [pc, #72]	; (8000a64 <MX_DAC1_Init+0x60>)
 8000a1a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000a1c:	4810      	ldr	r0, [pc, #64]	; (8000a60 <MX_DAC1_Init+0x5c>)
 8000a1e:	f001 ffe2 	bl	80029e6 <HAL_DAC_Init>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000a28:	f000 fb28 	bl	800107c <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8000a30:	2304      	movs	r3, #4
 8000a32:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000a34:	2300      	movs	r3, #0
 8000a36:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000a40:	1d3b      	adds	r3, r7, #4
 8000a42:	2200      	movs	r2, #0
 8000a44:	4619      	mov	r1, r3
 8000a46:	4806      	ldr	r0, [pc, #24]	; (8000a60 <MX_DAC1_Init+0x5c>)
 8000a48:	f002 f8da 	bl	8002c00 <HAL_DAC_ConfigChannel>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000a52:	f000 fb13 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000a56:	bf00      	nop
 8000a58:	3728      	adds	r7, #40	; 0x28
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	200000d8 	.word	0x200000d8
 8000a64:	40007400 	.word	0x40007400

08000a68 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b08a      	sub	sp, #40	; 0x28
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a70:	f107 0314 	add.w	r3, r7, #20
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	605a      	str	r2, [r3, #4]
 8000a7a:	609a      	str	r2, [r3, #8]
 8000a7c:	60da      	str	r2, [r3, #12]
 8000a7e:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a2b      	ldr	r2, [pc, #172]	; (8000b34 <HAL_DAC_MspInit+0xcc>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d150      	bne.n	8000b2c <HAL_DAC_MspInit+0xc4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000a8a:	4b2b      	ldr	r3, [pc, #172]	; (8000b38 <HAL_DAC_MspInit+0xd0>)
 8000a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a8e:	4a2a      	ldr	r2, [pc, #168]	; (8000b38 <HAL_DAC_MspInit+0xd0>)
 8000a90:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000a94:	6593      	str	r3, [r2, #88]	; 0x58
 8000a96:	4b28      	ldr	r3, [pc, #160]	; (8000b38 <HAL_DAC_MspInit+0xd0>)
 8000a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a9a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000a9e:	613b      	str	r3, [r7, #16]
 8000aa0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa2:	4b25      	ldr	r3, [pc, #148]	; (8000b38 <HAL_DAC_MspInit+0xd0>)
 8000aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa6:	4a24      	ldr	r2, [pc, #144]	; (8000b38 <HAL_DAC_MspInit+0xd0>)
 8000aa8:	f043 0301 	orr.w	r3, r3, #1
 8000aac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aae:	4b22      	ldr	r3, [pc, #136]	; (8000b38 <HAL_DAC_MspInit+0xd0>)
 8000ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab2:	f003 0301 	and.w	r3, r3, #1
 8000ab6:	60fb      	str	r3, [r7, #12]
 8000ab8:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000aba:	2310      	movs	r3, #16
 8000abc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000abe:	2303      	movs	r3, #3
 8000ac0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac6:	f107 0314 	add.w	r3, r7, #20
 8000aca:	4619      	mov	r1, r3
 8000acc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ad0:	f002 fc32 	bl	8003338 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA2_Channel4;
 8000ad4:	4b19      	ldr	r3, [pc, #100]	; (8000b3c <HAL_DAC_MspInit+0xd4>)
 8000ad6:	4a1a      	ldr	r2, [pc, #104]	; (8000b40 <HAL_DAC_MspInit+0xd8>)
 8000ad8:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_3;
 8000ada:	4b18      	ldr	r3, [pc, #96]	; (8000b3c <HAL_DAC_MspInit+0xd4>)
 8000adc:	2203      	movs	r2, #3
 8000ade:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ae0:	4b16      	ldr	r3, [pc, #88]	; (8000b3c <HAL_DAC_MspInit+0xd4>)
 8000ae2:	2210      	movs	r2, #16
 8000ae4:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ae6:	4b15      	ldr	r3, [pc, #84]	; (8000b3c <HAL_DAC_MspInit+0xd4>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000aec:	4b13      	ldr	r3, [pc, #76]	; (8000b3c <HAL_DAC_MspInit+0xd4>)
 8000aee:	2280      	movs	r2, #128	; 0x80
 8000af0:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000af2:	4b12      	ldr	r3, [pc, #72]	; (8000b3c <HAL_DAC_MspInit+0xd4>)
 8000af4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000af8:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000afa:	4b10      	ldr	r3, [pc, #64]	; (8000b3c <HAL_DAC_MspInit+0xd4>)
 8000afc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b00:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 8000b02:	4b0e      	ldr	r3, [pc, #56]	; (8000b3c <HAL_DAC_MspInit+0xd4>)
 8000b04:	2220      	movs	r2, #32
 8000b06:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8000b08:	4b0c      	ldr	r3, [pc, #48]	; (8000b3c <HAL_DAC_MspInit+0xd4>)
 8000b0a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b0e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8000b10:	480a      	ldr	r0, [pc, #40]	; (8000b3c <HAL_DAC_MspInit+0xd4>)
 8000b12:	f002 fa19 	bl	8002f48 <HAL_DMA_Init>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <HAL_DAC_MspInit+0xb8>
    {
      Error_Handler();
 8000b1c:	f000 faae 	bl	800107c <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac_ch1);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	4a06      	ldr	r2, [pc, #24]	; (8000b3c <HAL_DAC_MspInit+0xd4>)
 8000b24:	609a      	str	r2, [r3, #8]
 8000b26:	4a05      	ldr	r2, [pc, #20]	; (8000b3c <HAL_DAC_MspInit+0xd4>)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000b2c:	bf00      	nop
 8000b2e:	3728      	adds	r7, #40	; 0x28
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	40007400 	.word	0x40007400
 8000b38:	40021000 	.word	0x40021000
 8000b3c:	200000ec 	.word	0x200000ec
 8000b40:	40020444 	.word	0x40020444

08000b44 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b4a:	4b16      	ldr	r3, [pc, #88]	; (8000ba4 <MX_DMA_Init+0x60>)
 8000b4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b4e:	4a15      	ldr	r2, [pc, #84]	; (8000ba4 <MX_DMA_Init+0x60>)
 8000b50:	f043 0301 	orr.w	r3, r3, #1
 8000b54:	6493      	str	r3, [r2, #72]	; 0x48
 8000b56:	4b13      	ldr	r3, [pc, #76]	; (8000ba4 <MX_DMA_Init+0x60>)
 8000b58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b5a:	f003 0301 	and.w	r3, r3, #1
 8000b5e:	607b      	str	r3, [r7, #4]
 8000b60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b62:	4b10      	ldr	r3, [pc, #64]	; (8000ba4 <MX_DMA_Init+0x60>)
 8000b64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b66:	4a0f      	ldr	r2, [pc, #60]	; (8000ba4 <MX_DMA_Init+0x60>)
 8000b68:	f043 0302 	orr.w	r3, r3, #2
 8000b6c:	6493      	str	r3, [r2, #72]	; 0x48
 8000b6e:	4b0d      	ldr	r3, [pc, #52]	; (8000ba4 <MX_DMA_Init+0x60>)
 8000b70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b72:	f003 0302 	and.w	r3, r3, #2
 8000b76:	603b      	str	r3, [r7, #0]
 8000b78:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	200b      	movs	r0, #11
 8000b80:	f001 fefb 	bl	800297a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000b84:	200b      	movs	r0, #11
 8000b86:	f001 ff14 	bl	80029b2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 0, 0);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	203b      	movs	r0, #59	; 0x3b
 8000b90:	f001 fef3 	bl	800297a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8000b94:	203b      	movs	r0, #59	; 0x3b
 8000b96:	f001 ff0c 	bl	80029b2 <HAL_NVIC_EnableIRQ>

}
 8000b9a:	bf00      	nop
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	40021000 	.word	0x40021000

08000ba8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b08a      	sub	sp, #40	; 0x28
 8000bac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bae:	f107 0314 	add.w	r3, r7, #20
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	605a      	str	r2, [r3, #4]
 8000bb8:	609a      	str	r2, [r3, #8]
 8000bba:	60da      	str	r2, [r3, #12]
 8000bbc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bbe:	4b2c      	ldr	r3, [pc, #176]	; (8000c70 <MX_GPIO_Init+0xc8>)
 8000bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc2:	4a2b      	ldr	r2, [pc, #172]	; (8000c70 <MX_GPIO_Init+0xc8>)
 8000bc4:	f043 0304 	orr.w	r3, r3, #4
 8000bc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bca:	4b29      	ldr	r3, [pc, #164]	; (8000c70 <MX_GPIO_Init+0xc8>)
 8000bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bce:	f003 0304 	and.w	r3, r3, #4
 8000bd2:	613b      	str	r3, [r7, #16]
 8000bd4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bd6:	4b26      	ldr	r3, [pc, #152]	; (8000c70 <MX_GPIO_Init+0xc8>)
 8000bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bda:	4a25      	ldr	r2, [pc, #148]	; (8000c70 <MX_GPIO_Init+0xc8>)
 8000bdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000be0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000be2:	4b23      	ldr	r3, [pc, #140]	; (8000c70 <MX_GPIO_Init+0xc8>)
 8000be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bea:	60fb      	str	r3, [r7, #12]
 8000bec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bee:	4b20      	ldr	r3, [pc, #128]	; (8000c70 <MX_GPIO_Init+0xc8>)
 8000bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bf2:	4a1f      	ldr	r2, [pc, #124]	; (8000c70 <MX_GPIO_Init+0xc8>)
 8000bf4:	f043 0301 	orr.w	r3, r3, #1
 8000bf8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bfa:	4b1d      	ldr	r3, [pc, #116]	; (8000c70 <MX_GPIO_Init+0xc8>)
 8000bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bfe:	f003 0301 	and.w	r3, r3, #1
 8000c02:	60bb      	str	r3, [r7, #8]
 8000c04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c06:	4b1a      	ldr	r3, [pc, #104]	; (8000c70 <MX_GPIO_Init+0xc8>)
 8000c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c0a:	4a19      	ldr	r2, [pc, #100]	; (8000c70 <MX_GPIO_Init+0xc8>)
 8000c0c:	f043 0302 	orr.w	r3, r3, #2
 8000c10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c12:	4b17      	ldr	r3, [pc, #92]	; (8000c70 <MX_GPIO_Init+0xc8>)
 8000c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c16:	f003 0302 	and.w	r3, r3, #2
 8000c1a:	607b      	str	r3, [r7, #4]
 8000c1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD4_Pin|LD3_Pin|LD2_Pin|LD5_Pin, GPIO_PIN_RESET);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	f240 412c 	movw	r1, #1068	; 0x42c
 8000c24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c28:	f002 fd30 	bl	800368c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c32:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c3c:	f107 0314 	add.w	r3, r7, #20
 8000c40:	4619      	mov	r1, r3
 8000c42:	480c      	ldr	r0, [pc, #48]	; (8000c74 <MX_GPIO_Init+0xcc>)
 8000c44:	f002 fb78 	bl	8003338 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD2_Pin|LD5_Pin;
 8000c48:	f240 432c 	movw	r3, #1068	; 0x42c
 8000c4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c56:	2300      	movs	r3, #0
 8000c58:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5a:	f107 0314 	add.w	r3, r7, #20
 8000c5e:	4619      	mov	r1, r3
 8000c60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c64:	f002 fb68 	bl	8003338 <HAL_GPIO_Init>

}
 8000c68:	bf00      	nop
 8000c6a:	3728      	adds	r7, #40	; 0x28
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	40021000 	.word	0x40021000
 8000c74:	48000800 	.word	0x48000800

08000c78 <HAL_ADC_ConvHalfCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]

InBufPtr = &ADC_val[0];
 8000c80:	4b0e      	ldr	r3, [pc, #56]	; (8000cbc <HAL_ADC_ConvHalfCpltCallback+0x44>)
 8000c82:	4a0f      	ldr	r2, [pc, #60]	; (8000cc0 <HAL_ADC_ConvHalfCpltCallback+0x48>)
 8000c84:	601a      	str	r2, [r3, #0]
OutBufPtr = &DAC_val[DataSize];
 8000c86:	4b0f      	ldr	r3, [pc, #60]	; (8000cc4 <HAL_ADC_ConvHalfCpltCallback+0x4c>)
 8000c88:	4a0f      	ldr	r2, [pc, #60]	; (8000cc8 <HAL_ADC_ConvHalfCpltCallback+0x50>)
 8000c8a:	601a      	str	r2, [r3, #0]
HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	2120      	movs	r1, #32
 8000c90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c94:	f002 fcfa 	bl	800368c <HAL_GPIO_WritePin>
Read_Ready = 1;
 8000c98:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <HAL_ADC_ConvHalfCpltCallback+0x54>)
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	601a      	str	r2, [r3, #0]
if(DSP_Ready == 0)HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_SET);
 8000c9e:	4b0c      	ldr	r3, [pc, #48]	; (8000cd0 <HAL_ADC_ConvHalfCpltCallback+0x58>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d106      	bne.n	8000cb4 <HAL_ADC_ConvHalfCpltCallback+0x3c>
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cb0:	f002 fcec 	bl	800368c <HAL_GPIO_WritePin>
}
 8000cb4:	bf00      	nop
 8000cb6:	3708      	adds	r7, #8
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	20004134 	.word	0x20004134
 8000cc0:	20000134 	.word	0x20000134
 8000cc4:	20004138 	.word	0x20004138
 8000cc8:	20003134 	.word	0x20003134
 8000ccc:	2000413c 	.word	0x2000413c
 8000cd0:	20004140 	.word	0x20004140

08000cd4 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
InBufPtr = &ADC_val[DataSize];
 8000cdc:	4b0e      	ldr	r3, [pc, #56]	; (8000d18 <HAL_ADC_ConvCpltCallback+0x44>)
 8000cde:	4a0f      	ldr	r2, [pc, #60]	; (8000d1c <HAL_ADC_ConvCpltCallback+0x48>)
 8000ce0:	601a      	str	r2, [r3, #0]
OutBufPtr = &DAC_val[0];
 8000ce2:	4b0f      	ldr	r3, [pc, #60]	; (8000d20 <HAL_ADC_ConvCpltCallback+0x4c>)
 8000ce4:	4a0f      	ldr	r2, [pc, #60]	; (8000d24 <HAL_ADC_ConvCpltCallback+0x50>)
 8000ce6:	601a      	str	r2, [r3, #0]
HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ce8:	2200      	movs	r2, #0
 8000cea:	2120      	movs	r1, #32
 8000cec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cf0:	f002 fccc 	bl	800368c <HAL_GPIO_WritePin>
if(DSP_Ready == 0)HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_SET);
 8000cf4:	4b0c      	ldr	r3, [pc, #48]	; (8000d28 <HAL_ADC_ConvCpltCallback+0x54>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d106      	bne.n	8000d0a <HAL_ADC_ConvCpltCallback+0x36>
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d06:	f002 fcc1 	bl	800368c <HAL_GPIO_WritePin>
Read_Ready = 1;
 8000d0a:	4b08      	ldr	r3, [pc, #32]	; (8000d2c <HAL_ADC_ConvCpltCallback+0x58>)
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	601a      	str	r2, [r3, #0]

}
 8000d10:	bf00      	nop
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	20004134 	.word	0x20004134
 8000d1c:	20001134 	.word	0x20001134
 8000d20:	20004138 	.word	0x20004138
 8000d24:	20002134 	.word	0x20002134
 8000d28:	20004140 	.word	0x20004140
 8000d2c:	2000413c 	.word	0x2000413c

08000d30 <processDSPstraight>:

void processDSPstraight(){
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
	for(int n=0; n<DataSize; n++){
 8000d36:	2300      	movs	r3, #0
 8000d38:	607b      	str	r3, [r7, #4]
 8000d3a:	e00e      	b.n	8000d5a <processDSPstraight+0x2a>

		OutBufPtr[n]=InBufPtr[n];
 8000d3c:	4b0c      	ldr	r3, [pc, #48]	; (8000d70 <processDSPstraight+0x40>)
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	009b      	lsls	r3, r3, #2
 8000d44:	441a      	add	r2, r3
 8000d46:	4b0b      	ldr	r3, [pc, #44]	; (8000d74 <processDSPstraight+0x44>)
 8000d48:	6819      	ldr	r1, [r3, #0]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	009b      	lsls	r3, r3, #2
 8000d4e:	440b      	add	r3, r1
 8000d50:	6812      	ldr	r2, [r2, #0]
 8000d52:	601a      	str	r2, [r3, #0]
	for(int n=0; n<DataSize; n++){
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	3301      	adds	r3, #1
 8000d58:	607b      	str	r3, [r7, #4]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d60:	dbec      	blt.n	8000d3c <processDSPstraight+0xc>
	}

}
 8000d62:	bf00      	nop
 8000d64:	bf00      	nop
 8000d66:	370c      	adds	r7, #12
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr
 8000d70:	20004134 	.word	0x20004134
 8000d74:	20004138 	.word	0x20004138

08000d78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d7e:	f000 fad3 	bl	8001328 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d82:	f000 f8f5 	bl	8000f70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d86:	f7ff ff0f 	bl	8000ba8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d8a:	f7ff fedb 	bl	8000b44 <MX_DMA_Init>
  MX_TIM6_Init();
 8000d8e:	f000 f9f9 	bl	8001184 <MX_TIM6_Init>
  MX_ADC1_Init();
 8000d92:	f7ff fd4f 	bl	8000834 <MX_ADC1_Init>
  MX_DAC1_Init();
 8000d96:	f7ff fe35 	bl	8000a04 <MX_DAC1_Init>
  MX_TIM7_Init();
 8000d9a:	f000 fa29 	bl	80011f0 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  cf0_lim = (int)(time*l_CB0);
 8000d9e:	4b5c      	ldr	r3, [pc, #368]	; (8000f10 <main+0x198>)
 8000da0:	edd3 7a00 	vldr	s15, [r3]
 8000da4:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8000f14 <main+0x19c>
 8000da8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000dac:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000db0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000db4:	ee17 2a90 	vmov	r2, s15
 8000db8:	4b57      	ldr	r3, [pc, #348]	; (8000f18 <main+0x1a0>)
 8000dba:	601a      	str	r2, [r3, #0]
  cf1_lim = (int)(time*l_CB1);
 8000dbc:	4b54      	ldr	r3, [pc, #336]	; (8000f10 <main+0x198>)
 8000dbe:	edd3 7a00 	vldr	s15, [r3]
 8000dc2:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8000f1c <main+0x1a4>
 8000dc6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000dca:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000dce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000dd2:	ee17 2a90 	vmov	r2, s15
 8000dd6:	4b52      	ldr	r3, [pc, #328]	; (8000f20 <main+0x1a8>)
 8000dd8:	601a      	str	r2, [r3, #0]
  cf2_lim = (int)(time*l_CB2);
 8000dda:	4b4d      	ldr	r3, [pc, #308]	; (8000f10 <main+0x198>)
 8000ddc:	edd3 7a00 	vldr	s15, [r3]
 8000de0:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8000f24 <main+0x1ac>
 8000de4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000de8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000dec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000df0:	ee17 2a90 	vmov	r2, s15
 8000df4:	4b4c      	ldr	r3, [pc, #304]	; (8000f28 <main+0x1b0>)
 8000df6:	601a      	str	r2, [r3, #0]
  cf3_lim = (int)(time*l_CB3);
 8000df8:	4b45      	ldr	r3, [pc, #276]	; (8000f10 <main+0x198>)
 8000dfa:	edd3 7a00 	vldr	s15, [r3]
 8000dfe:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8000f2c <main+0x1b4>
 8000e02:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e06:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000e0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e0e:	ee17 2a90 	vmov	r2, s15
 8000e12:	4b47      	ldr	r3, [pc, #284]	; (8000f30 <main+0x1b8>)
 8000e14:	601a      	str	r2, [r3, #0]
  ap0_lim = (int)(time*l_AP0);
 8000e16:	4b3e      	ldr	r3, [pc, #248]	; (8000f10 <main+0x198>)
 8000e18:	edd3 7a00 	vldr	s15, [r3]
 8000e1c:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8000f34 <main+0x1bc>
 8000e20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e24:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000e28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e2c:	ee17 2a90 	vmov	r2, s15
 8000e30:	4b41      	ldr	r3, [pc, #260]	; (8000f38 <main+0x1c0>)
 8000e32:	601a      	str	r2, [r3, #0]
  ap1_lim = (int)(time*l_AP1);
 8000e34:	4b36      	ldr	r3, [pc, #216]	; (8000f10 <main+0x198>)
 8000e36:	edd3 7a00 	vldr	s15, [r3]
 8000e3a:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8000f3c <main+0x1c4>
 8000e3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e42:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000e46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e4a:	ee17 2a90 	vmov	r2, s15
 8000e4e:	4b3c      	ldr	r3, [pc, #240]	; (8000f40 <main+0x1c8>)
 8000e50:	601a      	str	r2, [r3, #0]
  ap2_lim = (int)(time*l_AP2);
 8000e52:	4b2f      	ldr	r3, [pc, #188]	; (8000f10 <main+0x198>)
 8000e54:	edd3 7a00 	vldr	s15, [r3]
 8000e58:	eeb3 7a07 	vmov.f32	s14, #55	; 0x41b80000  23.0
 8000e5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e60:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000e64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e68:	ee17 2a90 	vmov	r2, s15
 8000e6c:	4b35      	ldr	r3, [pc, #212]	; (8000f44 <main+0x1cc>)
 8000e6e:	601a      	str	r2, [r3, #0]


  HAL_TIM_Base_Start(&htim6);
 8000e70:	4835      	ldr	r0, [pc, #212]	; (8000f48 <main+0x1d0>)
 8000e72:	f003 ff51 	bl	8004d18 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim7);
 8000e76:	4835      	ldr	r0, [pc, #212]	; (8000f4c <main+0x1d4>)
 8000e78:	f003 ff4e 	bl	8004d18 <HAL_TIM_Base_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC_val, FullBufSize);
 8000e7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e80:	4933      	ldr	r1, [pc, #204]	; (8000f50 <main+0x1d8>)
 8000e82:	4834      	ldr	r0, [pc, #208]	; (8000f54 <main+0x1dc>)
 8000e84:	f000 fe1c 	bl	8001ac0 <HAL_ADC_Start_DMA>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)DAC_val, FullBufSize, DAC_ALIGN_12B_R);
 8000e88:	2300      	movs	r3, #0
 8000e8a:	9300      	str	r3, [sp, #0]
 8000e8c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e90:	4a31      	ldr	r2, [pc, #196]	; (8000f58 <main+0x1e0>)
 8000e92:	2100      	movs	r1, #0
 8000e94:	4831      	ldr	r0, [pc, #196]	; (8000f5c <main+0x1e4>)
 8000e96:	f001 fdc9 	bl	8002a2c <HAL_DAC_Start_DMA>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  if(Read_Ready == 1){;
 8000e9a:	4b31      	ldr	r3, [pc, #196]	; (8000f60 <main+0x1e8>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	2b01      	cmp	r3, #1
 8000ea0:	d1fb      	bne.n	8000e9a <main+0x122>
	  __HAL_TIM_SET_COUNTER(&htim7,12);
 8000ea2:	4b2a      	ldr	r3, [pc, #168]	; (8000f4c <main+0x1d4>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	220c      	movs	r2, #12
 8000ea8:	625a      	str	r2, [r3, #36]	; 0x24


	  processDSPstraight();
 8000eaa:	f7ff ff41 	bl	8000d30 <processDSPstraight>
	  //processDSP();


	  count=__HAL_TIM_GET_COUNTER(&htim7);
 8000eae:	4b27      	ldr	r3, [pc, #156]	; (8000f4c <main+0x1d4>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	4b2b      	ldr	r3, [pc, #172]	; (8000f64 <main+0x1ec>)
 8000eb8:	601a      	str	r2, [r3, #0]
	  count2 =(float)(count)*1e-5;
 8000eba:	4b2a      	ldr	r3, [pc, #168]	; (8000f64 <main+0x1ec>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	ee07 3a90 	vmov	s15, r3
 8000ec2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ec6:	ee17 0a90 	vmov	r0, s15
 8000eca:	f7ff fc0b 	bl	80006e4 <__aeabi_f2d>
 8000ece:	a30e      	add	r3, pc, #56	; (adr r3, 8000f08 <main+0x190>)
 8000ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ed4:	f7ff f978 	bl	80001c8 <__aeabi_dmul>
 8000ed8:	4602      	mov	r2, r0
 8000eda:	460b      	mov	r3, r1
 8000edc:	4610      	mov	r0, r2
 8000ede:	4619      	mov	r1, r3
 8000ee0:	f7ff fc58 	bl	8000794 <__aeabi_d2f>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	4a20      	ldr	r2, [pc, #128]	; (8000f68 <main+0x1f0>)
 8000ee8:	6013      	str	r3, [r2, #0]
	  Read_Ready = 0;
 8000eea:	4b1d      	ldr	r3, [pc, #116]	; (8000f60 <main+0x1e8>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]

	  DSP_Ready = 1;
 8000ef0:	4b1e      	ldr	r3, [pc, #120]	; (8000f6c <main+0x1f4>)
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET);
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000efc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f00:	f002 fbc4 	bl	800368c <HAL_GPIO_WritePin>
	  if(Read_Ready == 1){;
 8000f04:	e7c9      	b.n	8000e9a <main+0x122>
 8000f06:	bf00      	nop
 8000f08:	88e368f1 	.word	0x88e368f1
 8000f0c:	3ee4f8b5 	.word	0x3ee4f8b5
 8000f10:	20000000 	.word	0x20000000
 8000f14:	44d84000 	.word	0x44d84000
 8000f18:	2000414c 	.word	0x2000414c
 8000f1c:	44bac000 	.word	0x44bac000
 8000f20:	20004150 	.word	0x20004150
 8000f24:	44f2a000 	.word	0x44f2a000
 8000f28:	20004154 	.word	0x20004154
 8000f2c:	4506c000 	.word	0x4506c000
 8000f30:	20004158 	.word	0x20004158
 8000f34:	43700000 	.word	0x43700000
 8000f38:	2000415c 	.word	0x2000415c
 8000f3c:	42a20000 	.word	0x42a20000
 8000f40:	20004160 	.word	0x20004160
 8000f44:	20004164 	.word	0x20004164
 8000f48:	20004168 	.word	0x20004168
 8000f4c:	200041b4 	.word	0x200041b4
 8000f50:	20000134 	.word	0x20000134
 8000f54:	2000002c 	.word	0x2000002c
 8000f58:	20002134 	.word	0x20002134
 8000f5c:	200000d8 	.word	0x200000d8
 8000f60:	2000413c 	.word	0x2000413c
 8000f64:	20004144 	.word	0x20004144
 8000f68:	20004148 	.word	0x20004148
 8000f6c:	20004140 	.word	0x20004140

08000f70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b0b8      	sub	sp, #224	; 0xe0
 8000f74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f76:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f7a:	2244      	movs	r2, #68	; 0x44
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f004 f9e8 	bl	8005354 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f84:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
 8000f8e:	609a      	str	r2, [r3, #8]
 8000f90:	60da      	str	r2, [r3, #12]
 8000f92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f94:	463b      	mov	r3, r7
 8000f96:	2288      	movs	r2, #136	; 0x88
 8000f98:	2100      	movs	r1, #0
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f004 f9da 	bl	8005354 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fa6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000faa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fae:	2310      	movs	r3, #16
 8000fb0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 9;
 8000fc6:	2309      	movs	r3, #9
 8000fc8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000fcc:	2307      	movs	r3, #7
 8000fce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fde:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f002 fbce 	bl	8003784 <HAL_RCC_OscConfig>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000fee:	f000 f845 	bl	800107c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ff2:	230f      	movs	r3, #15
 8000ff4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ff8:	2303      	movs	r3, #3
 8000ffa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ffe:	2300      	movs	r3, #0
 8001000:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001004:	2300      	movs	r3, #0
 8001006:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800100a:	2300      	movs	r3, #0
 800100c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001010:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001014:	2104      	movs	r1, #4
 8001016:	4618      	mov	r0, r3
 8001018:	f002 ff9c 	bl	8003f54 <HAL_RCC_ClockConfig>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001022:	f000 f82b 	bl	800107c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001026:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800102a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800102c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001030:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001032:	2302      	movs	r3, #2
 8001034:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001036:	2301      	movs	r3, #1
 8001038:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800103a:	2308      	movs	r3, #8
 800103c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800103e:	2307      	movs	r3, #7
 8001040:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001042:	2302      	movs	r3, #2
 8001044:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001046:	2302      	movs	r3, #2
 8001048:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800104a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800104e:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001050:	463b      	mov	r3, r7
 8001052:	4618      	mov	r0, r3
 8001054:	f003 f94c 	bl	80042f0 <HAL_RCCEx_PeriphCLKConfig>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800105e:	f000 f80d 	bl	800107c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001062:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001066:	f002 fb37 	bl	80036d8 <HAL_PWREx_ControlVoltageScaling>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <SystemClock_Config+0x104>
  {
    Error_Handler();
 8001070:	f000 f804 	bl	800107c <Error_Handler>
  }
}
 8001074:	bf00      	nop
 8001076:	37e0      	adds	r7, #224	; 0xe0
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}

0800107c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001080:	b672      	cpsid	i
}
 8001082:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001084:	e7fe      	b.n	8001084 <Error_Handler+0x8>
	...

08001088 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800108e:	4b0f      	ldr	r3, [pc, #60]	; (80010cc <HAL_MspInit+0x44>)
 8001090:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001092:	4a0e      	ldr	r2, [pc, #56]	; (80010cc <HAL_MspInit+0x44>)
 8001094:	f043 0301 	orr.w	r3, r3, #1
 8001098:	6613      	str	r3, [r2, #96]	; 0x60
 800109a:	4b0c      	ldr	r3, [pc, #48]	; (80010cc <HAL_MspInit+0x44>)
 800109c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	607b      	str	r3, [r7, #4]
 80010a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010a6:	4b09      	ldr	r3, [pc, #36]	; (80010cc <HAL_MspInit+0x44>)
 80010a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010aa:	4a08      	ldr	r2, [pc, #32]	; (80010cc <HAL_MspInit+0x44>)
 80010ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010b0:	6593      	str	r3, [r2, #88]	; 0x58
 80010b2:	4b06      	ldr	r3, [pc, #24]	; (80010cc <HAL_MspInit+0x44>)
 80010b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ba:	603b      	str	r3, [r7, #0]
 80010bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010be:	bf00      	nop
 80010c0:	370c      	adds	r7, #12
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	40021000 	.word	0x40021000

080010d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010d4:	e7fe      	b.n	80010d4 <NMI_Handler+0x4>

080010d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010d6:	b480      	push	{r7}
 80010d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010da:	e7fe      	b.n	80010da <HardFault_Handler+0x4>

080010dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010e0:	e7fe      	b.n	80010e0 <MemManage_Handler+0x4>

080010e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010e2:	b480      	push	{r7}
 80010e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010e6:	e7fe      	b.n	80010e6 <BusFault_Handler+0x4>

080010e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010ec:	e7fe      	b.n	80010ec <UsageFault_Handler+0x4>

080010ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010ee:	b480      	push	{r7}
 80010f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010f2:	bf00      	nop
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr

080010fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001100:	bf00      	nop
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr

0800110a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800110a:	b480      	push	{r7}
 800110c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800110e:	bf00      	nop
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800111c:	f000 f960 	bl	80013e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001120:	bf00      	nop
 8001122:	bd80      	pop	{r7, pc}

08001124 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001128:	4802      	ldr	r0, [pc, #8]	; (8001134 <DMA1_Channel1_IRQHandler+0x10>)
 800112a:	f002 f825 	bl	8003178 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	20000090 	.word	0x20000090

08001138 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800113c:	4802      	ldr	r0, [pc, #8]	; (8001148 <TIM7_IRQHandler+0x10>)
 800113e:	f003 fe53 	bl	8004de8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001142:	bf00      	nop
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	200041b4 	.word	0x200041b4

0800114c <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8001150:	4802      	ldr	r0, [pc, #8]	; (800115c <DMA2_Channel4_IRQHandler+0x10>)
 8001152:	f002 f811 	bl	8003178 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 8001156:	bf00      	nop
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	200000ec 	.word	0x200000ec

08001160 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001164:	4b06      	ldr	r3, [pc, #24]	; (8001180 <SystemInit+0x20>)
 8001166:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800116a:	4a05      	ldr	r2, [pc, #20]	; (8001180 <SystemInit+0x20>)
 800116c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001170:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001174:	bf00      	nop
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	e000ed00 	.word	0xe000ed00

08001184 <MX_TIM6_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800118a:	1d3b      	adds	r3, r7, #4
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
 8001192:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001194:	4b14      	ldr	r3, [pc, #80]	; (80011e8 <MX_TIM6_Init+0x64>)
 8001196:	4a15      	ldr	r2, [pc, #84]	; (80011ec <MX_TIM6_Init+0x68>)
 8001198:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 800119a:	4b13      	ldr	r3, [pc, #76]	; (80011e8 <MX_TIM6_Init+0x64>)
 800119c:	2200      	movs	r2, #0
 800119e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011a0:	4b11      	ldr	r3, [pc, #68]	; (80011e8 <MX_TIM6_Init+0x64>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1499;
 80011a6:	4b10      	ldr	r3, [pc, #64]	; (80011e8 <MX_TIM6_Init+0x64>)
 80011a8:	f240 52db 	movw	r2, #1499	; 0x5db
 80011ac:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ae:	4b0e      	ldr	r3, [pc, #56]	; (80011e8 <MX_TIM6_Init+0x64>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80011b4:	480c      	ldr	r0, [pc, #48]	; (80011e8 <MX_TIM6_Init+0x64>)
 80011b6:	f003 fd57 	bl	8004c68 <HAL_TIM_Base_Init>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80011c0:	f7ff ff5c 	bl	800107c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80011c4:	2320      	movs	r3, #32
 80011c6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011c8:	2300      	movs	r3, #0
 80011ca:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80011cc:	1d3b      	adds	r3, r7, #4
 80011ce:	4619      	mov	r1, r3
 80011d0:	4805      	ldr	r0, [pc, #20]	; (80011e8 <MX_TIM6_Init+0x64>)
 80011d2:	f003 fff5 	bl	80051c0 <HAL_TIMEx_MasterConfigSynchronization>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80011dc:	f7ff ff4e 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80011e0:	bf00      	nop
 80011e2:	3710      	adds	r7, #16
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	20004168 	.word	0x20004168
 80011ec:	40001000 	.word	0x40001000

080011f0 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011f6:	1d3b      	adds	r3, r7, #4
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	605a      	str	r2, [r3, #4]
 80011fe:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001200:	4b15      	ldr	r3, [pc, #84]	; (8001258 <MX_TIM7_Init+0x68>)
 8001202:	4a16      	ldr	r2, [pc, #88]	; (800125c <MX_TIM7_Init+0x6c>)
 8001204:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 719;
 8001206:	4b14      	ldr	r3, [pc, #80]	; (8001258 <MX_TIM7_Init+0x68>)
 8001208:	f240 22cf 	movw	r2, #719	; 0x2cf
 800120c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800120e:	4b12      	ldr	r3, [pc, #72]	; (8001258 <MX_TIM7_Init+0x68>)
 8001210:	2200      	movs	r2, #0
 8001212:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8001214:	4b10      	ldr	r3, [pc, #64]	; (8001258 <MX_TIM7_Init+0x68>)
 8001216:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800121a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800121c:	4b0e      	ldr	r3, [pc, #56]	; (8001258 <MX_TIM7_Init+0x68>)
 800121e:	2200      	movs	r2, #0
 8001220:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001222:	480d      	ldr	r0, [pc, #52]	; (8001258 <MX_TIM7_Init+0x68>)
 8001224:	f003 fd20 	bl	8004c68 <HAL_TIM_Base_Init>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 800122e:	f7ff ff25 	bl	800107c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001232:	2300      	movs	r3, #0
 8001234:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001236:	2300      	movs	r3, #0
 8001238:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800123a:	1d3b      	adds	r3, r7, #4
 800123c:	4619      	mov	r1, r3
 800123e:	4806      	ldr	r0, [pc, #24]	; (8001258 <MX_TIM7_Init+0x68>)
 8001240:	f003 ffbe 	bl	80051c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 800124a:	f7ff ff17 	bl	800107c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800124e:	bf00      	nop
 8001250:	3710      	adds	r7, #16
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	200041b4 	.word	0x200041b4
 800125c:	40001400 	.word	0x40001400

08001260 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a16      	ldr	r2, [pc, #88]	; (80012c8 <HAL_TIM_Base_MspInit+0x68>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d10c      	bne.n	800128c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001272:	4b16      	ldr	r3, [pc, #88]	; (80012cc <HAL_TIM_Base_MspInit+0x6c>)
 8001274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001276:	4a15      	ldr	r2, [pc, #84]	; (80012cc <HAL_TIM_Base_MspInit+0x6c>)
 8001278:	f043 0310 	orr.w	r3, r3, #16
 800127c:	6593      	str	r3, [r2, #88]	; 0x58
 800127e:	4b13      	ldr	r3, [pc, #76]	; (80012cc <HAL_TIM_Base_MspInit+0x6c>)
 8001280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001282:	f003 0310 	and.w	r3, r3, #16
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800128a:	e018      	b.n	80012be <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM7)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a0f      	ldr	r2, [pc, #60]	; (80012d0 <HAL_TIM_Base_MspInit+0x70>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d113      	bne.n	80012be <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001296:	4b0d      	ldr	r3, [pc, #52]	; (80012cc <HAL_TIM_Base_MspInit+0x6c>)
 8001298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800129a:	4a0c      	ldr	r2, [pc, #48]	; (80012cc <HAL_TIM_Base_MspInit+0x6c>)
 800129c:	f043 0320 	orr.w	r3, r3, #32
 80012a0:	6593      	str	r3, [r2, #88]	; 0x58
 80012a2:	4b0a      	ldr	r3, [pc, #40]	; (80012cc <HAL_TIM_Base_MspInit+0x6c>)
 80012a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012a6:	f003 0320 	and.w	r3, r3, #32
 80012aa:	60bb      	str	r3, [r7, #8]
 80012ac:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80012ae:	2200      	movs	r2, #0
 80012b0:	2100      	movs	r1, #0
 80012b2:	2037      	movs	r0, #55	; 0x37
 80012b4:	f001 fb61 	bl	800297a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80012b8:	2037      	movs	r0, #55	; 0x37
 80012ba:	f001 fb7a 	bl	80029b2 <HAL_NVIC_EnableIRQ>
}
 80012be:	bf00      	nop
 80012c0:	3710      	adds	r7, #16
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	40001000 	.word	0x40001000
 80012cc:	40021000 	.word	0x40021000
 80012d0:	40001400 	.word	0x40001400

080012d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80012d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800130c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80012d8:	f7ff ff42 	bl	8001160 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012dc:	480c      	ldr	r0, [pc, #48]	; (8001310 <LoopForever+0x6>)
  ldr r1, =_edata
 80012de:	490d      	ldr	r1, [pc, #52]	; (8001314 <LoopForever+0xa>)
  ldr r2, =_sidata
 80012e0:	4a0d      	ldr	r2, [pc, #52]	; (8001318 <LoopForever+0xe>)
  movs r3, #0
 80012e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012e4:	e002      	b.n	80012ec <LoopCopyDataInit>

080012e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ea:	3304      	adds	r3, #4

080012ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012f0:	d3f9      	bcc.n	80012e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012f2:	4a0a      	ldr	r2, [pc, #40]	; (800131c <LoopForever+0x12>)
  ldr r4, =_ebss
 80012f4:	4c0a      	ldr	r4, [pc, #40]	; (8001320 <LoopForever+0x16>)
  movs r3, #0
 80012f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012f8:	e001      	b.n	80012fe <LoopFillZerobss>

080012fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012fc:	3204      	adds	r2, #4

080012fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001300:	d3fb      	bcc.n	80012fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001302:	f004 f803 	bl	800530c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001306:	f7ff fd37 	bl	8000d78 <main>

0800130a <LoopForever>:

LoopForever:
    b LoopForever
 800130a:	e7fe      	b.n	800130a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800130c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001310:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001314:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001318:	080053c4 	.word	0x080053c4
  ldr r2, =_sbss
 800131c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001320:	20004204 	.word	0x20004204

08001324 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001324:	e7fe      	b.n	8001324 <ADC1_2_IRQHandler>
	...

08001328 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800132e:	2300      	movs	r3, #0
 8001330:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001332:	4b0c      	ldr	r3, [pc, #48]	; (8001364 <HAL_Init+0x3c>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a0b      	ldr	r2, [pc, #44]	; (8001364 <HAL_Init+0x3c>)
 8001338:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800133c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800133e:	2003      	movs	r0, #3
 8001340:	f001 fb10 	bl	8002964 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001344:	2000      	movs	r0, #0
 8001346:	f000 f80f 	bl	8001368 <HAL_InitTick>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d002      	beq.n	8001356 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001350:	2301      	movs	r3, #1
 8001352:	71fb      	strb	r3, [r7, #7]
 8001354:	e001      	b.n	800135a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001356:	f7ff fe97 	bl	8001088 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800135a:	79fb      	ldrb	r3, [r7, #7]
}
 800135c:	4618      	mov	r0, r3
 800135e:	3708      	adds	r7, #8
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	40022000 	.word	0x40022000

08001368 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001370:	2300      	movs	r3, #0
 8001372:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001374:	4b17      	ldr	r3, [pc, #92]	; (80013d4 <HAL_InitTick+0x6c>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d023      	beq.n	80013c4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800137c:	4b16      	ldr	r3, [pc, #88]	; (80013d8 <HAL_InitTick+0x70>)
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	4b14      	ldr	r3, [pc, #80]	; (80013d4 <HAL_InitTick+0x6c>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	4619      	mov	r1, r3
 8001386:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800138a:	fbb3 f3f1 	udiv	r3, r3, r1
 800138e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001392:	4618      	mov	r0, r3
 8001394:	f001 fb1b 	bl	80029ce <HAL_SYSTICK_Config>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d10f      	bne.n	80013be <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2b0f      	cmp	r3, #15
 80013a2:	d809      	bhi.n	80013b8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013a4:	2200      	movs	r2, #0
 80013a6:	6879      	ldr	r1, [r7, #4]
 80013a8:	f04f 30ff 	mov.w	r0, #4294967295
 80013ac:	f001 fae5 	bl	800297a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013b0:	4a0a      	ldr	r2, [pc, #40]	; (80013dc <HAL_InitTick+0x74>)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6013      	str	r3, [r2, #0]
 80013b6:	e007      	b.n	80013c8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80013b8:	2301      	movs	r3, #1
 80013ba:	73fb      	strb	r3, [r7, #15]
 80013bc:	e004      	b.n	80013c8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	73fb      	strb	r3, [r7, #15]
 80013c2:	e001      	b.n	80013c8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80013c4:	2301      	movs	r3, #1
 80013c6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80013c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3710      	adds	r7, #16
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	2000000c 	.word	0x2000000c
 80013d8:	20000004 	.word	0x20000004
 80013dc:	20000008 	.word	0x20000008

080013e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013e4:	4b06      	ldr	r3, [pc, #24]	; (8001400 <HAL_IncTick+0x20>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	461a      	mov	r2, r3
 80013ea:	4b06      	ldr	r3, [pc, #24]	; (8001404 <HAL_IncTick+0x24>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4413      	add	r3, r2
 80013f0:	4a04      	ldr	r2, [pc, #16]	; (8001404 <HAL_IncTick+0x24>)
 80013f2:	6013      	str	r3, [r2, #0]
}
 80013f4:	bf00      	nop
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	2000000c 	.word	0x2000000c
 8001404:	20004200 	.word	0x20004200

08001408 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  return uwTick;
 800140c:	4b03      	ldr	r3, [pc, #12]	; (800141c <HAL_GetTick+0x14>)
 800140e:	681b      	ldr	r3, [r3, #0]
}
 8001410:	4618      	mov	r0, r3
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	20004200 	.word	0x20004200

08001420 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001428:	f7ff ffee 	bl	8001408 <HAL_GetTick>
 800142c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001438:	d005      	beq.n	8001446 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800143a:	4b0a      	ldr	r3, [pc, #40]	; (8001464 <HAL_Delay+0x44>)
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	461a      	mov	r2, r3
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	4413      	add	r3, r2
 8001444:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001446:	bf00      	nop
 8001448:	f7ff ffde 	bl	8001408 <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	68fa      	ldr	r2, [r7, #12]
 8001454:	429a      	cmp	r2, r3
 8001456:	d8f7      	bhi.n	8001448 <HAL_Delay+0x28>
  {
  }
}
 8001458:	bf00      	nop
 800145a:	bf00      	nop
 800145c:	3710      	adds	r7, #16
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	2000000c 	.word	0x2000000c

08001468 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	431a      	orrs	r2, r3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	609a      	str	r2, [r3, #8]
}
 8001482:	bf00      	nop
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr

0800148e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800148e:	b480      	push	{r7}
 8001490:	b083      	sub	sp, #12
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
 8001496:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	431a      	orrs	r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	609a      	str	r2, [r3, #8]
}
 80014a8:	bf00      	nop
 80014aa:	370c      	adds	r7, #12
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr

080014b4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	370c      	adds	r7, #12
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr

080014d0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b087      	sub	sp, #28
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	60f8      	str	r0, [r7, #12]
 80014d8:	60b9      	str	r1, [r7, #8]
 80014da:	607a      	str	r2, [r7, #4]
 80014dc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	3360      	adds	r3, #96	; 0x60
 80014e2:	461a      	mov	r2, r3
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	4413      	add	r3, r2
 80014ea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	4b08      	ldr	r3, [pc, #32]	; (8001514 <LL_ADC_SetOffset+0x44>)
 80014f2:	4013      	ands	r3, r2
 80014f4:	687a      	ldr	r2, [r7, #4]
 80014f6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80014fa:	683a      	ldr	r2, [r7, #0]
 80014fc:	430a      	orrs	r2, r1
 80014fe:	4313      	orrs	r3, r2
 8001500:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001508:	bf00      	nop
 800150a:	371c      	adds	r7, #28
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr
 8001514:	03fff000 	.word	0x03fff000

08001518 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001518:	b480      	push	{r7}
 800151a:	b085      	sub	sp, #20
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	3360      	adds	r3, #96	; 0x60
 8001526:	461a      	mov	r2, r3
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	4413      	add	r3, r2
 800152e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001538:	4618      	mov	r0, r3
 800153a:	3714      	adds	r7, #20
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001544:	b480      	push	{r7}
 8001546:	b087      	sub	sp, #28
 8001548:	af00      	add	r7, sp, #0
 800154a:	60f8      	str	r0, [r7, #12]
 800154c:	60b9      	str	r1, [r7, #8]
 800154e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	3360      	adds	r3, #96	; 0x60
 8001554:	461a      	mov	r2, r3
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	4413      	add	r3, r2
 800155c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	431a      	orrs	r2, r3
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800156e:	bf00      	nop
 8001570:	371c      	adds	r7, #28
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr

0800157a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800157a:	b480      	push	{r7}
 800157c:	b083      	sub	sp, #12
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	68db      	ldr	r3, [r3, #12]
 8001586:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800158a:	2b00      	cmp	r3, #0
 800158c:	d101      	bne.n	8001592 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800158e:	2301      	movs	r3, #1
 8001590:	e000      	b.n	8001594 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001592:	2300      	movs	r3, #0
}
 8001594:	4618      	mov	r0, r3
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b087      	sub	sp, #28
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	60f8      	str	r0, [r7, #12]
 80015a8:	60b9      	str	r1, [r7, #8]
 80015aa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	3330      	adds	r3, #48	; 0x30
 80015b0:	461a      	mov	r2, r3
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	0a1b      	lsrs	r3, r3, #8
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	f003 030c 	and.w	r3, r3, #12
 80015bc:	4413      	add	r3, r2
 80015be:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	f003 031f 	and.w	r3, r3, #31
 80015ca:	211f      	movs	r1, #31
 80015cc:	fa01 f303 	lsl.w	r3, r1, r3
 80015d0:	43db      	mvns	r3, r3
 80015d2:	401a      	ands	r2, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	0e9b      	lsrs	r3, r3, #26
 80015d8:	f003 011f 	and.w	r1, r3, #31
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	f003 031f 	and.w	r3, r3, #31
 80015e2:	fa01 f303 	lsl.w	r3, r1, r3
 80015e6:	431a      	orrs	r2, r3
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80015ec:	bf00      	nop
 80015ee:	371c      	adds	r7, #28
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b087      	sub	sp, #28
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	60f8      	str	r0, [r7, #12]
 8001600:	60b9      	str	r1, [r7, #8]
 8001602:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	3314      	adds	r3, #20
 8001608:	461a      	mov	r2, r3
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	0e5b      	lsrs	r3, r3, #25
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	f003 0304 	and.w	r3, r3, #4
 8001614:	4413      	add	r3, r2
 8001616:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	0d1b      	lsrs	r3, r3, #20
 8001620:	f003 031f 	and.w	r3, r3, #31
 8001624:	2107      	movs	r1, #7
 8001626:	fa01 f303 	lsl.w	r3, r1, r3
 800162a:	43db      	mvns	r3, r3
 800162c:	401a      	ands	r2, r3
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	0d1b      	lsrs	r3, r3, #20
 8001632:	f003 031f 	and.w	r3, r3, #31
 8001636:	6879      	ldr	r1, [r7, #4]
 8001638:	fa01 f303 	lsl.w	r3, r1, r3
 800163c:	431a      	orrs	r2, r3
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001642:	bf00      	nop
 8001644:	371c      	adds	r7, #28
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
	...

08001650 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001650:	b480      	push	{r7}
 8001652:	b085      	sub	sp, #20
 8001654:	af00      	add	r7, sp, #0
 8001656:	60f8      	str	r0, [r7, #12]
 8001658:	60b9      	str	r1, [r7, #8]
 800165a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001668:	43db      	mvns	r3, r3
 800166a:	401a      	ands	r2, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	f003 0318 	and.w	r3, r3, #24
 8001672:	4908      	ldr	r1, [pc, #32]	; (8001694 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001674:	40d9      	lsrs	r1, r3
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	400b      	ands	r3, r1
 800167a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800167e:	431a      	orrs	r2, r3
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001686:	bf00      	nop
 8001688:	3714      	adds	r7, #20
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	0007ffff 	.word	0x0007ffff

08001698 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	f003 031f 	and.w	r3, r3, #31
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80016c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80016c8:	687a      	ldr	r2, [r7, #4]
 80016ca:	6093      	str	r3, [r2, #8]
}
 80016cc:	bf00      	nop
 80016ce:	370c      	adds	r7, #12
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr

080016d8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80016e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80016ec:	d101      	bne.n	80016f2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80016ee:	2301      	movs	r3, #1
 80016f0:	e000      	b.n	80016f4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80016f2:	2300      	movs	r3, #0
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001710:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001714:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800171c:	bf00      	nop
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001738:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800173c:	d101      	bne.n	8001742 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800173e:	2301      	movs	r3, #1
 8001740:	e000      	b.n	8001744 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001742:	2300      	movs	r3, #0
}
 8001744:	4618      	mov	r0, r3
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001760:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001764:	f043 0201 	orr.w	r2, r3, #1
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800176c:	bf00      	nop
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr

08001778 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	f003 0301 	and.w	r3, r3, #1
 8001788:	2b01      	cmp	r3, #1
 800178a:	d101      	bne.n	8001790 <LL_ADC_IsEnabled+0x18>
 800178c:	2301      	movs	r3, #1
 800178e:	e000      	b.n	8001792 <LL_ADC_IsEnabled+0x1a>
 8001790:	2300      	movs	r3, #0
}
 8001792:	4618      	mov	r0, r3
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr

0800179e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800179e:	b480      	push	{r7}
 80017a0:	b083      	sub	sp, #12
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80017ae:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80017b2:	f043 0204 	orr.w	r2, r3, #4
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80017ba:	bf00      	nop
 80017bc:	370c      	adds	r7, #12
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr

080017c6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80017c6:	b480      	push	{r7}
 80017c8:	b083      	sub	sp, #12
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	f003 0304 	and.w	r3, r3, #4
 80017d6:	2b04      	cmp	r3, #4
 80017d8:	d101      	bne.n	80017de <LL_ADC_REG_IsConversionOngoing+0x18>
 80017da:	2301      	movs	r3, #1
 80017dc:	e000      	b.n	80017e0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80017de:	2300      	movs	r3, #0
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	f003 0308 	and.w	r3, r3, #8
 80017fc:	2b08      	cmp	r3, #8
 80017fe:	d101      	bne.n	8001804 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001800:	2301      	movs	r3, #1
 8001802:	e000      	b.n	8001806 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001804:	2300      	movs	r3, #0
}
 8001806:	4618      	mov	r0, r3
 8001808:	370c      	adds	r7, #12
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
	...

08001814 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001814:	b590      	push	{r4, r7, lr}
 8001816:	b089      	sub	sp, #36	; 0x24
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800181c:	2300      	movs	r3, #0
 800181e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001820:	2300      	movs	r3, #0
 8001822:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d101      	bne.n	800182e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e136      	b.n	8001a9c <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	691b      	ldr	r3, [r3, #16]
 8001832:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001838:	2b00      	cmp	r3, #0
 800183a:	d109      	bne.n	8001850 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f7ff f871 	bl	8000924 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2200      	movs	r2, #0
 8001846:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2200      	movs	r2, #0
 800184c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff ff3f 	bl	80016d8 <LL_ADC_IsDeepPowerDownEnabled>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d004      	beq.n	800186a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4618      	mov	r0, r3
 8001866:	f7ff ff25 	bl	80016b4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4618      	mov	r0, r3
 8001870:	f7ff ff5a 	bl	8001728 <LL_ADC_IsInternalRegulatorEnabled>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d115      	bne.n	80018a6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4618      	mov	r0, r3
 8001880:	f7ff ff3e 	bl	8001700 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001884:	4b87      	ldr	r3, [pc, #540]	; (8001aa4 <HAL_ADC_Init+0x290>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	099b      	lsrs	r3, r3, #6
 800188a:	4a87      	ldr	r2, [pc, #540]	; (8001aa8 <HAL_ADC_Init+0x294>)
 800188c:	fba2 2303 	umull	r2, r3, r2, r3
 8001890:	099b      	lsrs	r3, r3, #6
 8001892:	3301      	adds	r3, #1
 8001894:	005b      	lsls	r3, r3, #1
 8001896:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001898:	e002      	b.n	80018a0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	3b01      	subs	r3, #1
 800189e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d1f9      	bne.n	800189a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7ff ff3c 	bl	8001728 <LL_ADC_IsInternalRegulatorEnabled>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d10d      	bne.n	80018d2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018ba:	f043 0210 	orr.w	r2, r3, #16
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018c6:	f043 0201 	orr.w	r2, r3, #1
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7ff ff75 	bl	80017c6 <LL_ADC_REG_IsConversionOngoing>
 80018dc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018e2:	f003 0310 	and.w	r3, r3, #16
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	f040 80cf 	bne.w	8001a8a <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	f040 80cb 	bne.w	8001a8a <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018f8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80018fc:	f043 0202 	orr.w	r2, r3, #2
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4618      	mov	r0, r3
 800190a:	f7ff ff35 	bl	8001778 <LL_ADC_IsEnabled>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d115      	bne.n	8001940 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001914:	4865      	ldr	r0, [pc, #404]	; (8001aac <HAL_ADC_Init+0x298>)
 8001916:	f7ff ff2f 	bl	8001778 <LL_ADC_IsEnabled>
 800191a:	4604      	mov	r4, r0
 800191c:	4864      	ldr	r0, [pc, #400]	; (8001ab0 <HAL_ADC_Init+0x29c>)
 800191e:	f7ff ff2b 	bl	8001778 <LL_ADC_IsEnabled>
 8001922:	4603      	mov	r3, r0
 8001924:	431c      	orrs	r4, r3
 8001926:	4863      	ldr	r0, [pc, #396]	; (8001ab4 <HAL_ADC_Init+0x2a0>)
 8001928:	f7ff ff26 	bl	8001778 <LL_ADC_IsEnabled>
 800192c:	4603      	mov	r3, r0
 800192e:	4323      	orrs	r3, r4
 8001930:	2b00      	cmp	r3, #0
 8001932:	d105      	bne.n	8001940 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	4619      	mov	r1, r3
 800193a:	485f      	ldr	r0, [pc, #380]	; (8001ab8 <HAL_ADC_Init+0x2a4>)
 800193c:	f7ff fd94 	bl	8001468 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	7e5b      	ldrb	r3, [r3, #25]
 8001944:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800194a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001950:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001956:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800195e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001960:	4313      	orrs	r3, r2
 8001962:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f893 3020 	ldrb.w	r3, [r3, #32]
 800196a:	2b01      	cmp	r3, #1
 800196c:	d106      	bne.n	800197c <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001972:	3b01      	subs	r3, #1
 8001974:	045b      	lsls	r3, r3, #17
 8001976:	69ba      	ldr	r2, [r7, #24]
 8001978:	4313      	orrs	r3, r2
 800197a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001980:	2b00      	cmp	r3, #0
 8001982:	d009      	beq.n	8001998 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001988:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001990:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001992:	69ba      	ldr	r2, [r7, #24]
 8001994:	4313      	orrs	r3, r2
 8001996:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	68da      	ldr	r2, [r3, #12]
 800199e:	4b47      	ldr	r3, [pc, #284]	; (8001abc <HAL_ADC_Init+0x2a8>)
 80019a0:	4013      	ands	r3, r2
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	6812      	ldr	r2, [r2, #0]
 80019a6:	69b9      	ldr	r1, [r7, #24]
 80019a8:	430b      	orrs	r3, r1
 80019aa:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7ff ff08 	bl	80017c6 <LL_ADC_REG_IsConversionOngoing>
 80019b6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4618      	mov	r0, r3
 80019be:	f7ff ff15 	bl	80017ec <LL_ADC_INJ_IsConversionOngoing>
 80019c2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d13d      	bne.n	8001a46 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d13a      	bne.n	8001a46 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80019d4:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80019dc:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80019de:	4313      	orrs	r3, r2
 80019e0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80019ec:	f023 0302 	bic.w	r3, r3, #2
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	6812      	ldr	r2, [r2, #0]
 80019f4:	69b9      	ldr	r1, [r7, #24]
 80019f6:	430b      	orrs	r3, r1
 80019f8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d118      	bne.n	8001a36 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	691b      	ldr	r3, [r3, #16]
 8001a0a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001a0e:	f023 0304 	bic.w	r3, r3, #4
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001a1a:	4311      	orrs	r1, r2
 8001a1c:	687a      	ldr	r2, [r7, #4]
 8001a1e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001a20:	4311      	orrs	r1, r2
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001a26:	430a      	orrs	r2, r1
 8001a28:	431a      	orrs	r2, r3
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f042 0201 	orr.w	r2, r2, #1
 8001a32:	611a      	str	r2, [r3, #16]
 8001a34:	e007      	b.n	8001a46 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	691a      	ldr	r2, [r3, #16]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f022 0201 	bic.w	r2, r2, #1
 8001a44:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	691b      	ldr	r3, [r3, #16]
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d10c      	bne.n	8001a68 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a54:	f023 010f 	bic.w	r1, r3, #15
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	69db      	ldr	r3, [r3, #28]
 8001a5c:	1e5a      	subs	r2, r3, #1
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	430a      	orrs	r2, r1
 8001a64:	631a      	str	r2, [r3, #48]	; 0x30
 8001a66:	e007      	b.n	8001a78 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f022 020f 	bic.w	r2, r2, #15
 8001a76:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a7c:	f023 0303 	bic.w	r3, r3, #3
 8001a80:	f043 0201 	orr.w	r2, r3, #1
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	655a      	str	r2, [r3, #84]	; 0x54
 8001a88:	e007      	b.n	8001a9a <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a8e:	f043 0210 	orr.w	r2, r3, #16
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001a9a:	7ffb      	ldrb	r3, [r7, #31]
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3724      	adds	r7, #36	; 0x24
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd90      	pop	{r4, r7, pc}
 8001aa4:	20000004 	.word	0x20000004
 8001aa8:	053e2d63 	.word	0x053e2d63
 8001aac:	50040000 	.word	0x50040000
 8001ab0:	50040100 	.word	0x50040100
 8001ab4:	50040200 	.word	0x50040200
 8001ab8:	50040300 	.word	0x50040300
 8001abc:	fff0c007 	.word	0xfff0c007

08001ac0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b086      	sub	sp, #24
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	60f8      	str	r0, [r7, #12]
 8001ac8:	60b9      	str	r1, [r7, #8]
 8001aca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001acc:	4853      	ldr	r0, [pc, #332]	; (8001c1c <HAL_ADC_Start_DMA+0x15c>)
 8001ace:	f7ff fde3 	bl	8001698 <LL_ADC_GetMultimode>
 8001ad2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7ff fe74 	bl	80017c6 <LL_ADC_REG_IsConversionOngoing>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	f040 8093 	bne.w	8001c0c <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d101      	bne.n	8001af4 <HAL_ADC_Start_DMA+0x34>
 8001af0:	2302      	movs	r3, #2
 8001af2:	e08e      	b.n	8001c12 <HAL_ADC_Start_DMA+0x152>
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	2201      	movs	r2, #1
 8001af8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a47      	ldr	r2, [pc, #284]	; (8001c20 <HAL_ADC_Start_DMA+0x160>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d008      	beq.n	8001b18 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d005      	beq.n	8001b18 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	2b05      	cmp	r3, #5
 8001b10:	d002      	beq.n	8001b18 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	2b09      	cmp	r3, #9
 8001b16:	d172      	bne.n	8001bfe <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001b18:	68f8      	ldr	r0, [r7, #12]
 8001b1a:	f000 fc87 	bl	800242c <ADC_Enable>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001b22:	7dfb      	ldrb	r3, [r7, #23]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d165      	bne.n	8001bf4 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b2c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001b30:	f023 0301 	bic.w	r3, r3, #1
 8001b34:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a38      	ldr	r2, [pc, #224]	; (8001c24 <HAL_ADC_Start_DMA+0x164>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d002      	beq.n	8001b4c <HAL_ADC_Start_DMA+0x8c>
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	e000      	b.n	8001b4e <HAL_ADC_Start_DMA+0x8e>
 8001b4c:	4b36      	ldr	r3, [pc, #216]	; (8001c28 <HAL_ADC_Start_DMA+0x168>)
 8001b4e:	68fa      	ldr	r2, [r7, #12]
 8001b50:	6812      	ldr	r2, [r2, #0]
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d002      	beq.n	8001b5c <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d105      	bne.n	8001b68 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b60:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d006      	beq.n	8001b82 <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b78:	f023 0206 	bic.w	r2, r3, #6
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	659a      	str	r2, [r3, #88]	; 0x58
 8001b80:	e002      	b.n	8001b88 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	2200      	movs	r2, #0
 8001b86:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b8c:	4a27      	ldr	r2, [pc, #156]	; (8001c2c <HAL_ADC_Start_DMA+0x16c>)
 8001b8e:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b94:	4a26      	ldr	r2, [pc, #152]	; (8001c30 <HAL_ADC_Start_DMA+0x170>)
 8001b96:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b9c:	4a25      	ldr	r2, [pc, #148]	; (8001c34 <HAL_ADC_Start_DMA+0x174>)
 8001b9e:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	221c      	movs	r2, #28
 8001ba6:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2200      	movs	r2, #0
 8001bac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	685a      	ldr	r2, [r3, #4]
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f042 0210 	orr.w	r2, r2, #16
 8001bbe:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	68da      	ldr	r2, [r3, #12]
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f042 0201 	orr.w	r2, r2, #1
 8001bce:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	3340      	adds	r3, #64	; 0x40
 8001bda:	4619      	mov	r1, r3
 8001bdc:	68ba      	ldr	r2, [r7, #8]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	f001 fa6a 	bl	80030b8 <HAL_DMA_Start_IT>
 8001be4:	4603      	mov	r3, r0
 8001be6:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7ff fdd6 	bl	800179e <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001bf2:	e00d      	b.n	8001c10 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8001bfc:	e008      	b.n	8001c10 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2200      	movs	r2, #0
 8001c06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001c0a:	e001      	b.n	8001c10 <HAL_ADC_Start_DMA+0x150>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001c10:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3718      	adds	r7, #24
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	50040300 	.word	0x50040300
 8001c20:	50040200 	.word	0x50040200
 8001c24:	50040100 	.word	0x50040100
 8001c28:	50040000 	.word	0x50040000
 8001c2c:	080024f1 	.word	0x080024f1
 8001c30:	080025c9 	.word	0x080025c9
 8001c34:	080025e5 	.word	0x080025e5

08001c38 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001c40:	bf00      	nop
 8001c42:	370c      	adds	r7, #12
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr

08001c4c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b0b6      	sub	sp, #216	; 0xd8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c56:	2300      	movs	r3, #0
 8001c58:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d101      	bne.n	8001c6e <HAL_ADC_ConfigChannel+0x22>
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	e3c7      	b.n	80023fe <HAL_ADC_ConfigChannel+0x7b2>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2201      	movs	r2, #1
 8001c72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7ff fda3 	bl	80017c6 <LL_ADC_REG_IsConversionOngoing>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	f040 83a8 	bne.w	80023d8 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	2b05      	cmp	r3, #5
 8001c8e:	d824      	bhi.n	8001cda <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	3b02      	subs	r3, #2
 8001c96:	2b03      	cmp	r3, #3
 8001c98:	d81b      	bhi.n	8001cd2 <HAL_ADC_ConfigChannel+0x86>
 8001c9a:	a201      	add	r2, pc, #4	; (adr r2, 8001ca0 <HAL_ADC_ConfigChannel+0x54>)
 8001c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ca0:	08001cb1 	.word	0x08001cb1
 8001ca4:	08001cb9 	.word	0x08001cb9
 8001ca8:	08001cc1 	.word	0x08001cc1
 8001cac:	08001cc9 	.word	0x08001cc9
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	220c      	movs	r2, #12
 8001cb4:	605a      	str	r2, [r3, #4]
          break;
 8001cb6:	e011      	b.n	8001cdc <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	2212      	movs	r2, #18
 8001cbc:	605a      	str	r2, [r3, #4]
          break;
 8001cbe:	e00d      	b.n	8001cdc <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	2218      	movs	r2, #24
 8001cc4:	605a      	str	r2, [r3, #4]
          break;
 8001cc6:	e009      	b.n	8001cdc <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cce:	605a      	str	r2, [r3, #4]
          break;
 8001cd0:	e004      	b.n	8001cdc <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	2206      	movs	r2, #6
 8001cd6:	605a      	str	r2, [r3, #4]
          break;
 8001cd8:	e000      	b.n	8001cdc <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001cda:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6818      	ldr	r0, [r3, #0]
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	6859      	ldr	r1, [r3, #4]
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	461a      	mov	r2, r3
 8001cea:	f7ff fc59 	bl	80015a0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7ff fd67 	bl	80017c6 <LL_ADC_REG_IsConversionOngoing>
 8001cf8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7ff fd73 	bl	80017ec <LL_ADC_INJ_IsConversionOngoing>
 8001d06:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d0a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	f040 81a6 	bne.w	8002060 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d14:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	f040 81a1 	bne.w	8002060 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6818      	ldr	r0, [r3, #0]
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	6819      	ldr	r1, [r3, #0]
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	f7ff fc64 	bl	80015f8 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	695a      	ldr	r2, [r3, #20]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	08db      	lsrs	r3, r3, #3
 8001d3c:	f003 0303 	and.w	r3, r3, #3
 8001d40:	005b      	lsls	r3, r3, #1
 8001d42:	fa02 f303 	lsl.w	r3, r2, r3
 8001d46:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	691b      	ldr	r3, [r3, #16]
 8001d4e:	2b04      	cmp	r3, #4
 8001d50:	d00a      	beq.n	8001d68 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6818      	ldr	r0, [r3, #0]
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	6919      	ldr	r1, [r3, #16]
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001d62:	f7ff fbb5 	bl	80014d0 <LL_ADC_SetOffset>
 8001d66:	e17b      	b.n	8002060 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	2100      	movs	r1, #0
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7ff fbd2 	bl	8001518 <LL_ADC_GetOffsetChannel>
 8001d74:	4603      	mov	r3, r0
 8001d76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d10a      	bne.n	8001d94 <HAL_ADC_ConfigChannel+0x148>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	2100      	movs	r1, #0
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7ff fbc7 	bl	8001518 <LL_ADC_GetOffsetChannel>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	0e9b      	lsrs	r3, r3, #26
 8001d8e:	f003 021f 	and.w	r2, r3, #31
 8001d92:	e01e      	b.n	8001dd2 <HAL_ADC_ConfigChannel+0x186>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	2100      	movs	r1, #0
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7ff fbbc 	bl	8001518 <LL_ADC_GetOffsetChannel>
 8001da0:	4603      	mov	r3, r0
 8001da2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001daa:	fa93 f3a3 	rbit	r3, r3
 8001dae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001db2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001db6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001dba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d101      	bne.n	8001dc6 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001dc2:	2320      	movs	r3, #32
 8001dc4:	e004      	b.n	8001dd0 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8001dc6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001dca:	fab3 f383 	clz	r3, r3
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d105      	bne.n	8001dea <HAL_ADC_ConfigChannel+0x19e>
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	0e9b      	lsrs	r3, r3, #26
 8001de4:	f003 031f 	and.w	r3, r3, #31
 8001de8:	e018      	b.n	8001e1c <HAL_ADC_ConfigChannel+0x1d0>
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001df6:	fa93 f3a3 	rbit	r3, r3
 8001dfa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001dfe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001e02:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001e06:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d101      	bne.n	8001e12 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8001e0e:	2320      	movs	r3, #32
 8001e10:	e004      	b.n	8001e1c <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8001e12:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001e16:	fab3 f383 	clz	r3, r3
 8001e1a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d106      	bne.n	8001e2e <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2200      	movs	r2, #0
 8001e26:	2100      	movs	r1, #0
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7ff fb8b 	bl	8001544 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	2101      	movs	r1, #1
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7ff fb6f 	bl	8001518 <LL_ADC_GetOffsetChannel>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d10a      	bne.n	8001e5a <HAL_ADC_ConfigChannel+0x20e>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2101      	movs	r1, #1
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7ff fb64 	bl	8001518 <LL_ADC_GetOffsetChannel>
 8001e50:	4603      	mov	r3, r0
 8001e52:	0e9b      	lsrs	r3, r3, #26
 8001e54:	f003 021f 	and.w	r2, r3, #31
 8001e58:	e01e      	b.n	8001e98 <HAL_ADC_ConfigChannel+0x24c>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2101      	movs	r1, #1
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7ff fb59 	bl	8001518 <LL_ADC_GetOffsetChannel>
 8001e66:	4603      	mov	r3, r0
 8001e68:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e6c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001e70:	fa93 f3a3 	rbit	r3, r3
 8001e74:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001e78:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001e7c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001e80:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d101      	bne.n	8001e8c <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001e88:	2320      	movs	r3, #32
 8001e8a:	e004      	b.n	8001e96 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001e8c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001e90:	fab3 f383 	clz	r3, r3
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d105      	bne.n	8001eb0 <HAL_ADC_ConfigChannel+0x264>
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	0e9b      	lsrs	r3, r3, #26
 8001eaa:	f003 031f 	and.w	r3, r3, #31
 8001eae:	e018      	b.n	8001ee2 <HAL_ADC_ConfigChannel+0x296>
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001ebc:	fa93 f3a3 	rbit	r3, r3
 8001ec0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001ec4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001ec8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001ecc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d101      	bne.n	8001ed8 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001ed4:	2320      	movs	r3, #32
 8001ed6:	e004      	b.n	8001ee2 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001ed8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001edc:	fab3 f383 	clz	r3, r3
 8001ee0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d106      	bne.n	8001ef4 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	2200      	movs	r2, #0
 8001eec:	2101      	movs	r1, #1
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7ff fb28 	bl	8001544 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	2102      	movs	r1, #2
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7ff fb0c 	bl	8001518 <LL_ADC_GetOffsetChannel>
 8001f00:	4603      	mov	r3, r0
 8001f02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d10a      	bne.n	8001f20 <HAL_ADC_ConfigChannel+0x2d4>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	2102      	movs	r1, #2
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7ff fb01 	bl	8001518 <LL_ADC_GetOffsetChannel>
 8001f16:	4603      	mov	r3, r0
 8001f18:	0e9b      	lsrs	r3, r3, #26
 8001f1a:	f003 021f 	and.w	r2, r3, #31
 8001f1e:	e01e      	b.n	8001f5e <HAL_ADC_ConfigChannel+0x312>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2102      	movs	r1, #2
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7ff faf6 	bl	8001518 <LL_ADC_GetOffsetChannel>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f36:	fa93 f3a3 	rbit	r3, r3
 8001f3a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001f3e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001f42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001f46:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d101      	bne.n	8001f52 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8001f4e:	2320      	movs	r3, #32
 8001f50:	e004      	b.n	8001f5c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001f52:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001f56:	fab3 f383 	clz	r3, r3
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d105      	bne.n	8001f76 <HAL_ADC_ConfigChannel+0x32a>
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	0e9b      	lsrs	r3, r3, #26
 8001f70:	f003 031f 	and.w	r3, r3, #31
 8001f74:	e016      	b.n	8001fa4 <HAL_ADC_ConfigChannel+0x358>
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f7e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001f82:	fa93 f3a3 	rbit	r3, r3
 8001f86:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001f88:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f8a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001f8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d101      	bne.n	8001f9a <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8001f96:	2320      	movs	r3, #32
 8001f98:	e004      	b.n	8001fa4 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8001f9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f9e:	fab3 f383 	clz	r3, r3
 8001fa2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d106      	bne.n	8001fb6 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	2200      	movs	r2, #0
 8001fae:	2102      	movs	r1, #2
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f7ff fac7 	bl	8001544 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	2103      	movs	r1, #3
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7ff faab 	bl	8001518 <LL_ADC_GetOffsetChannel>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d10a      	bne.n	8001fe2 <HAL_ADC_ConfigChannel+0x396>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2103      	movs	r1, #3
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7ff faa0 	bl	8001518 <LL_ADC_GetOffsetChannel>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	0e9b      	lsrs	r3, r3, #26
 8001fdc:	f003 021f 	and.w	r2, r3, #31
 8001fe0:	e017      	b.n	8002012 <HAL_ADC_ConfigChannel+0x3c6>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	2103      	movs	r1, #3
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7ff fa95 	bl	8001518 <LL_ADC_GetOffsetChannel>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ff4:	fa93 f3a3 	rbit	r3, r3
 8001ff8:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001ffa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ffc:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001ffe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002000:	2b00      	cmp	r3, #0
 8002002:	d101      	bne.n	8002008 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002004:	2320      	movs	r3, #32
 8002006:	e003      	b.n	8002010 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002008:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800200a:	fab3 f383 	clz	r3, r3
 800200e:	b2db      	uxtb	r3, r3
 8002010:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800201a:	2b00      	cmp	r3, #0
 800201c:	d105      	bne.n	800202a <HAL_ADC_ConfigChannel+0x3de>
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	0e9b      	lsrs	r3, r3, #26
 8002024:	f003 031f 	and.w	r3, r3, #31
 8002028:	e011      	b.n	800204e <HAL_ADC_ConfigChannel+0x402>
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002030:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002032:	fa93 f3a3 	rbit	r3, r3
 8002036:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002038:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800203a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800203c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800203e:	2b00      	cmp	r3, #0
 8002040:	d101      	bne.n	8002046 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8002042:	2320      	movs	r3, #32
 8002044:	e003      	b.n	800204e <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002046:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002048:	fab3 f383 	clz	r3, r3
 800204c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800204e:	429a      	cmp	r2, r3
 8002050:	d106      	bne.n	8002060 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	2200      	movs	r2, #0
 8002058:	2103      	movs	r1, #3
 800205a:	4618      	mov	r0, r3
 800205c:	f7ff fa72 	bl	8001544 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4618      	mov	r0, r3
 8002066:	f7ff fb87 	bl	8001778 <LL_ADC_IsEnabled>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	f040 813f 	bne.w	80022f0 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6818      	ldr	r0, [r3, #0]
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	6819      	ldr	r1, [r3, #0]
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	68db      	ldr	r3, [r3, #12]
 800207e:	461a      	mov	r2, r3
 8002080:	f7ff fae6 	bl	8001650 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	4a8e      	ldr	r2, [pc, #568]	; (80022c4 <HAL_ADC_ConfigChannel+0x678>)
 800208a:	4293      	cmp	r3, r2
 800208c:	f040 8130 	bne.w	80022f0 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800209c:	2b00      	cmp	r3, #0
 800209e:	d10b      	bne.n	80020b8 <HAL_ADC_ConfigChannel+0x46c>
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	0e9b      	lsrs	r3, r3, #26
 80020a6:	3301      	adds	r3, #1
 80020a8:	f003 031f 	and.w	r3, r3, #31
 80020ac:	2b09      	cmp	r3, #9
 80020ae:	bf94      	ite	ls
 80020b0:	2301      	movls	r3, #1
 80020b2:	2300      	movhi	r3, #0
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	e019      	b.n	80020ec <HAL_ADC_ConfigChannel+0x4a0>
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020c0:	fa93 f3a3 	rbit	r3, r3
 80020c4:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80020c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80020c8:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80020ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d101      	bne.n	80020d4 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80020d0:	2320      	movs	r3, #32
 80020d2:	e003      	b.n	80020dc <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80020d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80020d6:	fab3 f383 	clz	r3, r3
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	3301      	adds	r3, #1
 80020de:	f003 031f 	and.w	r3, r3, #31
 80020e2:	2b09      	cmp	r3, #9
 80020e4:	bf94      	ite	ls
 80020e6:	2301      	movls	r3, #1
 80020e8:	2300      	movhi	r3, #0
 80020ea:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d079      	beq.n	80021e4 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d107      	bne.n	800210c <HAL_ADC_ConfigChannel+0x4c0>
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	0e9b      	lsrs	r3, r3, #26
 8002102:	3301      	adds	r3, #1
 8002104:	069b      	lsls	r3, r3, #26
 8002106:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800210a:	e015      	b.n	8002138 <HAL_ADC_ConfigChannel+0x4ec>
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002112:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002114:	fa93 f3a3 	rbit	r3, r3
 8002118:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800211a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800211c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800211e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002120:	2b00      	cmp	r3, #0
 8002122:	d101      	bne.n	8002128 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002124:	2320      	movs	r3, #32
 8002126:	e003      	b.n	8002130 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002128:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800212a:	fab3 f383 	clz	r3, r3
 800212e:	b2db      	uxtb	r3, r3
 8002130:	3301      	adds	r3, #1
 8002132:	069b      	lsls	r3, r3, #26
 8002134:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002140:	2b00      	cmp	r3, #0
 8002142:	d109      	bne.n	8002158 <HAL_ADC_ConfigChannel+0x50c>
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	0e9b      	lsrs	r3, r3, #26
 800214a:	3301      	adds	r3, #1
 800214c:	f003 031f 	and.w	r3, r3, #31
 8002150:	2101      	movs	r1, #1
 8002152:	fa01 f303 	lsl.w	r3, r1, r3
 8002156:	e017      	b.n	8002188 <HAL_ADC_ConfigChannel+0x53c>
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800215e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002160:	fa93 f3a3 	rbit	r3, r3
 8002164:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002166:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002168:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800216a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800216c:	2b00      	cmp	r3, #0
 800216e:	d101      	bne.n	8002174 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002170:	2320      	movs	r3, #32
 8002172:	e003      	b.n	800217c <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002174:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002176:	fab3 f383 	clz	r3, r3
 800217a:	b2db      	uxtb	r3, r3
 800217c:	3301      	adds	r3, #1
 800217e:	f003 031f 	and.w	r3, r3, #31
 8002182:	2101      	movs	r1, #1
 8002184:	fa01 f303 	lsl.w	r3, r1, r3
 8002188:	ea42 0103 	orr.w	r1, r2, r3
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002194:	2b00      	cmp	r3, #0
 8002196:	d10a      	bne.n	80021ae <HAL_ADC_ConfigChannel+0x562>
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	0e9b      	lsrs	r3, r3, #26
 800219e:	3301      	adds	r3, #1
 80021a0:	f003 021f 	and.w	r2, r3, #31
 80021a4:	4613      	mov	r3, r2
 80021a6:	005b      	lsls	r3, r3, #1
 80021a8:	4413      	add	r3, r2
 80021aa:	051b      	lsls	r3, r3, #20
 80021ac:	e018      	b.n	80021e0 <HAL_ADC_ConfigChannel+0x594>
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021b6:	fa93 f3a3 	rbit	r3, r3
 80021ba:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80021bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021be:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80021c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d101      	bne.n	80021ca <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80021c6:	2320      	movs	r3, #32
 80021c8:	e003      	b.n	80021d2 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80021ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021cc:	fab3 f383 	clz	r3, r3
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	3301      	adds	r3, #1
 80021d4:	f003 021f 	and.w	r2, r3, #31
 80021d8:	4613      	mov	r3, r2
 80021da:	005b      	lsls	r3, r3, #1
 80021dc:	4413      	add	r3, r2
 80021de:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021e0:	430b      	orrs	r3, r1
 80021e2:	e080      	b.n	80022e6 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d107      	bne.n	8002200 <HAL_ADC_ConfigChannel+0x5b4>
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	0e9b      	lsrs	r3, r3, #26
 80021f6:	3301      	adds	r3, #1
 80021f8:	069b      	lsls	r3, r3, #26
 80021fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021fe:	e015      	b.n	800222c <HAL_ADC_ConfigChannel+0x5e0>
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002208:	fa93 f3a3 	rbit	r3, r3
 800220c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800220e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002210:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002214:	2b00      	cmp	r3, #0
 8002216:	d101      	bne.n	800221c <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002218:	2320      	movs	r3, #32
 800221a:	e003      	b.n	8002224 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 800221c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800221e:	fab3 f383 	clz	r3, r3
 8002222:	b2db      	uxtb	r3, r3
 8002224:	3301      	adds	r3, #1
 8002226:	069b      	lsls	r3, r3, #26
 8002228:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002234:	2b00      	cmp	r3, #0
 8002236:	d109      	bne.n	800224c <HAL_ADC_ConfigChannel+0x600>
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	0e9b      	lsrs	r3, r3, #26
 800223e:	3301      	adds	r3, #1
 8002240:	f003 031f 	and.w	r3, r3, #31
 8002244:	2101      	movs	r1, #1
 8002246:	fa01 f303 	lsl.w	r3, r1, r3
 800224a:	e017      	b.n	800227c <HAL_ADC_ConfigChannel+0x630>
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002252:	6a3b      	ldr	r3, [r7, #32]
 8002254:	fa93 f3a3 	rbit	r3, r3
 8002258:	61fb      	str	r3, [r7, #28]
  return result;
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800225e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002260:	2b00      	cmp	r3, #0
 8002262:	d101      	bne.n	8002268 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002264:	2320      	movs	r3, #32
 8002266:	e003      	b.n	8002270 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226a:	fab3 f383 	clz	r3, r3
 800226e:	b2db      	uxtb	r3, r3
 8002270:	3301      	adds	r3, #1
 8002272:	f003 031f 	and.w	r3, r3, #31
 8002276:	2101      	movs	r1, #1
 8002278:	fa01 f303 	lsl.w	r3, r1, r3
 800227c:	ea42 0103 	orr.w	r1, r2, r3
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002288:	2b00      	cmp	r3, #0
 800228a:	d10d      	bne.n	80022a8 <HAL_ADC_ConfigChannel+0x65c>
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	0e9b      	lsrs	r3, r3, #26
 8002292:	3301      	adds	r3, #1
 8002294:	f003 021f 	and.w	r2, r3, #31
 8002298:	4613      	mov	r3, r2
 800229a:	005b      	lsls	r3, r3, #1
 800229c:	4413      	add	r3, r2
 800229e:	3b1e      	subs	r3, #30
 80022a0:	051b      	lsls	r3, r3, #20
 80022a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80022a6:	e01d      	b.n	80022e4 <HAL_ADC_ConfigChannel+0x698>
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	fa93 f3a3 	rbit	r3, r3
 80022b4:	613b      	str	r3, [r7, #16]
  return result;
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80022ba:	69bb      	ldr	r3, [r7, #24]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d103      	bne.n	80022c8 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80022c0:	2320      	movs	r3, #32
 80022c2:	e005      	b.n	80022d0 <HAL_ADC_ConfigChannel+0x684>
 80022c4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	fab3 f383 	clz	r3, r3
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	3301      	adds	r3, #1
 80022d2:	f003 021f 	and.w	r2, r3, #31
 80022d6:	4613      	mov	r3, r2
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	4413      	add	r3, r2
 80022dc:	3b1e      	subs	r3, #30
 80022de:	051b      	lsls	r3, r3, #20
 80022e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022e4:	430b      	orrs	r3, r1
 80022e6:	683a      	ldr	r2, [r7, #0]
 80022e8:	6892      	ldr	r2, [r2, #8]
 80022ea:	4619      	mov	r1, r3
 80022ec:	f7ff f984 	bl	80015f8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	4b44      	ldr	r3, [pc, #272]	; (8002408 <HAL_ADC_ConfigChannel+0x7bc>)
 80022f6:	4013      	ands	r3, r2
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d07a      	beq.n	80023f2 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80022fc:	4843      	ldr	r0, [pc, #268]	; (800240c <HAL_ADC_ConfigChannel+0x7c0>)
 80022fe:	f7ff f8d9 	bl	80014b4 <LL_ADC_GetCommonPathInternalCh>
 8002302:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a41      	ldr	r2, [pc, #260]	; (8002410 <HAL_ADC_ConfigChannel+0x7c4>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d12c      	bne.n	800236a <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002310:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002314:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d126      	bne.n	800236a <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a3c      	ldr	r2, [pc, #240]	; (8002414 <HAL_ADC_ConfigChannel+0x7c8>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d004      	beq.n	8002330 <HAL_ADC_ConfigChannel+0x6e4>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a3b      	ldr	r2, [pc, #236]	; (8002418 <HAL_ADC_ConfigChannel+0x7cc>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d15d      	bne.n	80023ec <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002330:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002334:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002338:	4619      	mov	r1, r3
 800233a:	4834      	ldr	r0, [pc, #208]	; (800240c <HAL_ADC_ConfigChannel+0x7c0>)
 800233c:	f7ff f8a7 	bl	800148e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002340:	4b36      	ldr	r3, [pc, #216]	; (800241c <HAL_ADC_ConfigChannel+0x7d0>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	099b      	lsrs	r3, r3, #6
 8002346:	4a36      	ldr	r2, [pc, #216]	; (8002420 <HAL_ADC_ConfigChannel+0x7d4>)
 8002348:	fba2 2303 	umull	r2, r3, r2, r3
 800234c:	099b      	lsrs	r3, r3, #6
 800234e:	1c5a      	adds	r2, r3, #1
 8002350:	4613      	mov	r3, r2
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	4413      	add	r3, r2
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800235a:	e002      	b.n	8002362 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	3b01      	subs	r3, #1
 8002360:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d1f9      	bne.n	800235c <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002368:	e040      	b.n	80023ec <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a2d      	ldr	r2, [pc, #180]	; (8002424 <HAL_ADC_ConfigChannel+0x7d8>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d118      	bne.n	80023a6 <HAL_ADC_ConfigChannel+0x75a>
 8002374:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002378:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d112      	bne.n	80023a6 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a23      	ldr	r2, [pc, #140]	; (8002414 <HAL_ADC_ConfigChannel+0x7c8>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d004      	beq.n	8002394 <HAL_ADC_ConfigChannel+0x748>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a22      	ldr	r2, [pc, #136]	; (8002418 <HAL_ADC_ConfigChannel+0x7cc>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d12d      	bne.n	80023f0 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002394:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002398:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800239c:	4619      	mov	r1, r3
 800239e:	481b      	ldr	r0, [pc, #108]	; (800240c <HAL_ADC_ConfigChannel+0x7c0>)
 80023a0:	f7ff f875 	bl	800148e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80023a4:	e024      	b.n	80023f0 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a1f      	ldr	r2, [pc, #124]	; (8002428 <HAL_ADC_ConfigChannel+0x7dc>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d120      	bne.n	80023f2 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80023b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80023b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d11a      	bne.n	80023f2 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a14      	ldr	r2, [pc, #80]	; (8002414 <HAL_ADC_ConfigChannel+0x7c8>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d115      	bne.n	80023f2 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80023c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80023ca:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80023ce:	4619      	mov	r1, r3
 80023d0:	480e      	ldr	r0, [pc, #56]	; (800240c <HAL_ADC_ConfigChannel+0x7c0>)
 80023d2:	f7ff f85c 	bl	800148e <LL_ADC_SetCommonPathInternalCh>
 80023d6:	e00c      	b.n	80023f2 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023dc:	f043 0220 	orr.w	r2, r3, #32
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80023ea:	e002      	b.n	80023f2 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80023ec:	bf00      	nop
 80023ee:	e000      	b.n	80023f2 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80023f0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80023fa:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80023fe:	4618      	mov	r0, r3
 8002400:	37d8      	adds	r7, #216	; 0xd8
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	80080000 	.word	0x80080000
 800240c:	50040300 	.word	0x50040300
 8002410:	c7520000 	.word	0xc7520000
 8002414:	50040000 	.word	0x50040000
 8002418:	50040200 	.word	0x50040200
 800241c:	20000004 	.word	0x20000004
 8002420:	053e2d63 	.word	0x053e2d63
 8002424:	cb840000 	.word	0xcb840000
 8002428:	80000001 	.word	0x80000001

0800242c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4618      	mov	r0, r3
 800243a:	f7ff f99d 	bl	8001778 <LL_ADC_IsEnabled>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d14d      	bne.n	80024e0 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	689a      	ldr	r2, [r3, #8]
 800244a:	4b28      	ldr	r3, [pc, #160]	; (80024ec <ADC_Enable+0xc0>)
 800244c:	4013      	ands	r3, r2
 800244e:	2b00      	cmp	r3, #0
 8002450:	d00d      	beq.n	800246e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002456:	f043 0210 	orr.w	r2, r3, #16
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002462:	f043 0201 	orr.w	r2, r3, #1
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e039      	b.n	80024e2 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4618      	mov	r0, r3
 8002474:	f7ff f96c 	bl	8001750 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002478:	f7fe ffc6 	bl	8001408 <HAL_GetTick>
 800247c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800247e:	e028      	b.n	80024d2 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4618      	mov	r0, r3
 8002486:	f7ff f977 	bl	8001778 <LL_ADC_IsEnabled>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d104      	bne.n	800249a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4618      	mov	r0, r3
 8002496:	f7ff f95b 	bl	8001750 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800249a:	f7fe ffb5 	bl	8001408 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d914      	bls.n	80024d2 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d00d      	beq.n	80024d2 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ba:	f043 0210 	orr.w	r2, r3, #16
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c6:	f043 0201 	orr.w	r2, r3, #1
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e007      	b.n	80024e2 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0301 	and.w	r3, r3, #1
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d1cf      	bne.n	8002480 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80024e0:	2300      	movs	r3, #0
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3710      	adds	r7, #16
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	8000003f 	.word	0x8000003f

080024f0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024fc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002502:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002506:	2b00      	cmp	r3, #0
 8002508:	d14b      	bne.n	80025a2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800250e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0308 	and.w	r3, r3, #8
 8002520:	2b00      	cmp	r3, #0
 8002522:	d021      	beq.n	8002568 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4618      	mov	r0, r3
 800252a:	f7ff f826 	bl	800157a <LL_ADC_REG_IsTriggerSourceSWStart>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d032      	beq.n	800259a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d12b      	bne.n	800259a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002546:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002552:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d11f      	bne.n	800259a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800255e:	f043 0201 	orr.w	r2, r3, #1
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	655a      	str	r2, [r3, #84]	; 0x54
 8002566:	e018      	b.n	800259a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	f003 0302 	and.w	r3, r3, #2
 8002572:	2b00      	cmp	r3, #0
 8002574:	d111      	bne.n	800259a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800257a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002586:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d105      	bne.n	800259a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002592:	f043 0201 	orr.w	r2, r3, #1
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800259a:	68f8      	ldr	r0, [r7, #12]
 800259c:	f7fe fb9a 	bl	8000cd4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80025a0:	e00e      	b.n	80025c0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025a6:	f003 0310 	and.w	r3, r3, #16
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d003      	beq.n	80025b6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80025ae:	68f8      	ldr	r0, [r7, #12]
 80025b0:	f7ff fb42 	bl	8001c38 <HAL_ADC_ErrorCallback>
}
 80025b4:	e004      	b.n	80025c0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	4798      	blx	r3
}
 80025c0:	bf00      	nop
 80025c2:	3710      	adds	r7, #16
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80025d6:	68f8      	ldr	r0, [r7, #12]
 80025d8:	f7fe fb4e 	bl	8000c78 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80025dc:	bf00      	nop
 80025de:	3710      	adds	r7, #16
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}

080025e4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f0:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002602:	f043 0204 	orr.w	r2, r3, #4
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800260a:	68f8      	ldr	r0, [r7, #12]
 800260c:	f7ff fb14 	bl	8001c38 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002610:	bf00      	nop
 8002612:	3710      	adds	r7, #16
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}

08002618 <LL_ADC_IsEnabled>:
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	f003 0301 	and.w	r3, r3, #1
 8002628:	2b01      	cmp	r3, #1
 800262a:	d101      	bne.n	8002630 <LL_ADC_IsEnabled+0x18>
 800262c:	2301      	movs	r3, #1
 800262e:	e000      	b.n	8002632 <LL_ADC_IsEnabled+0x1a>
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	370c      	adds	r7, #12
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr

0800263e <LL_ADC_REG_IsConversionOngoing>:
{
 800263e:	b480      	push	{r7}
 8002640:	b083      	sub	sp, #12
 8002642:	af00      	add	r7, sp, #0
 8002644:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	f003 0304 	and.w	r3, r3, #4
 800264e:	2b04      	cmp	r3, #4
 8002650:	d101      	bne.n	8002656 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002652:	2301      	movs	r3, #1
 8002654:	e000      	b.n	8002658 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002656:	2300      	movs	r3, #0
}
 8002658:	4618      	mov	r0, r3
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002664:	b590      	push	{r4, r7, lr}
 8002666:	b09f      	sub	sp, #124	; 0x7c
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800266e:	2300      	movs	r3, #0
 8002670:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800267a:	2b01      	cmp	r3, #1
 800267c:	d101      	bne.n	8002682 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800267e:	2302      	movs	r3, #2
 8002680:	e093      	b.n	80027aa <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2201      	movs	r2, #1
 8002686:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800268a:	2300      	movs	r3, #0
 800268c:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800268e:	2300      	movs	r3, #0
 8002690:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a47      	ldr	r2, [pc, #284]	; (80027b4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d102      	bne.n	80026a2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800269c:	4b46      	ldr	r3, [pc, #280]	; (80027b8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800269e:	60bb      	str	r3, [r7, #8]
 80026a0:	e001      	b.n	80026a6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80026a2:	2300      	movs	r3, #0
 80026a4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d10b      	bne.n	80026c4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026b0:	f043 0220 	orr.w	r2, r3, #32
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2200      	movs	r2, #0
 80026bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e072      	b.n	80027aa <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7ff ffb9 	bl	800263e <LL_ADC_REG_IsConversionOngoing>
 80026cc:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7ff ffb3 	bl	800263e <LL_ADC_REG_IsConversionOngoing>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d154      	bne.n	8002788 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80026de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d151      	bne.n	8002788 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80026e4:	4b35      	ldr	r3, [pc, #212]	; (80027bc <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80026e6:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d02c      	beq.n	800274a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80026f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	6859      	ldr	r1, [r3, #4]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002702:	035b      	lsls	r3, r3, #13
 8002704:	430b      	orrs	r3, r1
 8002706:	431a      	orrs	r2, r3
 8002708:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800270a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800270c:	4829      	ldr	r0, [pc, #164]	; (80027b4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800270e:	f7ff ff83 	bl	8002618 <LL_ADC_IsEnabled>
 8002712:	4604      	mov	r4, r0
 8002714:	4828      	ldr	r0, [pc, #160]	; (80027b8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002716:	f7ff ff7f 	bl	8002618 <LL_ADC_IsEnabled>
 800271a:	4603      	mov	r3, r0
 800271c:	431c      	orrs	r4, r3
 800271e:	4828      	ldr	r0, [pc, #160]	; (80027c0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002720:	f7ff ff7a 	bl	8002618 <LL_ADC_IsEnabled>
 8002724:	4603      	mov	r3, r0
 8002726:	4323      	orrs	r3, r4
 8002728:	2b00      	cmp	r3, #0
 800272a:	d137      	bne.n	800279c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800272c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002734:	f023 030f 	bic.w	r3, r3, #15
 8002738:	683a      	ldr	r2, [r7, #0]
 800273a:	6811      	ldr	r1, [r2, #0]
 800273c:	683a      	ldr	r2, [r7, #0]
 800273e:	6892      	ldr	r2, [r2, #8]
 8002740:	430a      	orrs	r2, r1
 8002742:	431a      	orrs	r2, r3
 8002744:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002746:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002748:	e028      	b.n	800279c <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800274a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002752:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002754:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002756:	4817      	ldr	r0, [pc, #92]	; (80027b4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002758:	f7ff ff5e 	bl	8002618 <LL_ADC_IsEnabled>
 800275c:	4604      	mov	r4, r0
 800275e:	4816      	ldr	r0, [pc, #88]	; (80027b8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002760:	f7ff ff5a 	bl	8002618 <LL_ADC_IsEnabled>
 8002764:	4603      	mov	r3, r0
 8002766:	431c      	orrs	r4, r3
 8002768:	4815      	ldr	r0, [pc, #84]	; (80027c0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800276a:	f7ff ff55 	bl	8002618 <LL_ADC_IsEnabled>
 800276e:	4603      	mov	r3, r0
 8002770:	4323      	orrs	r3, r4
 8002772:	2b00      	cmp	r3, #0
 8002774:	d112      	bne.n	800279c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002776:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800277e:	f023 030f 	bic.w	r3, r3, #15
 8002782:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002784:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002786:	e009      	b.n	800279c <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800278c:	f043 0220 	orr.w	r2, r3, #32
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800279a:	e000      	b.n	800279e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800279c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80027a6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	377c      	adds	r7, #124	; 0x7c
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd90      	pop	{r4, r7, pc}
 80027b2:	bf00      	nop
 80027b4:	50040000 	.word	0x50040000
 80027b8:	50040100 	.word	0x50040100
 80027bc:	50040300 	.word	0x50040300
 80027c0:	50040200 	.word	0x50040200

080027c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b085      	sub	sp, #20
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f003 0307 	and.w	r3, r3, #7
 80027d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027d4:	4b0c      	ldr	r3, [pc, #48]	; (8002808 <__NVIC_SetPriorityGrouping+0x44>)
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027da:	68ba      	ldr	r2, [r7, #8]
 80027dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027e0:	4013      	ands	r3, r2
 80027e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027f6:	4a04      	ldr	r2, [pc, #16]	; (8002808 <__NVIC_SetPriorityGrouping+0x44>)
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	60d3      	str	r3, [r2, #12]
}
 80027fc:	bf00      	nop
 80027fe:	3714      	adds	r7, #20
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr
 8002808:	e000ed00 	.word	0xe000ed00

0800280c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800280c:	b480      	push	{r7}
 800280e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002810:	4b04      	ldr	r3, [pc, #16]	; (8002824 <__NVIC_GetPriorityGrouping+0x18>)
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	0a1b      	lsrs	r3, r3, #8
 8002816:	f003 0307 	and.w	r3, r3, #7
}
 800281a:	4618      	mov	r0, r3
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr
 8002824:	e000ed00 	.word	0xe000ed00

08002828 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	4603      	mov	r3, r0
 8002830:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002836:	2b00      	cmp	r3, #0
 8002838:	db0b      	blt.n	8002852 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800283a:	79fb      	ldrb	r3, [r7, #7]
 800283c:	f003 021f 	and.w	r2, r3, #31
 8002840:	4907      	ldr	r1, [pc, #28]	; (8002860 <__NVIC_EnableIRQ+0x38>)
 8002842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002846:	095b      	lsrs	r3, r3, #5
 8002848:	2001      	movs	r0, #1
 800284a:	fa00 f202 	lsl.w	r2, r0, r2
 800284e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002852:	bf00      	nop
 8002854:	370c      	adds	r7, #12
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop
 8002860:	e000e100 	.word	0xe000e100

08002864 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	4603      	mov	r3, r0
 800286c:	6039      	str	r1, [r7, #0]
 800286e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002870:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002874:	2b00      	cmp	r3, #0
 8002876:	db0a      	blt.n	800288e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	b2da      	uxtb	r2, r3
 800287c:	490c      	ldr	r1, [pc, #48]	; (80028b0 <__NVIC_SetPriority+0x4c>)
 800287e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002882:	0112      	lsls	r2, r2, #4
 8002884:	b2d2      	uxtb	r2, r2
 8002886:	440b      	add	r3, r1
 8002888:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800288c:	e00a      	b.n	80028a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	b2da      	uxtb	r2, r3
 8002892:	4908      	ldr	r1, [pc, #32]	; (80028b4 <__NVIC_SetPriority+0x50>)
 8002894:	79fb      	ldrb	r3, [r7, #7]
 8002896:	f003 030f 	and.w	r3, r3, #15
 800289a:	3b04      	subs	r3, #4
 800289c:	0112      	lsls	r2, r2, #4
 800289e:	b2d2      	uxtb	r2, r2
 80028a0:	440b      	add	r3, r1
 80028a2:	761a      	strb	r2, [r3, #24]
}
 80028a4:	bf00      	nop
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr
 80028b0:	e000e100 	.word	0xe000e100
 80028b4:	e000ed00 	.word	0xe000ed00

080028b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b089      	sub	sp, #36	; 0x24
 80028bc:	af00      	add	r7, sp, #0
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	60b9      	str	r1, [r7, #8]
 80028c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f003 0307 	and.w	r3, r3, #7
 80028ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	f1c3 0307 	rsb	r3, r3, #7
 80028d2:	2b04      	cmp	r3, #4
 80028d4:	bf28      	it	cs
 80028d6:	2304      	movcs	r3, #4
 80028d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	3304      	adds	r3, #4
 80028de:	2b06      	cmp	r3, #6
 80028e0:	d902      	bls.n	80028e8 <NVIC_EncodePriority+0x30>
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	3b03      	subs	r3, #3
 80028e6:	e000      	b.n	80028ea <NVIC_EncodePriority+0x32>
 80028e8:	2300      	movs	r3, #0
 80028ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028ec:	f04f 32ff 	mov.w	r2, #4294967295
 80028f0:	69bb      	ldr	r3, [r7, #24]
 80028f2:	fa02 f303 	lsl.w	r3, r2, r3
 80028f6:	43da      	mvns	r2, r3
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	401a      	ands	r2, r3
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002900:	f04f 31ff 	mov.w	r1, #4294967295
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	fa01 f303 	lsl.w	r3, r1, r3
 800290a:	43d9      	mvns	r1, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002910:	4313      	orrs	r3, r2
         );
}
 8002912:	4618      	mov	r0, r3
 8002914:	3724      	adds	r7, #36	; 0x24
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
	...

08002920 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	3b01      	subs	r3, #1
 800292c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002930:	d301      	bcc.n	8002936 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002932:	2301      	movs	r3, #1
 8002934:	e00f      	b.n	8002956 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002936:	4a0a      	ldr	r2, [pc, #40]	; (8002960 <SysTick_Config+0x40>)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	3b01      	subs	r3, #1
 800293c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800293e:	210f      	movs	r1, #15
 8002940:	f04f 30ff 	mov.w	r0, #4294967295
 8002944:	f7ff ff8e 	bl	8002864 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002948:	4b05      	ldr	r3, [pc, #20]	; (8002960 <SysTick_Config+0x40>)
 800294a:	2200      	movs	r2, #0
 800294c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800294e:	4b04      	ldr	r3, [pc, #16]	; (8002960 <SysTick_Config+0x40>)
 8002950:	2207      	movs	r2, #7
 8002952:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002954:	2300      	movs	r3, #0
}
 8002956:	4618      	mov	r0, r3
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	e000e010 	.word	0xe000e010

08002964 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f7ff ff29 	bl	80027c4 <__NVIC_SetPriorityGrouping>
}
 8002972:	bf00      	nop
 8002974:	3708      	adds	r7, #8
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}

0800297a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800297a:	b580      	push	{r7, lr}
 800297c:	b086      	sub	sp, #24
 800297e:	af00      	add	r7, sp, #0
 8002980:	4603      	mov	r3, r0
 8002982:	60b9      	str	r1, [r7, #8]
 8002984:	607a      	str	r2, [r7, #4]
 8002986:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002988:	2300      	movs	r3, #0
 800298a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800298c:	f7ff ff3e 	bl	800280c <__NVIC_GetPriorityGrouping>
 8002990:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	68b9      	ldr	r1, [r7, #8]
 8002996:	6978      	ldr	r0, [r7, #20]
 8002998:	f7ff ff8e 	bl	80028b8 <NVIC_EncodePriority>
 800299c:	4602      	mov	r2, r0
 800299e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029a2:	4611      	mov	r1, r2
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7ff ff5d 	bl	8002864 <__NVIC_SetPriority>
}
 80029aa:	bf00      	nop
 80029ac:	3718      	adds	r7, #24
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b082      	sub	sp, #8
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	4603      	mov	r3, r0
 80029ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7ff ff31 	bl	8002828 <__NVIC_EnableIRQ>
}
 80029c6:	bf00      	nop
 80029c8:	3708      	adds	r7, #8
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}

080029ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029ce:	b580      	push	{r7, lr}
 80029d0:	b082      	sub	sp, #8
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f7ff ffa2 	bl	8002920 <SysTick_Config>
 80029dc:	4603      	mov	r3, r0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3708      	adds	r7, #8
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}

080029e6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80029e6:	b580      	push	{r7, lr}
 80029e8:	b082      	sub	sp, #8
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d101      	bne.n	80029f8 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e014      	b.n	8002a22 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	791b      	ldrb	r3, [r3, #4]
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d105      	bne.n	8002a0e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f7fe f82d 	bl	8000a68 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2202      	movs	r2, #2
 8002a12:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002a20:	2300      	movs	r3, #0
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3708      	adds	r7, #8
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
	...

08002a2c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b086      	sub	sp, #24
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	60b9      	str	r1, [r7, #8]
 8002a36:	607a      	str	r2, [r7, #4]
 8002a38:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	795b      	ldrb	r3, [r3, #5]
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d101      	bne.n	8002a4a <HAL_DAC_Start_DMA+0x1e>
 8002a46:	2302      	movs	r3, #2
 8002a48:	e0ab      	b.n	8002ba2 <HAL_DAC_Start_DMA+0x176>
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2202      	movs	r2, #2
 8002a54:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d12f      	bne.n	8002abc <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	4a52      	ldr	r2, [pc, #328]	; (8002bac <HAL_DAC_Start_DMA+0x180>)
 8002a62:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	4a51      	ldr	r2, [pc, #324]	; (8002bb0 <HAL_DAC_Start_DMA+0x184>)
 8002a6a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	4a50      	ldr	r2, [pc, #320]	; (8002bb4 <HAL_DAC_Start_DMA+0x188>)
 8002a72:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002a82:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8002a84:	6a3b      	ldr	r3, [r7, #32]
 8002a86:	2b08      	cmp	r3, #8
 8002a88:	d013      	beq.n	8002ab2 <HAL_DAC_Start_DMA+0x86>
 8002a8a:	6a3b      	ldr	r3, [r7, #32]
 8002a8c:	2b08      	cmp	r3, #8
 8002a8e:	d845      	bhi.n	8002b1c <HAL_DAC_Start_DMA+0xf0>
 8002a90:	6a3b      	ldr	r3, [r7, #32]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d003      	beq.n	8002a9e <HAL_DAC_Start_DMA+0x72>
 8002a96:	6a3b      	ldr	r3, [r7, #32]
 8002a98:	2b04      	cmp	r3, #4
 8002a9a:	d005      	beq.n	8002aa8 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8002a9c:	e03e      	b.n	8002b1c <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	3308      	adds	r3, #8
 8002aa4:	613b      	str	r3, [r7, #16]
        break;
 8002aa6:	e03c      	b.n	8002b22 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	330c      	adds	r3, #12
 8002aae:	613b      	str	r3, [r7, #16]
        break;
 8002ab0:	e037      	b.n	8002b22 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	3310      	adds	r3, #16
 8002ab8:	613b      	str	r3, [r7, #16]
        break;
 8002aba:	e032      	b.n	8002b22 <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	4a3d      	ldr	r2, [pc, #244]	; (8002bb8 <HAL_DAC_Start_DMA+0x18c>)
 8002ac2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	4a3c      	ldr	r2, [pc, #240]	; (8002bbc <HAL_DAC_Start_DMA+0x190>)
 8002aca:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	4a3b      	ldr	r2, [pc, #236]	; (8002bc0 <HAL_DAC_Start_DMA+0x194>)
 8002ad2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002ae2:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8002ae4:	6a3b      	ldr	r3, [r7, #32]
 8002ae6:	2b08      	cmp	r3, #8
 8002ae8:	d013      	beq.n	8002b12 <HAL_DAC_Start_DMA+0xe6>
 8002aea:	6a3b      	ldr	r3, [r7, #32]
 8002aec:	2b08      	cmp	r3, #8
 8002aee:	d817      	bhi.n	8002b20 <HAL_DAC_Start_DMA+0xf4>
 8002af0:	6a3b      	ldr	r3, [r7, #32]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d003      	beq.n	8002afe <HAL_DAC_Start_DMA+0xd2>
 8002af6:	6a3b      	ldr	r3, [r7, #32]
 8002af8:	2b04      	cmp	r3, #4
 8002afa:	d005      	beq.n	8002b08 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8002afc:	e010      	b.n	8002b20 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	3314      	adds	r3, #20
 8002b04:	613b      	str	r3, [r7, #16]
        break;
 8002b06:	e00c      	b.n	8002b22 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	3318      	adds	r3, #24
 8002b0e:	613b      	str	r3, [r7, #16]
        break;
 8002b10:	e007      	b.n	8002b22 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	331c      	adds	r3, #28
 8002b18:	613b      	str	r3, [r7, #16]
        break;
 8002b1a:	e002      	b.n	8002b22 <HAL_DAC_Start_DMA+0xf6>
        break;
 8002b1c:	bf00      	nop
 8002b1e:	e000      	b.n	8002b22 <HAL_DAC_Start_DMA+0xf6>
        break;
 8002b20:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d111      	bne.n	8002b4c <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b36:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6898      	ldr	r0, [r3, #8]
 8002b3c:	6879      	ldr	r1, [r7, #4]
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	693a      	ldr	r2, [r7, #16]
 8002b42:	f000 fab9 	bl	80030b8 <HAL_DMA_Start_IT>
 8002b46:	4603      	mov	r3, r0
 8002b48:	75fb      	strb	r3, [r7, #23]
 8002b4a:	e010      	b.n	8002b6e <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002b5a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	68d8      	ldr	r0, [r3, #12]
 8002b60:	6879      	ldr	r1, [r7, #4]
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	693a      	ldr	r2, [r7, #16]
 8002b66:	f000 faa7 	bl	80030b8 <HAL_DMA_Start_IT>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2200      	movs	r2, #0
 8002b72:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8002b74:	7dfb      	ldrb	r3, [r7, #23]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d10c      	bne.n	8002b94 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	6819      	ldr	r1, [r3, #0]
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	f003 0310 	and.w	r3, r3, #16
 8002b86:	2201      	movs	r2, #1
 8002b88:	409a      	lsls	r2, r3
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	430a      	orrs	r2, r1
 8002b90:	601a      	str	r2, [r3, #0]
 8002b92:	e005      	b.n	8002ba0 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	691b      	ldr	r3, [r3, #16]
 8002b98:	f043 0204 	orr.w	r2, r3, #4
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8002ba0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3718      	adds	r7, #24
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	08002e35 	.word	0x08002e35
 8002bb0:	08002e57 	.word	0x08002e57
 8002bb4:	08002e73 	.word	0x08002e73
 8002bb8:	08002edd 	.word	0x08002edd
 8002bbc:	08002eff 	.word	0x08002eff
 8002bc0:	08002f1b 	.word	0x08002f1b

08002bc4 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8002bcc:	bf00      	nop
 8002bce:	370c      	adds	r7, #12
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr

08002bd8 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002be0:	bf00      	nop
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr

08002bec <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8002bf4:	bf00      	nop
 8002bf6:	370c      	adds	r7, #12
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr

08002c00 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b088      	sub	sp, #32
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	795b      	ldrb	r3, [r3, #5]
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d101      	bne.n	8002c1c <HAL_DAC_ConfigChannel+0x1c>
 8002c18:	2302      	movs	r3, #2
 8002c1a:	e107      	b.n	8002e2c <HAL_DAC_ConfigChannel+0x22c>
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2202      	movs	r2, #2
 8002c26:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2b04      	cmp	r3, #4
 8002c2e:	d174      	bne.n	8002d1a <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002c30:	f7fe fbea 	bl	8001408 <HAL_GetTick>
 8002c34:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d134      	bne.n	8002ca6 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002c3c:	e011      	b.n	8002c62 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002c3e:	f7fe fbe3 	bl	8001408 <HAL_GetTick>
 8002c42:	4602      	mov	r2, r0
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d90a      	bls.n	8002c62 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	691b      	ldr	r3, [r3, #16]
 8002c50:	f043 0208 	orr.w	r2, r3, #8
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2203      	movs	r2, #3
 8002c5c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e0e4      	b.n	8002e2c <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d1e6      	bne.n	8002c3e <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8002c70:	2001      	movs	r0, #1
 8002c72:	f7fe fbd5 	bl	8001420 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	68ba      	ldr	r2, [r7, #8]
 8002c7c:	6992      	ldr	r2, [r2, #24]
 8002c7e:	641a      	str	r2, [r3, #64]	; 0x40
 8002c80:	e01e      	b.n	8002cc0 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002c82:	f7fe fbc1 	bl	8001408 <HAL_GetTick>
 8002c86:	4602      	mov	r2, r0
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d90a      	bls.n	8002ca6 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	691b      	ldr	r3, [r3, #16]
 8002c94:	f043 0208 	orr.w	r2, r3, #8
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2203      	movs	r2, #3
 8002ca0:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e0c2      	b.n	8002e2c <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	dbe8      	blt.n	8002c82 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8002cb0:	2001      	movs	r0, #1
 8002cb2:	f7fe fbb5 	bl	8001420 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	68ba      	ldr	r2, [r7, #8]
 8002cbc:	6992      	ldr	r2, [r2, #24]
 8002cbe:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f003 0310 	and.w	r3, r3, #16
 8002ccc:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002cd0:	fa01 f303 	lsl.w	r3, r1, r3
 8002cd4:	43db      	mvns	r3, r3
 8002cd6:	ea02 0103 	and.w	r1, r2, r3
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	69da      	ldr	r2, [r3, #28]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f003 0310 	and.w	r3, r3, #16
 8002ce4:	409a      	lsls	r2, r3
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	430a      	orrs	r2, r1
 8002cec:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f003 0310 	and.w	r3, r3, #16
 8002cfa:	21ff      	movs	r1, #255	; 0xff
 8002cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8002d00:	43db      	mvns	r3, r3
 8002d02:	ea02 0103 	and.w	r1, r2, r3
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	6a1a      	ldr	r2, [r3, #32]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f003 0310 	and.w	r3, r3, #16
 8002d10:	409a      	lsls	r2, r3
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	430a      	orrs	r2, r1
 8002d18:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	691b      	ldr	r3, [r3, #16]
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d11d      	bne.n	8002d5e <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d28:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f003 0310 	and.w	r3, r3, #16
 8002d30:	221f      	movs	r2, #31
 8002d32:	fa02 f303 	lsl.w	r3, r2, r3
 8002d36:	43db      	mvns	r3, r3
 8002d38:	69ba      	ldr	r2, [r7, #24]
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	695b      	ldr	r3, [r3, #20]
 8002d42:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f003 0310 	and.w	r3, r3, #16
 8002d4a:	697a      	ldr	r2, [r7, #20]
 8002d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d50:	69ba      	ldr	r2, [r7, #24]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	69ba      	ldr	r2, [r7, #24]
 8002d5c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d64:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f003 0310 	and.w	r3, r3, #16
 8002d6c:	2207      	movs	r2, #7
 8002d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d72:	43db      	mvns	r3, r3
 8002d74:	69ba      	ldr	r2, [r7, #24]
 8002d76:	4013      	ands	r3, r2
 8002d78:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	431a      	orrs	r2, r3
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f003 0310 	and.w	r3, r3, #16
 8002d92:	697a      	ldr	r2, [r7, #20]
 8002d94:	fa02 f303 	lsl.w	r3, r2, r3
 8002d98:	69ba      	ldr	r2, [r7, #24]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	69ba      	ldr	r2, [r7, #24]
 8002da4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	6819      	ldr	r1, [r3, #0]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f003 0310 	and.w	r3, r3, #16
 8002db2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002db6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dba:	43da      	mvns	r2, r3
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	400a      	ands	r2, r1
 8002dc2:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f003 0310 	and.w	r3, r3, #16
 8002dd2:	f640 72fc 	movw	r2, #4092	; 0xffc
 8002dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dda:	43db      	mvns	r3, r3
 8002ddc:	69ba      	ldr	r2, [r7, #24]
 8002dde:	4013      	ands	r3, r2
 8002de0:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f003 0310 	and.w	r3, r3, #16
 8002dee:	697a      	ldr	r2, [r7, #20]
 8002df0:	fa02 f303 	lsl.w	r3, r2, r3
 8002df4:	69ba      	ldr	r2, [r7, #24]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	69ba      	ldr	r2, [r7, #24]
 8002e00:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	6819      	ldr	r1, [r3, #0]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f003 0310 	and.w	r3, r3, #16
 8002e0e:	22c0      	movs	r2, #192	; 0xc0
 8002e10:	fa02 f303 	lsl.w	r3, r2, r3
 8002e14:	43da      	mvns	r2, r3
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	400a      	ands	r2, r1
 8002e1c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2201      	movs	r2, #1
 8002e22:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2200      	movs	r2, #0
 8002e28:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002e2a:	2300      	movs	r3, #0
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3720      	adds	r7, #32
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e40:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8002e42:	68f8      	ldr	r0, [r7, #12]
 8002e44:	f7ff febe 	bl	8002bc4 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	711a      	strb	r2, [r3, #4]
}
 8002e4e:	bf00      	nop
 8002e50:	3710      	adds	r7, #16
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}

08002e56 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002e56:	b580      	push	{r7, lr}
 8002e58:	b084      	sub	sp, #16
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e62:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002e64:	68f8      	ldr	r0, [r7, #12]
 8002e66:	f7ff feb7 	bl	8002bd8 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002e6a:	bf00      	nop
 8002e6c:	3710      	adds	r7, #16
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}

08002e72 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8002e72:	b580      	push	{r7, lr}
 8002e74:	b084      	sub	sp, #16
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e7e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	691b      	ldr	r3, [r3, #16]
 8002e84:	f043 0204 	orr.w	r2, r3, #4
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8002e8c:	68f8      	ldr	r0, [r7, #12]
 8002e8e:	f7ff fead 	bl	8002bec <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2201      	movs	r2, #1
 8002e96:	711a      	strb	r2, [r3, #4]
}
 8002e98:	bf00      	nop
 8002e9a:	3710      	adds	r7, #16
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8002ea8:	bf00      	nop
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002ebc:	bf00      	nop
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8002ed0:	bf00      	nop
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr

08002edc <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ee8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8002eea:	68f8      	ldr	r0, [r7, #12]
 8002eec:	f7ff ffd8 	bl	8002ea0 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	711a      	strb	r2, [r3, #4]
}
 8002ef6:	bf00      	nop
 8002ef8:	3710      	adds	r7, #16
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}

08002efe <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002efe:	b580      	push	{r7, lr}
 8002f00:	b084      	sub	sp, #16
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f0a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8002f0c:	68f8      	ldr	r0, [r7, #12]
 8002f0e:	f7ff ffd1 	bl	8002eb4 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002f12:	bf00      	nop
 8002f14:	3710      	adds	r7, #16
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}

08002f1a <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8002f1a:	b580      	push	{r7, lr}
 8002f1c:	b084      	sub	sp, #16
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f26:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	691b      	ldr	r3, [r3, #16]
 8002f2c:	f043 0204 	orr.w	r2, r3, #4
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8002f34:	68f8      	ldr	r0, [r7, #12]
 8002f36:	f7ff ffc7 	bl	8002ec8 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	711a      	strb	r2, [r3, #4]
}
 8002f40:	bf00      	nop
 8002f42:	3710      	adds	r7, #16
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b085      	sub	sp, #20
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d101      	bne.n	8002f5a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e098      	b.n	800308c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	461a      	mov	r2, r3
 8002f60:	4b4d      	ldr	r3, [pc, #308]	; (8003098 <HAL_DMA_Init+0x150>)
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d80f      	bhi.n	8002f86 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	4b4b      	ldr	r3, [pc, #300]	; (800309c <HAL_DMA_Init+0x154>)
 8002f6e:	4413      	add	r3, r2
 8002f70:	4a4b      	ldr	r2, [pc, #300]	; (80030a0 <HAL_DMA_Init+0x158>)
 8002f72:	fba2 2303 	umull	r2, r3, r2, r3
 8002f76:	091b      	lsrs	r3, r3, #4
 8002f78:	009a      	lsls	r2, r3, #2
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a48      	ldr	r2, [pc, #288]	; (80030a4 <HAL_DMA_Init+0x15c>)
 8002f82:	641a      	str	r2, [r3, #64]	; 0x40
 8002f84:	e00e      	b.n	8002fa4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	4b46      	ldr	r3, [pc, #280]	; (80030a8 <HAL_DMA_Init+0x160>)
 8002f8e:	4413      	add	r3, r2
 8002f90:	4a43      	ldr	r2, [pc, #268]	; (80030a0 <HAL_DMA_Init+0x158>)
 8002f92:	fba2 2303 	umull	r2, r3, r2, r3
 8002f96:	091b      	lsrs	r3, r3, #4
 8002f98:	009a      	lsls	r2, r3, #2
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a42      	ldr	r2, [pc, #264]	; (80030ac <HAL_DMA_Init+0x164>)
 8002fa2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2202      	movs	r2, #2
 8002fa8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002fba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fbe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002fc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	699b      	ldr	r3, [r3, #24]
 8002fda:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fe0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6a1b      	ldr	r3, [r3, #32]
 8002fe6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002fe8:	68fa      	ldr	r2, [r7, #12]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	68fa      	ldr	r2, [r7, #12]
 8002ff4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ffe:	d039      	beq.n	8003074 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003004:	4a27      	ldr	r2, [pc, #156]	; (80030a4 <HAL_DMA_Init+0x15c>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d11a      	bne.n	8003040 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800300a:	4b29      	ldr	r3, [pc, #164]	; (80030b0 <HAL_DMA_Init+0x168>)
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003012:	f003 031c 	and.w	r3, r3, #28
 8003016:	210f      	movs	r1, #15
 8003018:	fa01 f303 	lsl.w	r3, r1, r3
 800301c:	43db      	mvns	r3, r3
 800301e:	4924      	ldr	r1, [pc, #144]	; (80030b0 <HAL_DMA_Init+0x168>)
 8003020:	4013      	ands	r3, r2
 8003022:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003024:	4b22      	ldr	r3, [pc, #136]	; (80030b0 <HAL_DMA_Init+0x168>)
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6859      	ldr	r1, [r3, #4]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003030:	f003 031c 	and.w	r3, r3, #28
 8003034:	fa01 f303 	lsl.w	r3, r1, r3
 8003038:	491d      	ldr	r1, [pc, #116]	; (80030b0 <HAL_DMA_Init+0x168>)
 800303a:	4313      	orrs	r3, r2
 800303c:	600b      	str	r3, [r1, #0]
 800303e:	e019      	b.n	8003074 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003040:	4b1c      	ldr	r3, [pc, #112]	; (80030b4 <HAL_DMA_Init+0x16c>)
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003048:	f003 031c 	and.w	r3, r3, #28
 800304c:	210f      	movs	r1, #15
 800304e:	fa01 f303 	lsl.w	r3, r1, r3
 8003052:	43db      	mvns	r3, r3
 8003054:	4917      	ldr	r1, [pc, #92]	; (80030b4 <HAL_DMA_Init+0x16c>)
 8003056:	4013      	ands	r3, r2
 8003058:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800305a:	4b16      	ldr	r3, [pc, #88]	; (80030b4 <HAL_DMA_Init+0x16c>)
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6859      	ldr	r1, [r3, #4]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003066:	f003 031c 	and.w	r3, r3, #28
 800306a:	fa01 f303 	lsl.w	r3, r1, r3
 800306e:	4911      	ldr	r1, [pc, #68]	; (80030b4 <HAL_DMA_Init+0x16c>)
 8003070:	4313      	orrs	r3, r2
 8003072:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2201      	movs	r2, #1
 800307e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800308a:	2300      	movs	r3, #0
}
 800308c:	4618      	mov	r0, r3
 800308e:	3714      	adds	r7, #20
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr
 8003098:	40020407 	.word	0x40020407
 800309c:	bffdfff8 	.word	0xbffdfff8
 80030a0:	cccccccd 	.word	0xcccccccd
 80030a4:	40020000 	.word	0x40020000
 80030a8:	bffdfbf8 	.word	0xbffdfbf8
 80030ac:	40020400 	.word	0x40020400
 80030b0:	400200a8 	.word	0x400200a8
 80030b4:	400204a8 	.word	0x400204a8

080030b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b086      	sub	sp, #24
 80030bc:	af00      	add	r7, sp, #0
 80030be:	60f8      	str	r0, [r7, #12]
 80030c0:	60b9      	str	r1, [r7, #8]
 80030c2:	607a      	str	r2, [r7, #4]
 80030c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030c6:	2300      	movs	r3, #0
 80030c8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d101      	bne.n	80030d8 <HAL_DMA_Start_IT+0x20>
 80030d4:	2302      	movs	r3, #2
 80030d6:	e04b      	b.n	8003170 <HAL_DMA_Start_IT+0xb8>
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d13a      	bne.n	8003162 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2202      	movs	r2, #2
 80030f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2200      	movs	r2, #0
 80030f8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f022 0201 	bic.w	r2, r2, #1
 8003108:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	68b9      	ldr	r1, [r7, #8]
 8003110:	68f8      	ldr	r0, [r7, #12]
 8003112:	f000 f8e0 	bl	80032d6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800311a:	2b00      	cmp	r3, #0
 800311c:	d008      	beq.n	8003130 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f042 020e 	orr.w	r2, r2, #14
 800312c:	601a      	str	r2, [r3, #0]
 800312e:	e00f      	b.n	8003150 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f022 0204 	bic.w	r2, r2, #4
 800313e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f042 020a 	orr.w	r2, r2, #10
 800314e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f042 0201 	orr.w	r2, r2, #1
 800315e:	601a      	str	r2, [r3, #0]
 8003160:	e005      	b.n	800316e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2200      	movs	r2, #0
 8003166:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800316a:	2302      	movs	r3, #2
 800316c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800316e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003170:	4618      	mov	r0, r3
 8003172:	3718      	adds	r7, #24
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}

08003178 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003194:	f003 031c 	and.w	r3, r3, #28
 8003198:	2204      	movs	r2, #4
 800319a:	409a      	lsls	r2, r3
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	4013      	ands	r3, r2
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d026      	beq.n	80031f2 <HAL_DMA_IRQHandler+0x7a>
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	f003 0304 	and.w	r3, r3, #4
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d021      	beq.n	80031f2 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 0320 	and.w	r3, r3, #32
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d107      	bne.n	80031cc <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f022 0204 	bic.w	r2, r2, #4
 80031ca:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031d0:	f003 021c 	and.w	r2, r3, #28
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d8:	2104      	movs	r1, #4
 80031da:	fa01 f202 	lsl.w	r2, r1, r2
 80031de:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d071      	beq.n	80032cc <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80031f0:	e06c      	b.n	80032cc <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031f6:	f003 031c 	and.w	r3, r3, #28
 80031fa:	2202      	movs	r2, #2
 80031fc:	409a      	lsls	r2, r3
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	4013      	ands	r3, r2
 8003202:	2b00      	cmp	r3, #0
 8003204:	d02e      	beq.n	8003264 <HAL_DMA_IRQHandler+0xec>
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	f003 0302 	and.w	r3, r3, #2
 800320c:	2b00      	cmp	r3, #0
 800320e:	d029      	beq.n	8003264 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0320 	and.w	r3, r3, #32
 800321a:	2b00      	cmp	r3, #0
 800321c:	d10b      	bne.n	8003236 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f022 020a 	bic.w	r2, r2, #10
 800322c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2201      	movs	r2, #1
 8003232:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800323a:	f003 021c 	and.w	r2, r3, #28
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003242:	2102      	movs	r1, #2
 8003244:	fa01 f202 	lsl.w	r2, r1, r2
 8003248:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003256:	2b00      	cmp	r3, #0
 8003258:	d038      	beq.n	80032cc <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003262:	e033      	b.n	80032cc <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003268:	f003 031c 	and.w	r3, r3, #28
 800326c:	2208      	movs	r2, #8
 800326e:	409a      	lsls	r2, r3
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	4013      	ands	r3, r2
 8003274:	2b00      	cmp	r3, #0
 8003276:	d02a      	beq.n	80032ce <HAL_DMA_IRQHandler+0x156>
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	f003 0308 	and.w	r3, r3, #8
 800327e:	2b00      	cmp	r3, #0
 8003280:	d025      	beq.n	80032ce <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f022 020e 	bic.w	r2, r2, #14
 8003290:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003296:	f003 021c 	and.w	r2, r3, #28
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329e:	2101      	movs	r1, #1
 80032a0:	fa01 f202 	lsl.w	r2, r1, r2
 80032a4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2201      	movs	r2, #1
 80032aa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2200      	movs	r2, #0
 80032b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d004      	beq.n	80032ce <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80032cc:	bf00      	nop
 80032ce:	bf00      	nop
}
 80032d0:	3710      	adds	r7, #16
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}

080032d6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032d6:	b480      	push	{r7}
 80032d8:	b085      	sub	sp, #20
 80032da:	af00      	add	r7, sp, #0
 80032dc:	60f8      	str	r0, [r7, #12]
 80032de:	60b9      	str	r1, [r7, #8]
 80032e0:	607a      	str	r2, [r7, #4]
 80032e2:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e8:	f003 021c 	and.w	r2, r3, #28
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f0:	2101      	movs	r1, #1
 80032f2:	fa01 f202 	lsl.w	r2, r1, r2
 80032f6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	683a      	ldr	r2, [r7, #0]
 80032fe:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	2b10      	cmp	r3, #16
 8003306:	d108      	bne.n	800331a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	68ba      	ldr	r2, [r7, #8]
 8003316:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003318:	e007      	b.n	800332a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	68ba      	ldr	r2, [r7, #8]
 8003320:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	60da      	str	r2, [r3, #12]
}
 800332a:	bf00      	nop
 800332c:	3714      	adds	r7, #20
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr
	...

08003338 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003338:	b480      	push	{r7}
 800333a:	b087      	sub	sp, #28
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003342:	2300      	movs	r3, #0
 8003344:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003346:	e17f      	b.n	8003648 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	2101      	movs	r1, #1
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	fa01 f303 	lsl.w	r3, r1, r3
 8003354:	4013      	ands	r3, r2
 8003356:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2b00      	cmp	r3, #0
 800335c:	f000 8171 	beq.w	8003642 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f003 0303 	and.w	r3, r3, #3
 8003368:	2b01      	cmp	r3, #1
 800336a:	d005      	beq.n	8003378 <HAL_GPIO_Init+0x40>
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f003 0303 	and.w	r3, r3, #3
 8003374:	2b02      	cmp	r3, #2
 8003376:	d130      	bne.n	80033da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	005b      	lsls	r3, r3, #1
 8003382:	2203      	movs	r2, #3
 8003384:	fa02 f303 	lsl.w	r3, r2, r3
 8003388:	43db      	mvns	r3, r3
 800338a:	693a      	ldr	r2, [r7, #16]
 800338c:	4013      	ands	r3, r2
 800338e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	68da      	ldr	r2, [r3, #12]
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	005b      	lsls	r3, r3, #1
 8003398:	fa02 f303 	lsl.w	r3, r2, r3
 800339c:	693a      	ldr	r2, [r7, #16]
 800339e:	4313      	orrs	r3, r2
 80033a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	693a      	ldr	r2, [r7, #16]
 80033a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80033ae:	2201      	movs	r2, #1
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	fa02 f303 	lsl.w	r3, r2, r3
 80033b6:	43db      	mvns	r3, r3
 80033b8:	693a      	ldr	r2, [r7, #16]
 80033ba:	4013      	ands	r3, r2
 80033bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	091b      	lsrs	r3, r3, #4
 80033c4:	f003 0201 	and.w	r2, r3, #1
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	fa02 f303 	lsl.w	r3, r2, r3
 80033ce:	693a      	ldr	r2, [r7, #16]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	693a      	ldr	r2, [r7, #16]
 80033d8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f003 0303 	and.w	r3, r3, #3
 80033e2:	2b03      	cmp	r3, #3
 80033e4:	d118      	bne.n	8003418 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80033ec:	2201      	movs	r2, #1
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	fa02 f303 	lsl.w	r3, r2, r3
 80033f4:	43db      	mvns	r3, r3
 80033f6:	693a      	ldr	r2, [r7, #16]
 80033f8:	4013      	ands	r3, r2
 80033fa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	08db      	lsrs	r3, r3, #3
 8003402:	f003 0201 	and.w	r2, r3, #1
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	fa02 f303 	lsl.w	r3, r2, r3
 800340c:	693a      	ldr	r2, [r7, #16]
 800340e:	4313      	orrs	r3, r2
 8003410:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	693a      	ldr	r2, [r7, #16]
 8003416:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f003 0303 	and.w	r3, r3, #3
 8003420:	2b03      	cmp	r3, #3
 8003422:	d017      	beq.n	8003454 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	005b      	lsls	r3, r3, #1
 800342e:	2203      	movs	r2, #3
 8003430:	fa02 f303 	lsl.w	r3, r2, r3
 8003434:	43db      	mvns	r3, r3
 8003436:	693a      	ldr	r2, [r7, #16]
 8003438:	4013      	ands	r3, r2
 800343a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	689a      	ldr	r2, [r3, #8]
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	005b      	lsls	r3, r3, #1
 8003444:	fa02 f303 	lsl.w	r3, r2, r3
 8003448:	693a      	ldr	r2, [r7, #16]
 800344a:	4313      	orrs	r3, r2
 800344c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	693a      	ldr	r2, [r7, #16]
 8003452:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f003 0303 	and.w	r3, r3, #3
 800345c:	2b02      	cmp	r3, #2
 800345e:	d123      	bne.n	80034a8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	08da      	lsrs	r2, r3, #3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	3208      	adds	r2, #8
 8003468:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800346c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	f003 0307 	and.w	r3, r3, #7
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	220f      	movs	r2, #15
 8003478:	fa02 f303 	lsl.w	r3, r2, r3
 800347c:	43db      	mvns	r3, r3
 800347e:	693a      	ldr	r2, [r7, #16]
 8003480:	4013      	ands	r3, r2
 8003482:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	691a      	ldr	r2, [r3, #16]
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	f003 0307 	and.w	r3, r3, #7
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	fa02 f303 	lsl.w	r3, r2, r3
 8003494:	693a      	ldr	r2, [r7, #16]
 8003496:	4313      	orrs	r3, r2
 8003498:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	08da      	lsrs	r2, r3, #3
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	3208      	adds	r2, #8
 80034a2:	6939      	ldr	r1, [r7, #16]
 80034a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	005b      	lsls	r3, r3, #1
 80034b2:	2203      	movs	r2, #3
 80034b4:	fa02 f303 	lsl.w	r3, r2, r3
 80034b8:	43db      	mvns	r3, r3
 80034ba:	693a      	ldr	r2, [r7, #16]
 80034bc:	4013      	ands	r3, r2
 80034be:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f003 0203 	and.w	r2, r3, #3
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	005b      	lsls	r3, r3, #1
 80034cc:	fa02 f303 	lsl.w	r3, r2, r3
 80034d0:	693a      	ldr	r2, [r7, #16]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	693a      	ldr	r2, [r7, #16]
 80034da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	f000 80ac 	beq.w	8003642 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034ea:	4b5f      	ldr	r3, [pc, #380]	; (8003668 <HAL_GPIO_Init+0x330>)
 80034ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034ee:	4a5e      	ldr	r2, [pc, #376]	; (8003668 <HAL_GPIO_Init+0x330>)
 80034f0:	f043 0301 	orr.w	r3, r3, #1
 80034f4:	6613      	str	r3, [r2, #96]	; 0x60
 80034f6:	4b5c      	ldr	r3, [pc, #368]	; (8003668 <HAL_GPIO_Init+0x330>)
 80034f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034fa:	f003 0301 	and.w	r3, r3, #1
 80034fe:	60bb      	str	r3, [r7, #8]
 8003500:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003502:	4a5a      	ldr	r2, [pc, #360]	; (800366c <HAL_GPIO_Init+0x334>)
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	089b      	lsrs	r3, r3, #2
 8003508:	3302      	adds	r3, #2
 800350a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800350e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	f003 0303 	and.w	r3, r3, #3
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	220f      	movs	r2, #15
 800351a:	fa02 f303 	lsl.w	r3, r2, r3
 800351e:	43db      	mvns	r3, r3
 8003520:	693a      	ldr	r2, [r7, #16]
 8003522:	4013      	ands	r3, r2
 8003524:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800352c:	d025      	beq.n	800357a <HAL_GPIO_Init+0x242>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a4f      	ldr	r2, [pc, #316]	; (8003670 <HAL_GPIO_Init+0x338>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d01f      	beq.n	8003576 <HAL_GPIO_Init+0x23e>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a4e      	ldr	r2, [pc, #312]	; (8003674 <HAL_GPIO_Init+0x33c>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d019      	beq.n	8003572 <HAL_GPIO_Init+0x23a>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a4d      	ldr	r2, [pc, #308]	; (8003678 <HAL_GPIO_Init+0x340>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d013      	beq.n	800356e <HAL_GPIO_Init+0x236>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a4c      	ldr	r2, [pc, #304]	; (800367c <HAL_GPIO_Init+0x344>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d00d      	beq.n	800356a <HAL_GPIO_Init+0x232>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a4b      	ldr	r2, [pc, #300]	; (8003680 <HAL_GPIO_Init+0x348>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d007      	beq.n	8003566 <HAL_GPIO_Init+0x22e>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a4a      	ldr	r2, [pc, #296]	; (8003684 <HAL_GPIO_Init+0x34c>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d101      	bne.n	8003562 <HAL_GPIO_Init+0x22a>
 800355e:	2306      	movs	r3, #6
 8003560:	e00c      	b.n	800357c <HAL_GPIO_Init+0x244>
 8003562:	2307      	movs	r3, #7
 8003564:	e00a      	b.n	800357c <HAL_GPIO_Init+0x244>
 8003566:	2305      	movs	r3, #5
 8003568:	e008      	b.n	800357c <HAL_GPIO_Init+0x244>
 800356a:	2304      	movs	r3, #4
 800356c:	e006      	b.n	800357c <HAL_GPIO_Init+0x244>
 800356e:	2303      	movs	r3, #3
 8003570:	e004      	b.n	800357c <HAL_GPIO_Init+0x244>
 8003572:	2302      	movs	r3, #2
 8003574:	e002      	b.n	800357c <HAL_GPIO_Init+0x244>
 8003576:	2301      	movs	r3, #1
 8003578:	e000      	b.n	800357c <HAL_GPIO_Init+0x244>
 800357a:	2300      	movs	r3, #0
 800357c:	697a      	ldr	r2, [r7, #20]
 800357e:	f002 0203 	and.w	r2, r2, #3
 8003582:	0092      	lsls	r2, r2, #2
 8003584:	4093      	lsls	r3, r2
 8003586:	693a      	ldr	r2, [r7, #16]
 8003588:	4313      	orrs	r3, r2
 800358a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800358c:	4937      	ldr	r1, [pc, #220]	; (800366c <HAL_GPIO_Init+0x334>)
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	089b      	lsrs	r3, r3, #2
 8003592:	3302      	adds	r3, #2
 8003594:	693a      	ldr	r2, [r7, #16]
 8003596:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800359a:	4b3b      	ldr	r3, [pc, #236]	; (8003688 <HAL_GPIO_Init+0x350>)
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	43db      	mvns	r3, r3
 80035a4:	693a      	ldr	r2, [r7, #16]
 80035a6:	4013      	ands	r3, r2
 80035a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d003      	beq.n	80035be <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80035b6:	693a      	ldr	r2, [r7, #16]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80035be:	4a32      	ldr	r2, [pc, #200]	; (8003688 <HAL_GPIO_Init+0x350>)
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80035c4:	4b30      	ldr	r3, [pc, #192]	; (8003688 <HAL_GPIO_Init+0x350>)
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	43db      	mvns	r3, r3
 80035ce:	693a      	ldr	r2, [r7, #16]
 80035d0:	4013      	ands	r3, r2
 80035d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d003      	beq.n	80035e8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80035e0:	693a      	ldr	r2, [r7, #16]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80035e8:	4a27      	ldr	r2, [pc, #156]	; (8003688 <HAL_GPIO_Init+0x350>)
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80035ee:	4b26      	ldr	r3, [pc, #152]	; (8003688 <HAL_GPIO_Init+0x350>)
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	43db      	mvns	r3, r3
 80035f8:	693a      	ldr	r2, [r7, #16]
 80035fa:	4013      	ands	r3, r2
 80035fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d003      	beq.n	8003612 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800360a:	693a      	ldr	r2, [r7, #16]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	4313      	orrs	r3, r2
 8003610:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003612:	4a1d      	ldr	r2, [pc, #116]	; (8003688 <HAL_GPIO_Init+0x350>)
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003618:	4b1b      	ldr	r3, [pc, #108]	; (8003688 <HAL_GPIO_Init+0x350>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	43db      	mvns	r3, r3
 8003622:	693a      	ldr	r2, [r7, #16]
 8003624:	4013      	ands	r3, r2
 8003626:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d003      	beq.n	800363c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003634:	693a      	ldr	r2, [r7, #16]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	4313      	orrs	r3, r2
 800363a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800363c:	4a12      	ldr	r2, [pc, #72]	; (8003688 <HAL_GPIO_Init+0x350>)
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	3301      	adds	r3, #1
 8003646:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	fa22 f303 	lsr.w	r3, r2, r3
 8003652:	2b00      	cmp	r3, #0
 8003654:	f47f ae78 	bne.w	8003348 <HAL_GPIO_Init+0x10>
  }
}
 8003658:	bf00      	nop
 800365a:	bf00      	nop
 800365c:	371c      	adds	r7, #28
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr
 8003666:	bf00      	nop
 8003668:	40021000 	.word	0x40021000
 800366c:	40010000 	.word	0x40010000
 8003670:	48000400 	.word	0x48000400
 8003674:	48000800 	.word	0x48000800
 8003678:	48000c00 	.word	0x48000c00
 800367c:	48001000 	.word	0x48001000
 8003680:	48001400 	.word	0x48001400
 8003684:	48001800 	.word	0x48001800
 8003688:	40010400 	.word	0x40010400

0800368c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800368c:	b480      	push	{r7}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	460b      	mov	r3, r1
 8003696:	807b      	strh	r3, [r7, #2]
 8003698:	4613      	mov	r3, r2
 800369a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800369c:	787b      	ldrb	r3, [r7, #1]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d003      	beq.n	80036aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80036a2:	887a      	ldrh	r2, [r7, #2]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80036a8:	e002      	b.n	80036b0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80036aa:	887a      	ldrh	r2, [r7, #2]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	629a      	str	r2, [r3, #40]	; 0x28
}
 80036b0:	bf00      	nop
 80036b2:	370c      	adds	r7, #12
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr

080036bc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80036bc:	b480      	push	{r7}
 80036be:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80036c0:	4b04      	ldr	r3, [pc, #16]	; (80036d4 <HAL_PWREx_GetVoltageRange+0x18>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr
 80036d2:	bf00      	nop
 80036d4:	40007000 	.word	0x40007000

080036d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80036d8:	b480      	push	{r7}
 80036da:	b085      	sub	sp, #20
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036e6:	d130      	bne.n	800374a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80036e8:	4b23      	ldr	r3, [pc, #140]	; (8003778 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80036f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036f4:	d038      	beq.n	8003768 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80036f6:	4b20      	ldr	r3, [pc, #128]	; (8003778 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80036fe:	4a1e      	ldr	r2, [pc, #120]	; (8003778 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003700:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003704:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003706:	4b1d      	ldr	r3, [pc, #116]	; (800377c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2232      	movs	r2, #50	; 0x32
 800370c:	fb02 f303 	mul.w	r3, r2, r3
 8003710:	4a1b      	ldr	r2, [pc, #108]	; (8003780 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003712:	fba2 2303 	umull	r2, r3, r2, r3
 8003716:	0c9b      	lsrs	r3, r3, #18
 8003718:	3301      	adds	r3, #1
 800371a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800371c:	e002      	b.n	8003724 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	3b01      	subs	r3, #1
 8003722:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003724:	4b14      	ldr	r3, [pc, #80]	; (8003778 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003726:	695b      	ldr	r3, [r3, #20]
 8003728:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800372c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003730:	d102      	bne.n	8003738 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d1f2      	bne.n	800371e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003738:	4b0f      	ldr	r3, [pc, #60]	; (8003778 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800373a:	695b      	ldr	r3, [r3, #20]
 800373c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003740:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003744:	d110      	bne.n	8003768 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	e00f      	b.n	800376a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800374a:	4b0b      	ldr	r3, [pc, #44]	; (8003778 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003752:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003756:	d007      	beq.n	8003768 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003758:	4b07      	ldr	r3, [pc, #28]	; (8003778 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003760:	4a05      	ldr	r2, [pc, #20]	; (8003778 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003762:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003766:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003768:	2300      	movs	r3, #0
}
 800376a:	4618      	mov	r0, r3
 800376c:	3714      	adds	r7, #20
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	40007000 	.word	0x40007000
 800377c:	20000004 	.word	0x20000004
 8003780:	431bde83 	.word	0x431bde83

08003784 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b088      	sub	sp, #32
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d101      	bne.n	8003796 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e3d8      	b.n	8003f48 <HAL_RCC_OscConfig+0x7c4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003796:	4b97      	ldr	r3, [pc, #604]	; (80039f4 <HAL_RCC_OscConfig+0x270>)
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	f003 030c 	and.w	r3, r3, #12
 800379e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037a0:	4b94      	ldr	r3, [pc, #592]	; (80039f4 <HAL_RCC_OscConfig+0x270>)
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	f003 0303 	and.w	r3, r3, #3
 80037a8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0310 	and.w	r3, r3, #16
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	f000 80e4 	beq.w	8003980 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d007      	beq.n	80037ce <HAL_RCC_OscConfig+0x4a>
 80037be:	69bb      	ldr	r3, [r7, #24]
 80037c0:	2b0c      	cmp	r3, #12
 80037c2:	f040 808b 	bne.w	80038dc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	f040 8087 	bne.w	80038dc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80037ce:	4b89      	ldr	r3, [pc, #548]	; (80039f4 <HAL_RCC_OscConfig+0x270>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0302 	and.w	r3, r3, #2
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d005      	beq.n	80037e6 <HAL_RCC_OscConfig+0x62>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d101      	bne.n	80037e6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e3b0      	b.n	8003f48 <HAL_RCC_OscConfig+0x7c4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a1a      	ldr	r2, [r3, #32]
 80037ea:	4b82      	ldr	r3, [pc, #520]	; (80039f4 <HAL_RCC_OscConfig+0x270>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0308 	and.w	r3, r3, #8
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d004      	beq.n	8003800 <HAL_RCC_OscConfig+0x7c>
 80037f6:	4b7f      	ldr	r3, [pc, #508]	; (80039f4 <HAL_RCC_OscConfig+0x270>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037fe:	e005      	b.n	800380c <HAL_RCC_OscConfig+0x88>
 8003800:	4b7c      	ldr	r3, [pc, #496]	; (80039f4 <HAL_RCC_OscConfig+0x270>)
 8003802:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003806:	091b      	lsrs	r3, r3, #4
 8003808:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800380c:	4293      	cmp	r3, r2
 800380e:	d223      	bcs.n	8003858 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6a1b      	ldr	r3, [r3, #32]
 8003814:	4618      	mov	r0, r3
 8003816:	f000 fd0b 	bl	8004230 <RCC_SetFlashLatencyFromMSIRange>
 800381a:	4603      	mov	r3, r0
 800381c:	2b00      	cmp	r3, #0
 800381e:	d001      	beq.n	8003824 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e391      	b.n	8003f48 <HAL_RCC_OscConfig+0x7c4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003824:	4b73      	ldr	r3, [pc, #460]	; (80039f4 <HAL_RCC_OscConfig+0x270>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a72      	ldr	r2, [pc, #456]	; (80039f4 <HAL_RCC_OscConfig+0x270>)
 800382a:	f043 0308 	orr.w	r3, r3, #8
 800382e:	6013      	str	r3, [r2, #0]
 8003830:	4b70      	ldr	r3, [pc, #448]	; (80039f4 <HAL_RCC_OscConfig+0x270>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6a1b      	ldr	r3, [r3, #32]
 800383c:	496d      	ldr	r1, [pc, #436]	; (80039f4 <HAL_RCC_OscConfig+0x270>)
 800383e:	4313      	orrs	r3, r2
 8003840:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003842:	4b6c      	ldr	r3, [pc, #432]	; (80039f4 <HAL_RCC_OscConfig+0x270>)
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	69db      	ldr	r3, [r3, #28]
 800384e:	021b      	lsls	r3, r3, #8
 8003850:	4968      	ldr	r1, [pc, #416]	; (80039f4 <HAL_RCC_OscConfig+0x270>)
 8003852:	4313      	orrs	r3, r2
 8003854:	604b      	str	r3, [r1, #4]
 8003856:	e025      	b.n	80038a4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003858:	4b66      	ldr	r3, [pc, #408]	; (80039f4 <HAL_RCC_OscConfig+0x270>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a65      	ldr	r2, [pc, #404]	; (80039f4 <HAL_RCC_OscConfig+0x270>)
 800385e:	f043 0308 	orr.w	r3, r3, #8
 8003862:	6013      	str	r3, [r2, #0]
 8003864:	4b63      	ldr	r3, [pc, #396]	; (80039f4 <HAL_RCC_OscConfig+0x270>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6a1b      	ldr	r3, [r3, #32]
 8003870:	4960      	ldr	r1, [pc, #384]	; (80039f4 <HAL_RCC_OscConfig+0x270>)
 8003872:	4313      	orrs	r3, r2
 8003874:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003876:	4b5f      	ldr	r3, [pc, #380]	; (80039f4 <HAL_RCC_OscConfig+0x270>)
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	69db      	ldr	r3, [r3, #28]
 8003882:	021b      	lsls	r3, r3, #8
 8003884:	495b      	ldr	r1, [pc, #364]	; (80039f4 <HAL_RCC_OscConfig+0x270>)
 8003886:	4313      	orrs	r3, r2
 8003888:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d109      	bne.n	80038a4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6a1b      	ldr	r3, [r3, #32]
 8003894:	4618      	mov	r0, r3
 8003896:	f000 fccb 	bl	8004230 <RCC_SetFlashLatencyFromMSIRange>
 800389a:	4603      	mov	r3, r0
 800389c:	2b00      	cmp	r3, #0
 800389e:	d001      	beq.n	80038a4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e351      	b.n	8003f48 <HAL_RCC_OscConfig+0x7c4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80038a4:	f000 fc38 	bl	8004118 <HAL_RCC_GetSysClockFreq>
 80038a8:	4602      	mov	r2, r0
 80038aa:	4b52      	ldr	r3, [pc, #328]	; (80039f4 <HAL_RCC_OscConfig+0x270>)
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	091b      	lsrs	r3, r3, #4
 80038b0:	f003 030f 	and.w	r3, r3, #15
 80038b4:	4950      	ldr	r1, [pc, #320]	; (80039f8 <HAL_RCC_OscConfig+0x274>)
 80038b6:	5ccb      	ldrb	r3, [r1, r3]
 80038b8:	f003 031f 	and.w	r3, r3, #31
 80038bc:	fa22 f303 	lsr.w	r3, r2, r3
 80038c0:	4a4e      	ldr	r2, [pc, #312]	; (80039fc <HAL_RCC_OscConfig+0x278>)
 80038c2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80038c4:	4b4e      	ldr	r3, [pc, #312]	; (8003a00 <HAL_RCC_OscConfig+0x27c>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4618      	mov	r0, r3
 80038ca:	f7fd fd4d 	bl	8001368 <HAL_InitTick>
 80038ce:	4603      	mov	r3, r0
 80038d0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80038d2:	7bfb      	ldrb	r3, [r7, #15]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d052      	beq.n	800397e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80038d8:	7bfb      	ldrb	r3, [r7, #15]
 80038da:	e335      	b.n	8003f48 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	699b      	ldr	r3, [r3, #24]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d032      	beq.n	800394a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80038e4:	4b43      	ldr	r3, [pc, #268]	; (80039f4 <HAL_RCC_OscConfig+0x270>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a42      	ldr	r2, [pc, #264]	; (80039f4 <HAL_RCC_OscConfig+0x270>)
 80038ea:	f043 0301 	orr.w	r3, r3, #1
 80038ee:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80038f0:	f7fd fd8a 	bl	8001408 <HAL_GetTick>
 80038f4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80038f6:	e008      	b.n	800390a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80038f8:	f7fd fd86 	bl	8001408 <HAL_GetTick>
 80038fc:	4602      	mov	r2, r0
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	2b02      	cmp	r3, #2
 8003904:	d901      	bls.n	800390a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	e31e      	b.n	8003f48 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800390a:	4b3a      	ldr	r3, [pc, #232]	; (80039f4 <HAL_RCC_OscConfig+0x270>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0302 	and.w	r3, r3, #2
 8003912:	2b00      	cmp	r3, #0
 8003914:	d0f0      	beq.n	80038f8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003916:	4b37      	ldr	r3, [pc, #220]	; (80039f4 <HAL_RCC_OscConfig+0x270>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a36      	ldr	r2, [pc, #216]	; (80039f4 <HAL_RCC_OscConfig+0x270>)
 800391c:	f043 0308 	orr.w	r3, r3, #8
 8003920:	6013      	str	r3, [r2, #0]
 8003922:	4b34      	ldr	r3, [pc, #208]	; (80039f4 <HAL_RCC_OscConfig+0x270>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6a1b      	ldr	r3, [r3, #32]
 800392e:	4931      	ldr	r1, [pc, #196]	; (80039f4 <HAL_RCC_OscConfig+0x270>)
 8003930:	4313      	orrs	r3, r2
 8003932:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003934:	4b2f      	ldr	r3, [pc, #188]	; (80039f4 <HAL_RCC_OscConfig+0x270>)
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	69db      	ldr	r3, [r3, #28]
 8003940:	021b      	lsls	r3, r3, #8
 8003942:	492c      	ldr	r1, [pc, #176]	; (80039f4 <HAL_RCC_OscConfig+0x270>)
 8003944:	4313      	orrs	r3, r2
 8003946:	604b      	str	r3, [r1, #4]
 8003948:	e01a      	b.n	8003980 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800394a:	4b2a      	ldr	r3, [pc, #168]	; (80039f4 <HAL_RCC_OscConfig+0x270>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a29      	ldr	r2, [pc, #164]	; (80039f4 <HAL_RCC_OscConfig+0x270>)
 8003950:	f023 0301 	bic.w	r3, r3, #1
 8003954:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003956:	f7fd fd57 	bl	8001408 <HAL_GetTick>
 800395a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800395c:	e008      	b.n	8003970 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800395e:	f7fd fd53 	bl	8001408 <HAL_GetTick>
 8003962:	4602      	mov	r2, r0
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	2b02      	cmp	r3, #2
 800396a:	d901      	bls.n	8003970 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800396c:	2303      	movs	r3, #3
 800396e:	e2eb      	b.n	8003f48 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003970:	4b20      	ldr	r3, [pc, #128]	; (80039f4 <HAL_RCC_OscConfig+0x270>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0302 	and.w	r3, r3, #2
 8003978:	2b00      	cmp	r3, #0
 800397a:	d1f0      	bne.n	800395e <HAL_RCC_OscConfig+0x1da>
 800397c:	e000      	b.n	8003980 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800397e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0301 	and.w	r3, r3, #1
 8003988:	2b00      	cmp	r3, #0
 800398a:	d074      	beq.n	8003a76 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800398c:	69bb      	ldr	r3, [r7, #24]
 800398e:	2b08      	cmp	r3, #8
 8003990:	d005      	beq.n	800399e <HAL_RCC_OscConfig+0x21a>
 8003992:	69bb      	ldr	r3, [r7, #24]
 8003994:	2b0c      	cmp	r3, #12
 8003996:	d10e      	bne.n	80039b6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	2b03      	cmp	r3, #3
 800399c:	d10b      	bne.n	80039b6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800399e:	4b15      	ldr	r3, [pc, #84]	; (80039f4 <HAL_RCC_OscConfig+0x270>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d064      	beq.n	8003a74 <HAL_RCC_OscConfig+0x2f0>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d160      	bne.n	8003a74 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e2c8      	b.n	8003f48 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039be:	d106      	bne.n	80039ce <HAL_RCC_OscConfig+0x24a>
 80039c0:	4b0c      	ldr	r3, [pc, #48]	; (80039f4 <HAL_RCC_OscConfig+0x270>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a0b      	ldr	r2, [pc, #44]	; (80039f4 <HAL_RCC_OscConfig+0x270>)
 80039c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039ca:	6013      	str	r3, [r2, #0]
 80039cc:	e026      	b.n	8003a1c <HAL_RCC_OscConfig+0x298>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039d6:	d115      	bne.n	8003a04 <HAL_RCC_OscConfig+0x280>
 80039d8:	4b06      	ldr	r3, [pc, #24]	; (80039f4 <HAL_RCC_OscConfig+0x270>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a05      	ldr	r2, [pc, #20]	; (80039f4 <HAL_RCC_OscConfig+0x270>)
 80039de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039e2:	6013      	str	r3, [r2, #0]
 80039e4:	4b03      	ldr	r3, [pc, #12]	; (80039f4 <HAL_RCC_OscConfig+0x270>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a02      	ldr	r2, [pc, #8]	; (80039f4 <HAL_RCC_OscConfig+0x270>)
 80039ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039ee:	6013      	str	r3, [r2, #0]
 80039f0:	e014      	b.n	8003a1c <HAL_RCC_OscConfig+0x298>
 80039f2:	bf00      	nop
 80039f4:	40021000 	.word	0x40021000
 80039f8:	0800537c 	.word	0x0800537c
 80039fc:	20000004 	.word	0x20000004
 8003a00:	20000008 	.word	0x20000008
 8003a04:	4ba0      	ldr	r3, [pc, #640]	; (8003c88 <HAL_RCC_OscConfig+0x504>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a9f      	ldr	r2, [pc, #636]	; (8003c88 <HAL_RCC_OscConfig+0x504>)
 8003a0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a0e:	6013      	str	r3, [r2, #0]
 8003a10:	4b9d      	ldr	r3, [pc, #628]	; (8003c88 <HAL_RCC_OscConfig+0x504>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a9c      	ldr	r2, [pc, #624]	; (8003c88 <HAL_RCC_OscConfig+0x504>)
 8003a16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d013      	beq.n	8003a4c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a24:	f7fd fcf0 	bl	8001408 <HAL_GetTick>
 8003a28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a2a:	e008      	b.n	8003a3e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a2c:	f7fd fcec 	bl	8001408 <HAL_GetTick>
 8003a30:	4602      	mov	r2, r0
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	2b64      	cmp	r3, #100	; 0x64
 8003a38:	d901      	bls.n	8003a3e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	e284      	b.n	8003f48 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a3e:	4b92      	ldr	r3, [pc, #584]	; (8003c88 <HAL_RCC_OscConfig+0x504>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d0f0      	beq.n	8003a2c <HAL_RCC_OscConfig+0x2a8>
 8003a4a:	e014      	b.n	8003a76 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a4c:	f7fd fcdc 	bl	8001408 <HAL_GetTick>
 8003a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a52:	e008      	b.n	8003a66 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a54:	f7fd fcd8 	bl	8001408 <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	2b64      	cmp	r3, #100	; 0x64
 8003a60:	d901      	bls.n	8003a66 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	e270      	b.n	8003f48 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a66:	4b88      	ldr	r3, [pc, #544]	; (8003c88 <HAL_RCC_OscConfig+0x504>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d1f0      	bne.n	8003a54 <HAL_RCC_OscConfig+0x2d0>
 8003a72:	e000      	b.n	8003a76 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0302 	and.w	r3, r3, #2
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d060      	beq.n	8003b44 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003a82:	69bb      	ldr	r3, [r7, #24]
 8003a84:	2b04      	cmp	r3, #4
 8003a86:	d005      	beq.n	8003a94 <HAL_RCC_OscConfig+0x310>
 8003a88:	69bb      	ldr	r3, [r7, #24]
 8003a8a:	2b0c      	cmp	r3, #12
 8003a8c:	d119      	bne.n	8003ac2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	2b02      	cmp	r3, #2
 8003a92:	d116      	bne.n	8003ac2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a94:	4b7c      	ldr	r3, [pc, #496]	; (8003c88 <HAL_RCC_OscConfig+0x504>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d005      	beq.n	8003aac <HAL_RCC_OscConfig+0x328>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d101      	bne.n	8003aac <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e24d      	b.n	8003f48 <HAL_RCC_OscConfig+0x7c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aac:	4b76      	ldr	r3, [pc, #472]	; (8003c88 <HAL_RCC_OscConfig+0x504>)
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	691b      	ldr	r3, [r3, #16]
 8003ab8:	061b      	lsls	r3, r3, #24
 8003aba:	4973      	ldr	r1, [pc, #460]	; (8003c88 <HAL_RCC_OscConfig+0x504>)
 8003abc:	4313      	orrs	r3, r2
 8003abe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ac0:	e040      	b.n	8003b44 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d023      	beq.n	8003b12 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003aca:	4b6f      	ldr	r3, [pc, #444]	; (8003c88 <HAL_RCC_OscConfig+0x504>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a6e      	ldr	r2, [pc, #440]	; (8003c88 <HAL_RCC_OscConfig+0x504>)
 8003ad0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ad4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ad6:	f7fd fc97 	bl	8001408 <HAL_GetTick>
 8003ada:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003adc:	e008      	b.n	8003af0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ade:	f7fd fc93 	bl	8001408 <HAL_GetTick>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d901      	bls.n	8003af0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003aec:	2303      	movs	r3, #3
 8003aee:	e22b      	b.n	8003f48 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003af0:	4b65      	ldr	r3, [pc, #404]	; (8003c88 <HAL_RCC_OscConfig+0x504>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d0f0      	beq.n	8003ade <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003afc:	4b62      	ldr	r3, [pc, #392]	; (8003c88 <HAL_RCC_OscConfig+0x504>)
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	691b      	ldr	r3, [r3, #16]
 8003b08:	061b      	lsls	r3, r3, #24
 8003b0a:	495f      	ldr	r1, [pc, #380]	; (8003c88 <HAL_RCC_OscConfig+0x504>)
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	604b      	str	r3, [r1, #4]
 8003b10:	e018      	b.n	8003b44 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b12:	4b5d      	ldr	r3, [pc, #372]	; (8003c88 <HAL_RCC_OscConfig+0x504>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a5c      	ldr	r2, [pc, #368]	; (8003c88 <HAL_RCC_OscConfig+0x504>)
 8003b18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b1e:	f7fd fc73 	bl	8001408 <HAL_GetTick>
 8003b22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b24:	e008      	b.n	8003b38 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b26:	f7fd fc6f 	bl	8001408 <HAL_GetTick>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	2b02      	cmp	r3, #2
 8003b32:	d901      	bls.n	8003b38 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003b34:	2303      	movs	r3, #3
 8003b36:	e207      	b.n	8003f48 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b38:	4b53      	ldr	r3, [pc, #332]	; (8003c88 <HAL_RCC_OscConfig+0x504>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d1f0      	bne.n	8003b26 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0308 	and.w	r3, r3, #8
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d03c      	beq.n	8003bca <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	695b      	ldr	r3, [r3, #20]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d01c      	beq.n	8003b92 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b58:	4b4b      	ldr	r3, [pc, #300]	; (8003c88 <HAL_RCC_OscConfig+0x504>)
 8003b5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b5e:	4a4a      	ldr	r2, [pc, #296]	; (8003c88 <HAL_RCC_OscConfig+0x504>)
 8003b60:	f043 0301 	orr.w	r3, r3, #1
 8003b64:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b68:	f7fd fc4e 	bl	8001408 <HAL_GetTick>
 8003b6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b6e:	e008      	b.n	8003b82 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b70:	f7fd fc4a 	bl	8001408 <HAL_GetTick>
 8003b74:	4602      	mov	r2, r0
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	2b02      	cmp	r3, #2
 8003b7c:	d901      	bls.n	8003b82 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e1e2      	b.n	8003f48 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b82:	4b41      	ldr	r3, [pc, #260]	; (8003c88 <HAL_RCC_OscConfig+0x504>)
 8003b84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b88:	f003 0302 	and.w	r3, r3, #2
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d0ef      	beq.n	8003b70 <HAL_RCC_OscConfig+0x3ec>
 8003b90:	e01b      	b.n	8003bca <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b92:	4b3d      	ldr	r3, [pc, #244]	; (8003c88 <HAL_RCC_OscConfig+0x504>)
 8003b94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b98:	4a3b      	ldr	r2, [pc, #236]	; (8003c88 <HAL_RCC_OscConfig+0x504>)
 8003b9a:	f023 0301 	bic.w	r3, r3, #1
 8003b9e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ba2:	f7fd fc31 	bl	8001408 <HAL_GetTick>
 8003ba6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ba8:	e008      	b.n	8003bbc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003baa:	f7fd fc2d 	bl	8001408 <HAL_GetTick>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	d901      	bls.n	8003bbc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003bb8:	2303      	movs	r3, #3
 8003bba:	e1c5      	b.n	8003f48 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003bbc:	4b32      	ldr	r3, [pc, #200]	; (8003c88 <HAL_RCC_OscConfig+0x504>)
 8003bbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bc2:	f003 0302 	and.w	r3, r3, #2
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d1ef      	bne.n	8003baa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0304 	and.w	r3, r3, #4
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	f000 80a6 	beq.w	8003d24 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003bdc:	4b2a      	ldr	r3, [pc, #168]	; (8003c88 <HAL_RCC_OscConfig+0x504>)
 8003bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003be0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d10d      	bne.n	8003c04 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003be8:	4b27      	ldr	r3, [pc, #156]	; (8003c88 <HAL_RCC_OscConfig+0x504>)
 8003bea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bec:	4a26      	ldr	r2, [pc, #152]	; (8003c88 <HAL_RCC_OscConfig+0x504>)
 8003bee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bf2:	6593      	str	r3, [r2, #88]	; 0x58
 8003bf4:	4b24      	ldr	r3, [pc, #144]	; (8003c88 <HAL_RCC_OscConfig+0x504>)
 8003bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bfc:	60bb      	str	r3, [r7, #8]
 8003bfe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c00:	2301      	movs	r3, #1
 8003c02:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c04:	4b21      	ldr	r3, [pc, #132]	; (8003c8c <HAL_RCC_OscConfig+0x508>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d118      	bne.n	8003c42 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c10:	4b1e      	ldr	r3, [pc, #120]	; (8003c8c <HAL_RCC_OscConfig+0x508>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a1d      	ldr	r2, [pc, #116]	; (8003c8c <HAL_RCC_OscConfig+0x508>)
 8003c16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c1a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c1c:	f7fd fbf4 	bl	8001408 <HAL_GetTick>
 8003c20:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c22:	e008      	b.n	8003c36 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c24:	f7fd fbf0 	bl	8001408 <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	d901      	bls.n	8003c36 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	e188      	b.n	8003f48 <HAL_RCC_OscConfig+0x7c4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c36:	4b15      	ldr	r3, [pc, #84]	; (8003c8c <HAL_RCC_OscConfig+0x508>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d0f0      	beq.n	8003c24 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d108      	bne.n	8003c5c <HAL_RCC_OscConfig+0x4d8>
 8003c4a:	4b0f      	ldr	r3, [pc, #60]	; (8003c88 <HAL_RCC_OscConfig+0x504>)
 8003c4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c50:	4a0d      	ldr	r2, [pc, #52]	; (8003c88 <HAL_RCC_OscConfig+0x504>)
 8003c52:	f043 0301 	orr.w	r3, r3, #1
 8003c56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c5a:	e029      	b.n	8003cb0 <HAL_RCC_OscConfig+0x52c>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	2b05      	cmp	r3, #5
 8003c62:	d115      	bne.n	8003c90 <HAL_RCC_OscConfig+0x50c>
 8003c64:	4b08      	ldr	r3, [pc, #32]	; (8003c88 <HAL_RCC_OscConfig+0x504>)
 8003c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c6a:	4a07      	ldr	r2, [pc, #28]	; (8003c88 <HAL_RCC_OscConfig+0x504>)
 8003c6c:	f043 0304 	orr.w	r3, r3, #4
 8003c70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c74:	4b04      	ldr	r3, [pc, #16]	; (8003c88 <HAL_RCC_OscConfig+0x504>)
 8003c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c7a:	4a03      	ldr	r2, [pc, #12]	; (8003c88 <HAL_RCC_OscConfig+0x504>)
 8003c7c:	f043 0301 	orr.w	r3, r3, #1
 8003c80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c84:	e014      	b.n	8003cb0 <HAL_RCC_OscConfig+0x52c>
 8003c86:	bf00      	nop
 8003c88:	40021000 	.word	0x40021000
 8003c8c:	40007000 	.word	0x40007000
 8003c90:	4b91      	ldr	r3, [pc, #580]	; (8003ed8 <HAL_RCC_OscConfig+0x754>)
 8003c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c96:	4a90      	ldr	r2, [pc, #576]	; (8003ed8 <HAL_RCC_OscConfig+0x754>)
 8003c98:	f023 0301 	bic.w	r3, r3, #1
 8003c9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ca0:	4b8d      	ldr	r3, [pc, #564]	; (8003ed8 <HAL_RCC_OscConfig+0x754>)
 8003ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ca6:	4a8c      	ldr	r2, [pc, #560]	; (8003ed8 <HAL_RCC_OscConfig+0x754>)
 8003ca8:	f023 0304 	bic.w	r3, r3, #4
 8003cac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d016      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cb8:	f7fd fba6 	bl	8001408 <HAL_GetTick>
 8003cbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cbe:	e00a      	b.n	8003cd6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cc0:	f7fd fba2 	bl	8001408 <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d901      	bls.n	8003cd6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e138      	b.n	8003f48 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cd6:	4b80      	ldr	r3, [pc, #512]	; (8003ed8 <HAL_RCC_OscConfig+0x754>)
 8003cd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cdc:	f003 0302 	and.w	r3, r3, #2
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d0ed      	beq.n	8003cc0 <HAL_RCC_OscConfig+0x53c>
 8003ce4:	e015      	b.n	8003d12 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ce6:	f7fd fb8f 	bl	8001408 <HAL_GetTick>
 8003cea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003cec:	e00a      	b.n	8003d04 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cee:	f7fd fb8b 	bl	8001408 <HAL_GetTick>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	1ad3      	subs	r3, r2, r3
 8003cf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d901      	bls.n	8003d04 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003d00:	2303      	movs	r3, #3
 8003d02:	e121      	b.n	8003f48 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d04:	4b74      	ldr	r3, [pc, #464]	; (8003ed8 <HAL_RCC_OscConfig+0x754>)
 8003d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d0a:	f003 0302 	and.w	r3, r3, #2
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d1ed      	bne.n	8003cee <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d12:	7ffb      	ldrb	r3, [r7, #31]
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d105      	bne.n	8003d24 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d18:	4b6f      	ldr	r3, [pc, #444]	; (8003ed8 <HAL_RCC_OscConfig+0x754>)
 8003d1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d1c:	4a6e      	ldr	r2, [pc, #440]	; (8003ed8 <HAL_RCC_OscConfig+0x754>)
 8003d1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d22:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	f000 810c 	beq.w	8003f46 <HAL_RCC_OscConfig+0x7c2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d32:	2b02      	cmp	r3, #2
 8003d34:	f040 80d4 	bne.w	8003ee0 <HAL_RCC_OscConfig+0x75c>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003d38:	4b67      	ldr	r3, [pc, #412]	; (8003ed8 <HAL_RCC_OscConfig+0x754>)
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	f003 0203 	and.w	r2, r3, #3
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d130      	bne.n	8003dae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d56:	3b01      	subs	r3, #1
 8003d58:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d127      	bne.n	8003dae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d68:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d11f      	bne.n	8003dae <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d74:	687a      	ldr	r2, [r7, #4]
 8003d76:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003d78:	2a07      	cmp	r2, #7
 8003d7a:	bf14      	ite	ne
 8003d7c:	2201      	movne	r2, #1
 8003d7e:	2200      	moveq	r2, #0
 8003d80:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d113      	bne.n	8003dae <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d90:	085b      	lsrs	r3, r3, #1
 8003d92:	3b01      	subs	r3, #1
 8003d94:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d109      	bne.n	8003dae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da4:	085b      	lsrs	r3, r3, #1
 8003da6:	3b01      	subs	r3, #1
 8003da8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d06e      	beq.n	8003e8c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003dae:	69bb      	ldr	r3, [r7, #24]
 8003db0:	2b0c      	cmp	r3, #12
 8003db2:	d069      	beq.n	8003e88 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003db4:	4b48      	ldr	r3, [pc, #288]	; (8003ed8 <HAL_RCC_OscConfig+0x754>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d105      	bne.n	8003dcc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003dc0:	4b45      	ldr	r3, [pc, #276]	; (8003ed8 <HAL_RCC_OscConfig+0x754>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d001      	beq.n	8003dd0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e0bb      	b.n	8003f48 <HAL_RCC_OscConfig+0x7c4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003dd0:	4b41      	ldr	r3, [pc, #260]	; (8003ed8 <HAL_RCC_OscConfig+0x754>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a40      	ldr	r2, [pc, #256]	; (8003ed8 <HAL_RCC_OscConfig+0x754>)
 8003dd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003dda:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003ddc:	f7fd fb14 	bl	8001408 <HAL_GetTick>
 8003de0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003de2:	e008      	b.n	8003df6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003de4:	f7fd fb10 	bl	8001408 <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	2b02      	cmp	r3, #2
 8003df0:	d901      	bls.n	8003df6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e0a8      	b.n	8003f48 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003df6:	4b38      	ldr	r3, [pc, #224]	; (8003ed8 <HAL_RCC_OscConfig+0x754>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d1f0      	bne.n	8003de4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e02:	4b35      	ldr	r3, [pc, #212]	; (8003ed8 <HAL_RCC_OscConfig+0x754>)
 8003e04:	68da      	ldr	r2, [r3, #12]
 8003e06:	4b35      	ldr	r3, [pc, #212]	; (8003edc <HAL_RCC_OscConfig+0x758>)
 8003e08:	4013      	ands	r3, r2
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003e12:	3a01      	subs	r2, #1
 8003e14:	0112      	lsls	r2, r2, #4
 8003e16:	4311      	orrs	r1, r2
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003e1c:	0212      	lsls	r2, r2, #8
 8003e1e:	4311      	orrs	r1, r2
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003e24:	0852      	lsrs	r2, r2, #1
 8003e26:	3a01      	subs	r2, #1
 8003e28:	0552      	lsls	r2, r2, #21
 8003e2a:	4311      	orrs	r1, r2
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003e30:	0852      	lsrs	r2, r2, #1
 8003e32:	3a01      	subs	r2, #1
 8003e34:	0652      	lsls	r2, r2, #25
 8003e36:	4311      	orrs	r1, r2
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003e3c:	0912      	lsrs	r2, r2, #4
 8003e3e:	0452      	lsls	r2, r2, #17
 8003e40:	430a      	orrs	r2, r1
 8003e42:	4925      	ldr	r1, [pc, #148]	; (8003ed8 <HAL_RCC_OscConfig+0x754>)
 8003e44:	4313      	orrs	r3, r2
 8003e46:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003e48:	4b23      	ldr	r3, [pc, #140]	; (8003ed8 <HAL_RCC_OscConfig+0x754>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a22      	ldr	r2, [pc, #136]	; (8003ed8 <HAL_RCC_OscConfig+0x754>)
 8003e4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e52:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e54:	4b20      	ldr	r3, [pc, #128]	; (8003ed8 <HAL_RCC_OscConfig+0x754>)
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	4a1f      	ldr	r2, [pc, #124]	; (8003ed8 <HAL_RCC_OscConfig+0x754>)
 8003e5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e5e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003e60:	f7fd fad2 	bl	8001408 <HAL_GetTick>
 8003e64:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e66:	e008      	b.n	8003e7a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e68:	f7fd face 	bl	8001408 <HAL_GetTick>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	d901      	bls.n	8003e7a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003e76:	2303      	movs	r3, #3
 8003e78:	e066      	b.n	8003f48 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e7a:	4b17      	ldr	r3, [pc, #92]	; (8003ed8 <HAL_RCC_OscConfig+0x754>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d0f0      	beq.n	8003e68 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e86:	e05e      	b.n	8003f46 <HAL_RCC_OscConfig+0x7c2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e05d      	b.n	8003f48 <HAL_RCC_OscConfig+0x7c4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e8c:	4b12      	ldr	r3, [pc, #72]	; (8003ed8 <HAL_RCC_OscConfig+0x754>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d156      	bne.n	8003f46 <HAL_RCC_OscConfig+0x7c2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003e98:	4b0f      	ldr	r3, [pc, #60]	; (8003ed8 <HAL_RCC_OscConfig+0x754>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a0e      	ldr	r2, [pc, #56]	; (8003ed8 <HAL_RCC_OscConfig+0x754>)
 8003e9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ea2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ea4:	4b0c      	ldr	r3, [pc, #48]	; (8003ed8 <HAL_RCC_OscConfig+0x754>)
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	4a0b      	ldr	r2, [pc, #44]	; (8003ed8 <HAL_RCC_OscConfig+0x754>)
 8003eaa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003eae:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003eb0:	f7fd faaa 	bl	8001408 <HAL_GetTick>
 8003eb4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003eb6:	e008      	b.n	8003eca <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eb8:	f7fd faa6 	bl	8001408 <HAL_GetTick>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	d901      	bls.n	8003eca <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e03e      	b.n	8003f48 <HAL_RCC_OscConfig+0x7c4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003eca:	4b03      	ldr	r3, [pc, #12]	; (8003ed8 <HAL_RCC_OscConfig+0x754>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d0f0      	beq.n	8003eb8 <HAL_RCC_OscConfig+0x734>
 8003ed6:	e036      	b.n	8003f46 <HAL_RCC_OscConfig+0x7c2>
 8003ed8:	40021000 	.word	0x40021000
 8003edc:	f99d808c 	.word	0xf99d808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ee0:	69bb      	ldr	r3, [r7, #24]
 8003ee2:	2b0c      	cmp	r3, #12
 8003ee4:	d02d      	beq.n	8003f42 <HAL_RCC_OscConfig+0x7be>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ee6:	4b1a      	ldr	r3, [pc, #104]	; (8003f50 <HAL_RCC_OscConfig+0x7cc>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a19      	ldr	r2, [pc, #100]	; (8003f50 <HAL_RCC_OscConfig+0x7cc>)
 8003eec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ef0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003ef2:	4b17      	ldr	r3, [pc, #92]	; (8003f50 <HAL_RCC_OscConfig+0x7cc>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d105      	bne.n	8003f0a <HAL_RCC_OscConfig+0x786>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003efe:	4b14      	ldr	r3, [pc, #80]	; (8003f50 <HAL_RCC_OscConfig+0x7cc>)
 8003f00:	68db      	ldr	r3, [r3, #12]
 8003f02:	4a13      	ldr	r2, [pc, #76]	; (8003f50 <HAL_RCC_OscConfig+0x7cc>)
 8003f04:	f023 0303 	bic.w	r3, r3, #3
 8003f08:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003f0a:	4b11      	ldr	r3, [pc, #68]	; (8003f50 <HAL_RCC_OscConfig+0x7cc>)
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	4a10      	ldr	r2, [pc, #64]	; (8003f50 <HAL_RCC_OscConfig+0x7cc>)
 8003f10:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003f14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f18:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f1a:	f7fd fa75 	bl	8001408 <HAL_GetTick>
 8003f1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f20:	e008      	b.n	8003f34 <HAL_RCC_OscConfig+0x7b0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f22:	f7fd fa71 	bl	8001408 <HAL_GetTick>
 8003f26:	4602      	mov	r2, r0
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	2b02      	cmp	r3, #2
 8003f2e:	d901      	bls.n	8003f34 <HAL_RCC_OscConfig+0x7b0>
          {
            return HAL_TIMEOUT;
 8003f30:	2303      	movs	r3, #3
 8003f32:	e009      	b.n	8003f48 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f34:	4b06      	ldr	r3, [pc, #24]	; (8003f50 <HAL_RCC_OscConfig+0x7cc>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d1f0      	bne.n	8003f22 <HAL_RCC_OscConfig+0x79e>
 8003f40:	e001      	b.n	8003f46 <HAL_RCC_OscConfig+0x7c2>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e000      	b.n	8003f48 <HAL_RCC_OscConfig+0x7c4>
      }
    }
  }
  return HAL_OK;
 8003f46:	2300      	movs	r3, #0
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3720      	adds	r7, #32
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	40021000 	.word	0x40021000

08003f54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d101      	bne.n	8003f68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e0c8      	b.n	80040fa <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f68:	4b66      	ldr	r3, [pc, #408]	; (8004104 <HAL_RCC_ClockConfig+0x1b0>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 0307 	and.w	r3, r3, #7
 8003f70:	683a      	ldr	r2, [r7, #0]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d910      	bls.n	8003f98 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f76:	4b63      	ldr	r3, [pc, #396]	; (8004104 <HAL_RCC_ClockConfig+0x1b0>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f023 0207 	bic.w	r2, r3, #7
 8003f7e:	4961      	ldr	r1, [pc, #388]	; (8004104 <HAL_RCC_ClockConfig+0x1b0>)
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f86:	4b5f      	ldr	r3, [pc, #380]	; (8004104 <HAL_RCC_ClockConfig+0x1b0>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0307 	and.w	r3, r3, #7
 8003f8e:	683a      	ldr	r2, [r7, #0]
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d001      	beq.n	8003f98 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e0b0      	b.n	80040fa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0301 	and.w	r3, r3, #1
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d04c      	beq.n	800403e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	2b03      	cmp	r3, #3
 8003faa:	d107      	bne.n	8003fbc <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fac:	4b56      	ldr	r3, [pc, #344]	; (8004108 <HAL_RCC_ClockConfig+0x1b4>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d121      	bne.n	8003ffc <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e09e      	b.n	80040fa <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	2b02      	cmp	r3, #2
 8003fc2:	d107      	bne.n	8003fd4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fc4:	4b50      	ldr	r3, [pc, #320]	; (8004108 <HAL_RCC_ClockConfig+0x1b4>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d115      	bne.n	8003ffc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e092      	b.n	80040fa <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d107      	bne.n	8003fec <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003fdc:	4b4a      	ldr	r3, [pc, #296]	; (8004108 <HAL_RCC_ClockConfig+0x1b4>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 0302 	and.w	r3, r3, #2
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d109      	bne.n	8003ffc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e086      	b.n	80040fa <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003fec:	4b46      	ldr	r3, [pc, #280]	; (8004108 <HAL_RCC_ClockConfig+0x1b4>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d101      	bne.n	8003ffc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e07e      	b.n	80040fa <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003ffc:	4b42      	ldr	r3, [pc, #264]	; (8004108 <HAL_RCC_ClockConfig+0x1b4>)
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	f023 0203 	bic.w	r2, r3, #3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	493f      	ldr	r1, [pc, #252]	; (8004108 <HAL_RCC_ClockConfig+0x1b4>)
 800400a:	4313      	orrs	r3, r2
 800400c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800400e:	f7fd f9fb 	bl	8001408 <HAL_GetTick>
 8004012:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004014:	e00a      	b.n	800402c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004016:	f7fd f9f7 	bl	8001408 <HAL_GetTick>
 800401a:	4602      	mov	r2, r0
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	f241 3288 	movw	r2, #5000	; 0x1388
 8004024:	4293      	cmp	r3, r2
 8004026:	d901      	bls.n	800402c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004028:	2303      	movs	r3, #3
 800402a:	e066      	b.n	80040fa <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800402c:	4b36      	ldr	r3, [pc, #216]	; (8004108 <HAL_RCC_ClockConfig+0x1b4>)
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	f003 020c 	and.w	r2, r3, #12
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	009b      	lsls	r3, r3, #2
 800403a:	429a      	cmp	r2, r3
 800403c:	d1eb      	bne.n	8004016 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0302 	and.w	r3, r3, #2
 8004046:	2b00      	cmp	r3, #0
 8004048:	d008      	beq.n	800405c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800404a:	4b2f      	ldr	r3, [pc, #188]	; (8004108 <HAL_RCC_ClockConfig+0x1b4>)
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	492c      	ldr	r1, [pc, #176]	; (8004108 <HAL_RCC_ClockConfig+0x1b4>)
 8004058:	4313      	orrs	r3, r2
 800405a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800405c:	4b29      	ldr	r3, [pc, #164]	; (8004104 <HAL_RCC_ClockConfig+0x1b0>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 0307 	and.w	r3, r3, #7
 8004064:	683a      	ldr	r2, [r7, #0]
 8004066:	429a      	cmp	r2, r3
 8004068:	d210      	bcs.n	800408c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800406a:	4b26      	ldr	r3, [pc, #152]	; (8004104 <HAL_RCC_ClockConfig+0x1b0>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f023 0207 	bic.w	r2, r3, #7
 8004072:	4924      	ldr	r1, [pc, #144]	; (8004104 <HAL_RCC_ClockConfig+0x1b0>)
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	4313      	orrs	r3, r2
 8004078:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800407a:	4b22      	ldr	r3, [pc, #136]	; (8004104 <HAL_RCC_ClockConfig+0x1b0>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0307 	and.w	r3, r3, #7
 8004082:	683a      	ldr	r2, [r7, #0]
 8004084:	429a      	cmp	r2, r3
 8004086:	d001      	beq.n	800408c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e036      	b.n	80040fa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 0304 	and.w	r3, r3, #4
 8004094:	2b00      	cmp	r3, #0
 8004096:	d008      	beq.n	80040aa <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004098:	4b1b      	ldr	r3, [pc, #108]	; (8004108 <HAL_RCC_ClockConfig+0x1b4>)
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	4918      	ldr	r1, [pc, #96]	; (8004108 <HAL_RCC_ClockConfig+0x1b4>)
 80040a6:	4313      	orrs	r3, r2
 80040a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 0308 	and.w	r3, r3, #8
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d009      	beq.n	80040ca <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040b6:	4b14      	ldr	r3, [pc, #80]	; (8004108 <HAL_RCC_ClockConfig+0x1b4>)
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	691b      	ldr	r3, [r3, #16]
 80040c2:	00db      	lsls	r3, r3, #3
 80040c4:	4910      	ldr	r1, [pc, #64]	; (8004108 <HAL_RCC_ClockConfig+0x1b4>)
 80040c6:	4313      	orrs	r3, r2
 80040c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80040ca:	f000 f825 	bl	8004118 <HAL_RCC_GetSysClockFreq>
 80040ce:	4602      	mov	r2, r0
 80040d0:	4b0d      	ldr	r3, [pc, #52]	; (8004108 <HAL_RCC_ClockConfig+0x1b4>)
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	091b      	lsrs	r3, r3, #4
 80040d6:	f003 030f 	and.w	r3, r3, #15
 80040da:	490c      	ldr	r1, [pc, #48]	; (800410c <HAL_RCC_ClockConfig+0x1b8>)
 80040dc:	5ccb      	ldrb	r3, [r1, r3]
 80040de:	f003 031f 	and.w	r3, r3, #31
 80040e2:	fa22 f303 	lsr.w	r3, r2, r3
 80040e6:	4a0a      	ldr	r2, [pc, #40]	; (8004110 <HAL_RCC_ClockConfig+0x1bc>)
 80040e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80040ea:	4b0a      	ldr	r3, [pc, #40]	; (8004114 <HAL_RCC_ClockConfig+0x1c0>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4618      	mov	r0, r3
 80040f0:	f7fd f93a 	bl	8001368 <HAL_InitTick>
 80040f4:	4603      	mov	r3, r0
 80040f6:	72fb      	strb	r3, [r7, #11]

  return status;
 80040f8:	7afb      	ldrb	r3, [r7, #11]
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3710      	adds	r7, #16
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop
 8004104:	40022000 	.word	0x40022000
 8004108:	40021000 	.word	0x40021000
 800410c:	0800537c 	.word	0x0800537c
 8004110:	20000004 	.word	0x20000004
 8004114:	20000008 	.word	0x20000008

08004118 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004118:	b480      	push	{r7}
 800411a:	b089      	sub	sp, #36	; 0x24
 800411c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800411e:	2300      	movs	r3, #0
 8004120:	61fb      	str	r3, [r7, #28]
 8004122:	2300      	movs	r3, #0
 8004124:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004126:	4b3e      	ldr	r3, [pc, #248]	; (8004220 <HAL_RCC_GetSysClockFreq+0x108>)
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	f003 030c 	and.w	r3, r3, #12
 800412e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004130:	4b3b      	ldr	r3, [pc, #236]	; (8004220 <HAL_RCC_GetSysClockFreq+0x108>)
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	f003 0303 	and.w	r3, r3, #3
 8004138:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d005      	beq.n	800414c <HAL_RCC_GetSysClockFreq+0x34>
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	2b0c      	cmp	r3, #12
 8004144:	d121      	bne.n	800418a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2b01      	cmp	r3, #1
 800414a:	d11e      	bne.n	800418a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800414c:	4b34      	ldr	r3, [pc, #208]	; (8004220 <HAL_RCC_GetSysClockFreq+0x108>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0308 	and.w	r3, r3, #8
 8004154:	2b00      	cmp	r3, #0
 8004156:	d107      	bne.n	8004168 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004158:	4b31      	ldr	r3, [pc, #196]	; (8004220 <HAL_RCC_GetSysClockFreq+0x108>)
 800415a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800415e:	0a1b      	lsrs	r3, r3, #8
 8004160:	f003 030f 	and.w	r3, r3, #15
 8004164:	61fb      	str	r3, [r7, #28]
 8004166:	e005      	b.n	8004174 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004168:	4b2d      	ldr	r3, [pc, #180]	; (8004220 <HAL_RCC_GetSysClockFreq+0x108>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	091b      	lsrs	r3, r3, #4
 800416e:	f003 030f 	and.w	r3, r3, #15
 8004172:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004174:	4a2b      	ldr	r2, [pc, #172]	; (8004224 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800417c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d10d      	bne.n	80041a0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004188:	e00a      	b.n	80041a0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	2b04      	cmp	r3, #4
 800418e:	d102      	bne.n	8004196 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004190:	4b25      	ldr	r3, [pc, #148]	; (8004228 <HAL_RCC_GetSysClockFreq+0x110>)
 8004192:	61bb      	str	r3, [r7, #24]
 8004194:	e004      	b.n	80041a0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	2b08      	cmp	r3, #8
 800419a:	d101      	bne.n	80041a0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800419c:	4b23      	ldr	r3, [pc, #140]	; (800422c <HAL_RCC_GetSysClockFreq+0x114>)
 800419e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	2b0c      	cmp	r3, #12
 80041a4:	d134      	bne.n	8004210 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80041a6:	4b1e      	ldr	r3, [pc, #120]	; (8004220 <HAL_RCC_GetSysClockFreq+0x108>)
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	f003 0303 	and.w	r3, r3, #3
 80041ae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	d003      	beq.n	80041be <HAL_RCC_GetSysClockFreq+0xa6>
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	2b03      	cmp	r3, #3
 80041ba:	d003      	beq.n	80041c4 <HAL_RCC_GetSysClockFreq+0xac>
 80041bc:	e005      	b.n	80041ca <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80041be:	4b1a      	ldr	r3, [pc, #104]	; (8004228 <HAL_RCC_GetSysClockFreq+0x110>)
 80041c0:	617b      	str	r3, [r7, #20]
      break;
 80041c2:	e005      	b.n	80041d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80041c4:	4b19      	ldr	r3, [pc, #100]	; (800422c <HAL_RCC_GetSysClockFreq+0x114>)
 80041c6:	617b      	str	r3, [r7, #20]
      break;
 80041c8:	e002      	b.n	80041d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80041ca:	69fb      	ldr	r3, [r7, #28]
 80041cc:	617b      	str	r3, [r7, #20]
      break;
 80041ce:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80041d0:	4b13      	ldr	r3, [pc, #76]	; (8004220 <HAL_RCC_GetSysClockFreq+0x108>)
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	091b      	lsrs	r3, r3, #4
 80041d6:	f003 0307 	and.w	r3, r3, #7
 80041da:	3301      	adds	r3, #1
 80041dc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80041de:	4b10      	ldr	r3, [pc, #64]	; (8004220 <HAL_RCC_GetSysClockFreq+0x108>)
 80041e0:	68db      	ldr	r3, [r3, #12]
 80041e2:	0a1b      	lsrs	r3, r3, #8
 80041e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041e8:	697a      	ldr	r2, [r7, #20]
 80041ea:	fb03 f202 	mul.w	r2, r3, r2
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041f4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80041f6:	4b0a      	ldr	r3, [pc, #40]	; (8004220 <HAL_RCC_GetSysClockFreq+0x108>)
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	0e5b      	lsrs	r3, r3, #25
 80041fc:	f003 0303 	and.w	r3, r3, #3
 8004200:	3301      	adds	r3, #1
 8004202:	005b      	lsls	r3, r3, #1
 8004204:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004206:	697a      	ldr	r2, [r7, #20]
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	fbb2 f3f3 	udiv	r3, r2, r3
 800420e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004210:	69bb      	ldr	r3, [r7, #24]
}
 8004212:	4618      	mov	r0, r3
 8004214:	3724      	adds	r7, #36	; 0x24
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr
 800421e:	bf00      	nop
 8004220:	40021000 	.word	0x40021000
 8004224:	0800538c 	.word	0x0800538c
 8004228:	00f42400 	.word	0x00f42400
 800422c:	007a1200 	.word	0x007a1200

08004230 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b086      	sub	sp, #24
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004238:	2300      	movs	r3, #0
 800423a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800423c:	4b2a      	ldr	r3, [pc, #168]	; (80042e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800423e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004240:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004244:	2b00      	cmp	r3, #0
 8004246:	d003      	beq.n	8004250 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004248:	f7ff fa38 	bl	80036bc <HAL_PWREx_GetVoltageRange>
 800424c:	6178      	str	r0, [r7, #20]
 800424e:	e014      	b.n	800427a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004250:	4b25      	ldr	r3, [pc, #148]	; (80042e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004254:	4a24      	ldr	r2, [pc, #144]	; (80042e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004256:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800425a:	6593      	str	r3, [r2, #88]	; 0x58
 800425c:	4b22      	ldr	r3, [pc, #136]	; (80042e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800425e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004260:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004264:	60fb      	str	r3, [r7, #12]
 8004266:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004268:	f7ff fa28 	bl	80036bc <HAL_PWREx_GetVoltageRange>
 800426c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800426e:	4b1e      	ldr	r3, [pc, #120]	; (80042e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004272:	4a1d      	ldr	r2, [pc, #116]	; (80042e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004274:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004278:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004280:	d10b      	bne.n	800429a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2b80      	cmp	r3, #128	; 0x80
 8004286:	d919      	bls.n	80042bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2ba0      	cmp	r3, #160	; 0xa0
 800428c:	d902      	bls.n	8004294 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800428e:	2302      	movs	r3, #2
 8004290:	613b      	str	r3, [r7, #16]
 8004292:	e013      	b.n	80042bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004294:	2301      	movs	r3, #1
 8004296:	613b      	str	r3, [r7, #16]
 8004298:	e010      	b.n	80042bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2b80      	cmp	r3, #128	; 0x80
 800429e:	d902      	bls.n	80042a6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80042a0:	2303      	movs	r3, #3
 80042a2:	613b      	str	r3, [r7, #16]
 80042a4:	e00a      	b.n	80042bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2b80      	cmp	r3, #128	; 0x80
 80042aa:	d102      	bne.n	80042b2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80042ac:	2302      	movs	r3, #2
 80042ae:	613b      	str	r3, [r7, #16]
 80042b0:	e004      	b.n	80042bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2b70      	cmp	r3, #112	; 0x70
 80042b6:	d101      	bne.n	80042bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80042b8:	2301      	movs	r3, #1
 80042ba:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80042bc:	4b0b      	ldr	r3, [pc, #44]	; (80042ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f023 0207 	bic.w	r2, r3, #7
 80042c4:	4909      	ldr	r1, [pc, #36]	; (80042ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	4313      	orrs	r3, r2
 80042ca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80042cc:	4b07      	ldr	r3, [pc, #28]	; (80042ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0307 	and.w	r3, r3, #7
 80042d4:	693a      	ldr	r2, [r7, #16]
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d001      	beq.n	80042de <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e000      	b.n	80042e0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80042de:	2300      	movs	r3, #0
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3718      	adds	r7, #24
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}
 80042e8:	40021000 	.word	0x40021000
 80042ec:	40022000 	.word	0x40022000

080042f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b086      	sub	sp, #24
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80042f8:	2300      	movs	r3, #0
 80042fa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80042fc:	2300      	movs	r3, #0
 80042fe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004308:	2b00      	cmp	r3, #0
 800430a:	d041      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004310:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004314:	d02a      	beq.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004316:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800431a:	d824      	bhi.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800431c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004320:	d008      	beq.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004322:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004326:	d81e      	bhi.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004328:	2b00      	cmp	r3, #0
 800432a:	d00a      	beq.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800432c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004330:	d010      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004332:	e018      	b.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004334:	4b86      	ldr	r3, [pc, #536]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	4a85      	ldr	r2, [pc, #532]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800433a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800433e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004340:	e015      	b.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	3304      	adds	r3, #4
 8004346:	2100      	movs	r1, #0
 8004348:	4618      	mov	r0, r3
 800434a:	f000 fabb 	bl	80048c4 <RCCEx_PLLSAI1_Config>
 800434e:	4603      	mov	r3, r0
 8004350:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004352:	e00c      	b.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	3320      	adds	r3, #32
 8004358:	2100      	movs	r1, #0
 800435a:	4618      	mov	r0, r3
 800435c:	f000 fba6 	bl	8004aac <RCCEx_PLLSAI2_Config>
 8004360:	4603      	mov	r3, r0
 8004362:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004364:	e003      	b.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	74fb      	strb	r3, [r7, #19]
      break;
 800436a:	e000      	b.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800436c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800436e:	7cfb      	ldrb	r3, [r7, #19]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d10b      	bne.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004374:	4b76      	ldr	r3, [pc, #472]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800437a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004382:	4973      	ldr	r1, [pc, #460]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004384:	4313      	orrs	r3, r2
 8004386:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800438a:	e001      	b.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800438c:	7cfb      	ldrb	r3, [r7, #19]
 800438e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004398:	2b00      	cmp	r3, #0
 800439a:	d041      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043a0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80043a4:	d02a      	beq.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80043a6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80043aa:	d824      	bhi.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80043ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80043b0:	d008      	beq.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80043b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80043b6:	d81e      	bhi.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d00a      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80043bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80043c0:	d010      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80043c2:	e018      	b.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80043c4:	4b62      	ldr	r3, [pc, #392]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	4a61      	ldr	r2, [pc, #388]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043ce:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80043d0:	e015      	b.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	3304      	adds	r3, #4
 80043d6:	2100      	movs	r1, #0
 80043d8:	4618      	mov	r0, r3
 80043da:	f000 fa73 	bl	80048c4 <RCCEx_PLLSAI1_Config>
 80043de:	4603      	mov	r3, r0
 80043e0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80043e2:	e00c      	b.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	3320      	adds	r3, #32
 80043e8:	2100      	movs	r1, #0
 80043ea:	4618      	mov	r0, r3
 80043ec:	f000 fb5e 	bl	8004aac <RCCEx_PLLSAI2_Config>
 80043f0:	4603      	mov	r3, r0
 80043f2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80043f4:	e003      	b.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	74fb      	strb	r3, [r7, #19]
      break;
 80043fa:	e000      	b.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80043fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043fe:	7cfb      	ldrb	r3, [r7, #19]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d10b      	bne.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004404:	4b52      	ldr	r3, [pc, #328]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800440a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004412:	494f      	ldr	r1, [pc, #316]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004414:	4313      	orrs	r3, r2
 8004416:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800441a:	e001      	b.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800441c:	7cfb      	ldrb	r3, [r7, #19]
 800441e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004428:	2b00      	cmp	r3, #0
 800442a:	f000 80a0 	beq.w	800456e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800442e:	2300      	movs	r3, #0
 8004430:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004432:	4b47      	ldr	r3, [pc, #284]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d101      	bne.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800443e:	2301      	movs	r3, #1
 8004440:	e000      	b.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004442:	2300      	movs	r3, #0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d00d      	beq.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004448:	4b41      	ldr	r3, [pc, #260]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800444a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800444c:	4a40      	ldr	r2, [pc, #256]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800444e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004452:	6593      	str	r3, [r2, #88]	; 0x58
 8004454:	4b3e      	ldr	r3, [pc, #248]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004456:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004458:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800445c:	60bb      	str	r3, [r7, #8]
 800445e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004460:	2301      	movs	r3, #1
 8004462:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004464:	4b3b      	ldr	r3, [pc, #236]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a3a      	ldr	r2, [pc, #232]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800446a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800446e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004470:	f7fc ffca 	bl	8001408 <HAL_GetTick>
 8004474:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004476:	e009      	b.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004478:	f7fc ffc6 	bl	8001408 <HAL_GetTick>
 800447c:	4602      	mov	r2, r0
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	2b02      	cmp	r3, #2
 8004484:	d902      	bls.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004486:	2303      	movs	r3, #3
 8004488:	74fb      	strb	r3, [r7, #19]
        break;
 800448a:	e005      	b.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800448c:	4b31      	ldr	r3, [pc, #196]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004494:	2b00      	cmp	r3, #0
 8004496:	d0ef      	beq.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004498:	7cfb      	ldrb	r3, [r7, #19]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d15c      	bne.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800449e:	4b2c      	ldr	r3, [pc, #176]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044a8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d01f      	beq.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044b6:	697a      	ldr	r2, [r7, #20]
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d019      	beq.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80044bc:	4b24      	ldr	r3, [pc, #144]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044c6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80044c8:	4b21      	ldr	r3, [pc, #132]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ce:	4a20      	ldr	r2, [pc, #128]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80044d8:	4b1d      	ldr	r3, [pc, #116]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044de:	4a1c      	ldr	r2, [pc, #112]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80044e8:	4a19      	ldr	r2, [pc, #100]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	f003 0301 	and.w	r3, r3, #1
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d016      	beq.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044fa:	f7fc ff85 	bl	8001408 <HAL_GetTick>
 80044fe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004500:	e00b      	b.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004502:	f7fc ff81 	bl	8001408 <HAL_GetTick>
 8004506:	4602      	mov	r2, r0
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004510:	4293      	cmp	r3, r2
 8004512:	d902      	bls.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004514:	2303      	movs	r3, #3
 8004516:	74fb      	strb	r3, [r7, #19]
            break;
 8004518:	e006      	b.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800451a:	4b0d      	ldr	r3, [pc, #52]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800451c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004520:	f003 0302 	and.w	r3, r3, #2
 8004524:	2b00      	cmp	r3, #0
 8004526:	d0ec      	beq.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004528:	7cfb      	ldrb	r3, [r7, #19]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d10c      	bne.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800452e:	4b08      	ldr	r3, [pc, #32]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004530:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004534:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800453e:	4904      	ldr	r1, [pc, #16]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004540:	4313      	orrs	r3, r2
 8004542:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004546:	e009      	b.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004548:	7cfb      	ldrb	r3, [r7, #19]
 800454a:	74bb      	strb	r3, [r7, #18]
 800454c:	e006      	b.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800454e:	bf00      	nop
 8004550:	40021000 	.word	0x40021000
 8004554:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004558:	7cfb      	ldrb	r3, [r7, #19]
 800455a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800455c:	7c7b      	ldrb	r3, [r7, #17]
 800455e:	2b01      	cmp	r3, #1
 8004560:	d105      	bne.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004562:	4b9e      	ldr	r3, [pc, #632]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004566:	4a9d      	ldr	r2, [pc, #628]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004568:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800456c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 0301 	and.w	r3, r3, #1
 8004576:	2b00      	cmp	r3, #0
 8004578:	d00a      	beq.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800457a:	4b98      	ldr	r3, [pc, #608]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800457c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004580:	f023 0203 	bic.w	r2, r3, #3
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004588:	4994      	ldr	r1, [pc, #592]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800458a:	4313      	orrs	r3, r2
 800458c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 0302 	and.w	r3, r3, #2
 8004598:	2b00      	cmp	r3, #0
 800459a:	d00a      	beq.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800459c:	4b8f      	ldr	r3, [pc, #572]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800459e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045a2:	f023 020c 	bic.w	r2, r3, #12
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045aa:	498c      	ldr	r1, [pc, #560]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045ac:	4313      	orrs	r3, r2
 80045ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 0304 	and.w	r3, r3, #4
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d00a      	beq.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80045be:	4b87      	ldr	r3, [pc, #540]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045c4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045cc:	4983      	ldr	r1, [pc, #524]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045ce:	4313      	orrs	r3, r2
 80045d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 0308 	and.w	r3, r3, #8
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d00a      	beq.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80045e0:	4b7e      	ldr	r3, [pc, #504]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045e6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ee:	497b      	ldr	r1, [pc, #492]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045f0:	4313      	orrs	r3, r2
 80045f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 0310 	and.w	r3, r3, #16
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d00a      	beq.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004602:	4b76      	ldr	r3, [pc, #472]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004604:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004608:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004610:	4972      	ldr	r1, [pc, #456]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004612:	4313      	orrs	r3, r2
 8004614:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 0320 	and.w	r3, r3, #32
 8004620:	2b00      	cmp	r3, #0
 8004622:	d00a      	beq.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004624:	4b6d      	ldr	r3, [pc, #436]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004626:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800462a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004632:	496a      	ldr	r1, [pc, #424]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004634:	4313      	orrs	r3, r2
 8004636:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004642:	2b00      	cmp	r3, #0
 8004644:	d00a      	beq.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004646:	4b65      	ldr	r3, [pc, #404]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004648:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800464c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004654:	4961      	ldr	r1, [pc, #388]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004656:	4313      	orrs	r3, r2
 8004658:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004664:	2b00      	cmp	r3, #0
 8004666:	d00a      	beq.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004668:	4b5c      	ldr	r3, [pc, #368]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800466a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800466e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004676:	4959      	ldr	r1, [pc, #356]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004678:	4313      	orrs	r3, r2
 800467a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004686:	2b00      	cmp	r3, #0
 8004688:	d00a      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800468a:	4b54      	ldr	r3, [pc, #336]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800468c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004690:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004698:	4950      	ldr	r1, [pc, #320]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800469a:	4313      	orrs	r3, r2
 800469c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d00a      	beq.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80046ac:	4b4b      	ldr	r3, [pc, #300]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046b2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ba:	4948      	ldr	r1, [pc, #288]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046bc:	4313      	orrs	r3, r2
 80046be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d00a      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80046ce:	4b43      	ldr	r3, [pc, #268]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046dc:	493f      	ldr	r1, [pc, #252]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046de:	4313      	orrs	r3, r2
 80046e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d028      	beq.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80046f0:	4b3a      	ldr	r3, [pc, #232]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046fe:	4937      	ldr	r1, [pc, #220]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004700:	4313      	orrs	r3, r2
 8004702:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800470a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800470e:	d106      	bne.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004710:	4b32      	ldr	r3, [pc, #200]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	4a31      	ldr	r2, [pc, #196]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004716:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800471a:	60d3      	str	r3, [r2, #12]
 800471c:	e011      	b.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004722:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004726:	d10c      	bne.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	3304      	adds	r3, #4
 800472c:	2101      	movs	r1, #1
 800472e:	4618      	mov	r0, r3
 8004730:	f000 f8c8 	bl	80048c4 <RCCEx_PLLSAI1_Config>
 8004734:	4603      	mov	r3, r0
 8004736:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004738:	7cfb      	ldrb	r3, [r7, #19]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d001      	beq.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800473e:	7cfb      	ldrb	r3, [r7, #19]
 8004740:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d028      	beq.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800474e:	4b23      	ldr	r3, [pc, #140]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004750:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004754:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800475c:	491f      	ldr	r1, [pc, #124]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800475e:	4313      	orrs	r3, r2
 8004760:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004768:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800476c:	d106      	bne.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800476e:	4b1b      	ldr	r3, [pc, #108]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	4a1a      	ldr	r2, [pc, #104]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004774:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004778:	60d3      	str	r3, [r2, #12]
 800477a:	e011      	b.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004780:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004784:	d10c      	bne.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	3304      	adds	r3, #4
 800478a:	2101      	movs	r1, #1
 800478c:	4618      	mov	r0, r3
 800478e:	f000 f899 	bl	80048c4 <RCCEx_PLLSAI1_Config>
 8004792:	4603      	mov	r3, r0
 8004794:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004796:	7cfb      	ldrb	r3, [r7, #19]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d001      	beq.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800479c:	7cfb      	ldrb	r3, [r7, #19]
 800479e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d02b      	beq.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80047ac:	4b0b      	ldr	r3, [pc, #44]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047b2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047ba:	4908      	ldr	r1, [pc, #32]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047bc:	4313      	orrs	r3, r2
 80047be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047ca:	d109      	bne.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047cc:	4b03      	ldr	r3, [pc, #12]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	4a02      	ldr	r2, [pc, #8]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047d6:	60d3      	str	r3, [r2, #12]
 80047d8:	e014      	b.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80047da:	bf00      	nop
 80047dc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80047e8:	d10c      	bne.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	3304      	adds	r3, #4
 80047ee:	2101      	movs	r1, #1
 80047f0:	4618      	mov	r0, r3
 80047f2:	f000 f867 	bl	80048c4 <RCCEx_PLLSAI1_Config>
 80047f6:	4603      	mov	r3, r0
 80047f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80047fa:	7cfb      	ldrb	r3, [r7, #19]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d001      	beq.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004800:	7cfb      	ldrb	r3, [r7, #19]
 8004802:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800480c:	2b00      	cmp	r3, #0
 800480e:	d02f      	beq.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004810:	4b2b      	ldr	r3, [pc, #172]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004816:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800481e:	4928      	ldr	r1, [pc, #160]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004820:	4313      	orrs	r3, r2
 8004822:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800482a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800482e:	d10d      	bne.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	3304      	adds	r3, #4
 8004834:	2102      	movs	r1, #2
 8004836:	4618      	mov	r0, r3
 8004838:	f000 f844 	bl	80048c4 <RCCEx_PLLSAI1_Config>
 800483c:	4603      	mov	r3, r0
 800483e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004840:	7cfb      	ldrb	r3, [r7, #19]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d014      	beq.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004846:	7cfb      	ldrb	r3, [r7, #19]
 8004848:	74bb      	strb	r3, [r7, #18]
 800484a:	e011      	b.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004850:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004854:	d10c      	bne.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	3320      	adds	r3, #32
 800485a:	2102      	movs	r1, #2
 800485c:	4618      	mov	r0, r3
 800485e:	f000 f925 	bl	8004aac <RCCEx_PLLSAI2_Config>
 8004862:	4603      	mov	r3, r0
 8004864:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004866:	7cfb      	ldrb	r3, [r7, #19]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d001      	beq.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800486c:	7cfb      	ldrb	r3, [r7, #19]
 800486e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004878:	2b00      	cmp	r3, #0
 800487a:	d00a      	beq.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800487c:	4b10      	ldr	r3, [pc, #64]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800487e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004882:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800488a:	490d      	ldr	r1, [pc, #52]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800488c:	4313      	orrs	r3, r2
 800488e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800489a:	2b00      	cmp	r3, #0
 800489c:	d00b      	beq.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800489e:	4b08      	ldr	r3, [pc, #32]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80048a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048a4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048ae:	4904      	ldr	r1, [pc, #16]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80048b0:	4313      	orrs	r3, r2
 80048b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80048b6:	7cbb      	ldrb	r3, [r7, #18]
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3718      	adds	r7, #24
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}
 80048c0:	40021000 	.word	0x40021000

080048c4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b084      	sub	sp, #16
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
 80048cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80048ce:	2300      	movs	r3, #0
 80048d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80048d2:	4b75      	ldr	r3, [pc, #468]	; (8004aa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048d4:	68db      	ldr	r3, [r3, #12]
 80048d6:	f003 0303 	and.w	r3, r3, #3
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d018      	beq.n	8004910 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80048de:	4b72      	ldr	r3, [pc, #456]	; (8004aa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048e0:	68db      	ldr	r3, [r3, #12]
 80048e2:	f003 0203 	and.w	r2, r3, #3
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d10d      	bne.n	800490a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
       ||
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d009      	beq.n	800490a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80048f6:	4b6c      	ldr	r3, [pc, #432]	; (8004aa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048f8:	68db      	ldr	r3, [r3, #12]
 80048fa:	091b      	lsrs	r3, r3, #4
 80048fc:	f003 0307 	and.w	r3, r3, #7
 8004900:	1c5a      	adds	r2, r3, #1
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	685b      	ldr	r3, [r3, #4]
       ||
 8004906:	429a      	cmp	r2, r3
 8004908:	d047      	beq.n	800499a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	73fb      	strb	r3, [r7, #15]
 800490e:	e044      	b.n	800499a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	2b03      	cmp	r3, #3
 8004916:	d018      	beq.n	800494a <RCCEx_PLLSAI1_Config+0x86>
 8004918:	2b03      	cmp	r3, #3
 800491a:	d825      	bhi.n	8004968 <RCCEx_PLLSAI1_Config+0xa4>
 800491c:	2b01      	cmp	r3, #1
 800491e:	d002      	beq.n	8004926 <RCCEx_PLLSAI1_Config+0x62>
 8004920:	2b02      	cmp	r3, #2
 8004922:	d009      	beq.n	8004938 <RCCEx_PLLSAI1_Config+0x74>
 8004924:	e020      	b.n	8004968 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004926:	4b60      	ldr	r3, [pc, #384]	; (8004aa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 0302 	and.w	r3, r3, #2
 800492e:	2b00      	cmp	r3, #0
 8004930:	d11d      	bne.n	800496e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004936:	e01a      	b.n	800496e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004938:	4b5b      	ldr	r3, [pc, #364]	; (8004aa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004940:	2b00      	cmp	r3, #0
 8004942:	d116      	bne.n	8004972 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004948:	e013      	b.n	8004972 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800494a:	4b57      	ldr	r3, [pc, #348]	; (8004aa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d10f      	bne.n	8004976 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004956:	4b54      	ldr	r3, [pc, #336]	; (8004aa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800495e:	2b00      	cmp	r3, #0
 8004960:	d109      	bne.n	8004976 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004966:	e006      	b.n	8004976 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	73fb      	strb	r3, [r7, #15]
      break;
 800496c:	e004      	b.n	8004978 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800496e:	bf00      	nop
 8004970:	e002      	b.n	8004978 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004972:	bf00      	nop
 8004974:	e000      	b.n	8004978 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004976:	bf00      	nop
    }

    if(status == HAL_OK)
 8004978:	7bfb      	ldrb	r3, [r7, #15]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d10d      	bne.n	800499a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800497e:	4b4a      	ldr	r3, [pc, #296]	; (8004aa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6819      	ldr	r1, [r3, #0]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	3b01      	subs	r3, #1
 8004990:	011b      	lsls	r3, r3, #4
 8004992:	430b      	orrs	r3, r1
 8004994:	4944      	ldr	r1, [pc, #272]	; (8004aa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004996:	4313      	orrs	r3, r2
 8004998:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800499a:	7bfb      	ldrb	r3, [r7, #15]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d17d      	bne.n	8004a9c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80049a0:	4b41      	ldr	r3, [pc, #260]	; (8004aa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a40      	ldr	r2, [pc, #256]	; (8004aa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049a6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80049aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049ac:	f7fc fd2c 	bl	8001408 <HAL_GetTick>
 80049b0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80049b2:	e009      	b.n	80049c8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80049b4:	f7fc fd28 	bl	8001408 <HAL_GetTick>
 80049b8:	4602      	mov	r2, r0
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	2b02      	cmp	r3, #2
 80049c0:	d902      	bls.n	80049c8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80049c2:	2303      	movs	r3, #3
 80049c4:	73fb      	strb	r3, [r7, #15]
        break;
 80049c6:	e005      	b.n	80049d4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80049c8:	4b37      	ldr	r3, [pc, #220]	; (8004aa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d1ef      	bne.n	80049b4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80049d4:	7bfb      	ldrb	r3, [r7, #15]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d160      	bne.n	8004a9c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d111      	bne.n	8004a04 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80049e0:	4b31      	ldr	r3, [pc, #196]	; (8004aa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049e2:	691b      	ldr	r3, [r3, #16]
 80049e4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80049e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049ec:	687a      	ldr	r2, [r7, #4]
 80049ee:	6892      	ldr	r2, [r2, #8]
 80049f0:	0211      	lsls	r1, r2, #8
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	68d2      	ldr	r2, [r2, #12]
 80049f6:	0912      	lsrs	r2, r2, #4
 80049f8:	0452      	lsls	r2, r2, #17
 80049fa:	430a      	orrs	r2, r1
 80049fc:	492a      	ldr	r1, [pc, #168]	; (8004aa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049fe:	4313      	orrs	r3, r2
 8004a00:	610b      	str	r3, [r1, #16]
 8004a02:	e027      	b.n	8004a54 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d112      	bne.n	8004a30 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a0a:	4b27      	ldr	r3, [pc, #156]	; (8004aa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a0c:	691b      	ldr	r3, [r3, #16]
 8004a0e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004a12:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	6892      	ldr	r2, [r2, #8]
 8004a1a:	0211      	lsls	r1, r2, #8
 8004a1c:	687a      	ldr	r2, [r7, #4]
 8004a1e:	6912      	ldr	r2, [r2, #16]
 8004a20:	0852      	lsrs	r2, r2, #1
 8004a22:	3a01      	subs	r2, #1
 8004a24:	0552      	lsls	r2, r2, #21
 8004a26:	430a      	orrs	r2, r1
 8004a28:	491f      	ldr	r1, [pc, #124]	; (8004aa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	610b      	str	r3, [r1, #16]
 8004a2e:	e011      	b.n	8004a54 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a30:	4b1d      	ldr	r3, [pc, #116]	; (8004aa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a32:	691b      	ldr	r3, [r3, #16]
 8004a34:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004a38:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	6892      	ldr	r2, [r2, #8]
 8004a40:	0211      	lsls	r1, r2, #8
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	6952      	ldr	r2, [r2, #20]
 8004a46:	0852      	lsrs	r2, r2, #1
 8004a48:	3a01      	subs	r2, #1
 8004a4a:	0652      	lsls	r2, r2, #25
 8004a4c:	430a      	orrs	r2, r1
 8004a4e:	4916      	ldr	r1, [pc, #88]	; (8004aa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a50:	4313      	orrs	r3, r2
 8004a52:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004a54:	4b14      	ldr	r3, [pc, #80]	; (8004aa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a13      	ldr	r2, [pc, #76]	; (8004aa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a5a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004a5e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a60:	f7fc fcd2 	bl	8001408 <HAL_GetTick>
 8004a64:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004a66:	e009      	b.n	8004a7c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a68:	f7fc fcce 	bl	8001408 <HAL_GetTick>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	2b02      	cmp	r3, #2
 8004a74:	d902      	bls.n	8004a7c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004a76:	2303      	movs	r3, #3
 8004a78:	73fb      	strb	r3, [r7, #15]
          break;
 8004a7a:	e005      	b.n	8004a88 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004a7c:	4b0a      	ldr	r3, [pc, #40]	; (8004aa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d0ef      	beq.n	8004a68 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004a88:	7bfb      	ldrb	r3, [r7, #15]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d106      	bne.n	8004a9c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004a8e:	4b06      	ldr	r3, [pc, #24]	; (8004aa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a90:	691a      	ldr	r2, [r3, #16]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	699b      	ldr	r3, [r3, #24]
 8004a96:	4904      	ldr	r1, [pc, #16]	; (8004aa8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3710      	adds	r7, #16
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	40021000 	.word	0x40021000

08004aac <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b084      	sub	sp, #16
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004aba:	4b6a      	ldr	r3, [pc, #424]	; (8004c64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	f003 0303 	and.w	r3, r3, #3
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d018      	beq.n	8004af8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004ac6:	4b67      	ldr	r3, [pc, #412]	; (8004c64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ac8:	68db      	ldr	r3, [r3, #12]
 8004aca:	f003 0203 	and.w	r2, r3, #3
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d10d      	bne.n	8004af2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
       ||
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d009      	beq.n	8004af2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004ade:	4b61      	ldr	r3, [pc, #388]	; (8004c64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ae0:	68db      	ldr	r3, [r3, #12]
 8004ae2:	091b      	lsrs	r3, r3, #4
 8004ae4:	f003 0307 	and.w	r3, r3, #7
 8004ae8:	1c5a      	adds	r2, r3, #1
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	685b      	ldr	r3, [r3, #4]
       ||
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d047      	beq.n	8004b82 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	73fb      	strb	r3, [r7, #15]
 8004af6:	e044      	b.n	8004b82 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2b03      	cmp	r3, #3
 8004afe:	d018      	beq.n	8004b32 <RCCEx_PLLSAI2_Config+0x86>
 8004b00:	2b03      	cmp	r3, #3
 8004b02:	d825      	bhi.n	8004b50 <RCCEx_PLLSAI2_Config+0xa4>
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d002      	beq.n	8004b0e <RCCEx_PLLSAI2_Config+0x62>
 8004b08:	2b02      	cmp	r3, #2
 8004b0a:	d009      	beq.n	8004b20 <RCCEx_PLLSAI2_Config+0x74>
 8004b0c:	e020      	b.n	8004b50 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004b0e:	4b55      	ldr	r3, [pc, #340]	; (8004c64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 0302 	and.w	r3, r3, #2
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d11d      	bne.n	8004b56 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b1e:	e01a      	b.n	8004b56 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004b20:	4b50      	ldr	r3, [pc, #320]	; (8004c64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d116      	bne.n	8004b5a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b30:	e013      	b.n	8004b5a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004b32:	4b4c      	ldr	r3, [pc, #304]	; (8004c64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d10f      	bne.n	8004b5e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004b3e:	4b49      	ldr	r3, [pc, #292]	; (8004c64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d109      	bne.n	8004b5e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004b4e:	e006      	b.n	8004b5e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	73fb      	strb	r3, [r7, #15]
      break;
 8004b54:	e004      	b.n	8004b60 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004b56:	bf00      	nop
 8004b58:	e002      	b.n	8004b60 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004b5a:	bf00      	nop
 8004b5c:	e000      	b.n	8004b60 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004b5e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004b60:	7bfb      	ldrb	r3, [r7, #15]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d10d      	bne.n	8004b82 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004b66:	4b3f      	ldr	r3, [pc, #252]	; (8004c64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6819      	ldr	r1, [r3, #0]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	3b01      	subs	r3, #1
 8004b78:	011b      	lsls	r3, r3, #4
 8004b7a:	430b      	orrs	r3, r1
 8004b7c:	4939      	ldr	r1, [pc, #228]	; (8004c64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004b82:	7bfb      	ldrb	r3, [r7, #15]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d167      	bne.n	8004c58 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004b88:	4b36      	ldr	r3, [pc, #216]	; (8004c64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a35      	ldr	r2, [pc, #212]	; (8004c64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b92:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b94:	f7fc fc38 	bl	8001408 <HAL_GetTick>
 8004b98:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004b9a:	e009      	b.n	8004bb0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004b9c:	f7fc fc34 	bl	8001408 <HAL_GetTick>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	2b02      	cmp	r3, #2
 8004ba8:	d902      	bls.n	8004bb0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004baa:	2303      	movs	r3, #3
 8004bac:	73fb      	strb	r3, [r7, #15]
        break;
 8004bae:	e005      	b.n	8004bbc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004bb0:	4b2c      	ldr	r3, [pc, #176]	; (8004c64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d1ef      	bne.n	8004b9c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004bbc:	7bfb      	ldrb	r3, [r7, #15]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d14a      	bne.n	8004c58 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d111      	bne.n	8004bec <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004bc8:	4b26      	ldr	r3, [pc, #152]	; (8004c64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bca:	695b      	ldr	r3, [r3, #20]
 8004bcc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004bd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bd4:	687a      	ldr	r2, [r7, #4]
 8004bd6:	6892      	ldr	r2, [r2, #8]
 8004bd8:	0211      	lsls	r1, r2, #8
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	68d2      	ldr	r2, [r2, #12]
 8004bde:	0912      	lsrs	r2, r2, #4
 8004be0:	0452      	lsls	r2, r2, #17
 8004be2:	430a      	orrs	r2, r1
 8004be4:	491f      	ldr	r1, [pc, #124]	; (8004c64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004be6:	4313      	orrs	r3, r2
 8004be8:	614b      	str	r3, [r1, #20]
 8004bea:	e011      	b.n	8004c10 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004bec:	4b1d      	ldr	r3, [pc, #116]	; (8004c64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bee:	695b      	ldr	r3, [r3, #20]
 8004bf0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004bf4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	6892      	ldr	r2, [r2, #8]
 8004bfc:	0211      	lsls	r1, r2, #8
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	6912      	ldr	r2, [r2, #16]
 8004c02:	0852      	lsrs	r2, r2, #1
 8004c04:	3a01      	subs	r2, #1
 8004c06:	0652      	lsls	r2, r2, #25
 8004c08:	430a      	orrs	r2, r1
 8004c0a:	4916      	ldr	r1, [pc, #88]	; (8004c64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004c10:	4b14      	ldr	r3, [pc, #80]	; (8004c64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a13      	ldr	r2, [pc, #76]	; (8004c64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c1a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c1c:	f7fc fbf4 	bl	8001408 <HAL_GetTick>
 8004c20:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004c22:	e009      	b.n	8004c38 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004c24:	f7fc fbf0 	bl	8001408 <HAL_GetTick>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	1ad3      	subs	r3, r2, r3
 8004c2e:	2b02      	cmp	r3, #2
 8004c30:	d902      	bls.n	8004c38 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004c32:	2303      	movs	r3, #3
 8004c34:	73fb      	strb	r3, [r7, #15]
          break;
 8004c36:	e005      	b.n	8004c44 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004c38:	4b0a      	ldr	r3, [pc, #40]	; (8004c64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d0ef      	beq.n	8004c24 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004c44:	7bfb      	ldrb	r3, [r7, #15]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d106      	bne.n	8004c58 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004c4a:	4b06      	ldr	r3, [pc, #24]	; (8004c64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c4c:	695a      	ldr	r2, [r3, #20]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	695b      	ldr	r3, [r3, #20]
 8004c52:	4904      	ldr	r1, [pc, #16]	; (8004c64 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c54:	4313      	orrs	r3, r2
 8004c56:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3710      	adds	r7, #16
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}
 8004c62:	bf00      	nop
 8004c64:	40021000 	.word	0x40021000

08004c68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d101      	bne.n	8004c7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e049      	b.n	8004d0e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d106      	bne.n	8004c94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f7fc fae6 	bl	8001260 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2202      	movs	r2, #2
 8004c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	3304      	adds	r3, #4
 8004ca4:	4619      	mov	r1, r3
 8004ca6:	4610      	mov	r0, r2
 8004ca8:	f000 f9f0 	bl	800508c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2201      	movs	r2, #1
 8004d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d0c:	2300      	movs	r3, #0
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3708      	adds	r7, #8
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
	...

08004d18 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b085      	sub	sp, #20
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d001      	beq.n	8004d30 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	e047      	b.n	8004dc0 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2202      	movs	r2, #2
 8004d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a23      	ldr	r2, [pc, #140]	; (8004dcc <HAL_TIM_Base_Start+0xb4>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d01d      	beq.n	8004d7e <HAL_TIM_Base_Start+0x66>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d4a:	d018      	beq.n	8004d7e <HAL_TIM_Base_Start+0x66>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a1f      	ldr	r2, [pc, #124]	; (8004dd0 <HAL_TIM_Base_Start+0xb8>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d013      	beq.n	8004d7e <HAL_TIM_Base_Start+0x66>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a1e      	ldr	r2, [pc, #120]	; (8004dd4 <HAL_TIM_Base_Start+0xbc>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d00e      	beq.n	8004d7e <HAL_TIM_Base_Start+0x66>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a1c      	ldr	r2, [pc, #112]	; (8004dd8 <HAL_TIM_Base_Start+0xc0>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d009      	beq.n	8004d7e <HAL_TIM_Base_Start+0x66>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a1b      	ldr	r2, [pc, #108]	; (8004ddc <HAL_TIM_Base_Start+0xc4>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d004      	beq.n	8004d7e <HAL_TIM_Base_Start+0x66>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a19      	ldr	r2, [pc, #100]	; (8004de0 <HAL_TIM_Base_Start+0xc8>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d115      	bne.n	8004daa <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	689a      	ldr	r2, [r3, #8]
 8004d84:	4b17      	ldr	r3, [pc, #92]	; (8004de4 <HAL_TIM_Base_Start+0xcc>)
 8004d86:	4013      	ands	r3, r2
 8004d88:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2b06      	cmp	r3, #6
 8004d8e:	d015      	beq.n	8004dbc <HAL_TIM_Base_Start+0xa4>
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d96:	d011      	beq.n	8004dbc <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f042 0201 	orr.w	r2, r2, #1
 8004da6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004da8:	e008      	b.n	8004dbc <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f042 0201 	orr.w	r2, r2, #1
 8004db8:	601a      	str	r2, [r3, #0]
 8004dba:	e000      	b.n	8004dbe <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dbc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004dbe:	2300      	movs	r3, #0
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3714      	adds	r7, #20
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr
 8004dcc:	40012c00 	.word	0x40012c00
 8004dd0:	40000400 	.word	0x40000400
 8004dd4:	40000800 	.word	0x40000800
 8004dd8:	40000c00 	.word	0x40000c00
 8004ddc:	40013400 	.word	0x40013400
 8004de0:	40014000 	.word	0x40014000
 8004de4:	00010007 	.word	0x00010007

08004de8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b082      	sub	sp, #8
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	691b      	ldr	r3, [r3, #16]
 8004df6:	f003 0302 	and.w	r3, r3, #2
 8004dfa:	2b02      	cmp	r3, #2
 8004dfc:	d122      	bne.n	8004e44 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	68db      	ldr	r3, [r3, #12]
 8004e04:	f003 0302 	and.w	r3, r3, #2
 8004e08:	2b02      	cmp	r3, #2
 8004e0a:	d11b      	bne.n	8004e44 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f06f 0202 	mvn.w	r2, #2
 8004e14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2201      	movs	r2, #1
 8004e1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	699b      	ldr	r3, [r3, #24]
 8004e22:	f003 0303 	and.w	r3, r3, #3
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d003      	beq.n	8004e32 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f000 f90f 	bl	800504e <HAL_TIM_IC_CaptureCallback>
 8004e30:	e005      	b.n	8004e3e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f000 f901 	bl	800503a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f000 f912 	bl	8005062 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2200      	movs	r2, #0
 8004e42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	691b      	ldr	r3, [r3, #16]
 8004e4a:	f003 0304 	and.w	r3, r3, #4
 8004e4e:	2b04      	cmp	r3, #4
 8004e50:	d122      	bne.n	8004e98 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	f003 0304 	and.w	r3, r3, #4
 8004e5c:	2b04      	cmp	r3, #4
 8004e5e:	d11b      	bne.n	8004e98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f06f 0204 	mvn.w	r2, #4
 8004e68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2202      	movs	r2, #2
 8004e6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	699b      	ldr	r3, [r3, #24]
 8004e76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d003      	beq.n	8004e86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f000 f8e5 	bl	800504e <HAL_TIM_IC_CaptureCallback>
 8004e84:	e005      	b.n	8004e92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f000 f8d7 	bl	800503a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f000 f8e8 	bl	8005062 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	691b      	ldr	r3, [r3, #16]
 8004e9e:	f003 0308 	and.w	r3, r3, #8
 8004ea2:	2b08      	cmp	r3, #8
 8004ea4:	d122      	bne.n	8004eec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	f003 0308 	and.w	r3, r3, #8
 8004eb0:	2b08      	cmp	r3, #8
 8004eb2:	d11b      	bne.n	8004eec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f06f 0208 	mvn.w	r2, #8
 8004ebc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2204      	movs	r2, #4
 8004ec2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	69db      	ldr	r3, [r3, #28]
 8004eca:	f003 0303 	and.w	r3, r3, #3
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d003      	beq.n	8004eda <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f000 f8bb 	bl	800504e <HAL_TIM_IC_CaptureCallback>
 8004ed8:	e005      	b.n	8004ee6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f000 f8ad 	bl	800503a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f000 f8be 	bl	8005062 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	f003 0310 	and.w	r3, r3, #16
 8004ef6:	2b10      	cmp	r3, #16
 8004ef8:	d122      	bne.n	8004f40 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	f003 0310 	and.w	r3, r3, #16
 8004f04:	2b10      	cmp	r3, #16
 8004f06:	d11b      	bne.n	8004f40 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f06f 0210 	mvn.w	r2, #16
 8004f10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2208      	movs	r2, #8
 8004f16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	69db      	ldr	r3, [r3, #28]
 8004f1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d003      	beq.n	8004f2e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f000 f891 	bl	800504e <HAL_TIM_IC_CaptureCallback>
 8004f2c:	e005      	b.n	8004f3a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f000 f883 	bl	800503a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f000 f894 	bl	8005062 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	691b      	ldr	r3, [r3, #16]
 8004f46:	f003 0301 	and.w	r3, r3, #1
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d10e      	bne.n	8004f6c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	68db      	ldr	r3, [r3, #12]
 8004f54:	f003 0301 	and.w	r3, r3, #1
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d107      	bne.n	8004f6c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f06f 0201 	mvn.w	r2, #1
 8004f64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f000 f85d 	bl	8005026 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	691b      	ldr	r3, [r3, #16]
 8004f72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f76:	2b80      	cmp	r3, #128	; 0x80
 8004f78:	d10e      	bne.n	8004f98 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f84:	2b80      	cmp	r3, #128	; 0x80
 8004f86:	d107      	bne.n	8004f98 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004f90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f000 f9a6 	bl	80052e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	691b      	ldr	r3, [r3, #16]
 8004f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fa2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fa6:	d10e      	bne.n	8004fc6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	68db      	ldr	r3, [r3, #12]
 8004fae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fb2:	2b80      	cmp	r3, #128	; 0x80
 8004fb4:	d107      	bne.n	8004fc6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004fbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f000 f999 	bl	80052f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	691b      	ldr	r3, [r3, #16]
 8004fcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fd0:	2b40      	cmp	r3, #64	; 0x40
 8004fd2:	d10e      	bne.n	8004ff2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	68db      	ldr	r3, [r3, #12]
 8004fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fde:	2b40      	cmp	r3, #64	; 0x40
 8004fe0:	d107      	bne.n	8004ff2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004fea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f000 f842 	bl	8005076 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	691b      	ldr	r3, [r3, #16]
 8004ff8:	f003 0320 	and.w	r3, r3, #32
 8004ffc:	2b20      	cmp	r3, #32
 8004ffe:	d10e      	bne.n	800501e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	68db      	ldr	r3, [r3, #12]
 8005006:	f003 0320 	and.w	r3, r3, #32
 800500a:	2b20      	cmp	r3, #32
 800500c:	d107      	bne.n	800501e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f06f 0220 	mvn.w	r2, #32
 8005016:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f000 f959 	bl	80052d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800501e:	bf00      	nop
 8005020:	3708      	adds	r7, #8
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}

08005026 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005026:	b480      	push	{r7}
 8005028:	b083      	sub	sp, #12
 800502a:	af00      	add	r7, sp, #0
 800502c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800502e:	bf00      	nop
 8005030:	370c      	adds	r7, #12
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr

0800503a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800503a:	b480      	push	{r7}
 800503c:	b083      	sub	sp, #12
 800503e:	af00      	add	r7, sp, #0
 8005040:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005042:	bf00      	nop
 8005044:	370c      	adds	r7, #12
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr

0800504e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800504e:	b480      	push	{r7}
 8005050:	b083      	sub	sp, #12
 8005052:	af00      	add	r7, sp, #0
 8005054:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005056:	bf00      	nop
 8005058:	370c      	adds	r7, #12
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr

08005062 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005062:	b480      	push	{r7}
 8005064:	b083      	sub	sp, #12
 8005066:	af00      	add	r7, sp, #0
 8005068:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800506a:	bf00      	nop
 800506c:	370c      	adds	r7, #12
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr

08005076 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005076:	b480      	push	{r7}
 8005078:	b083      	sub	sp, #12
 800507a:	af00      	add	r7, sp, #0
 800507c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800507e:	bf00      	nop
 8005080:	370c      	adds	r7, #12
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr
	...

0800508c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800508c:	b480      	push	{r7}
 800508e:	b085      	sub	sp, #20
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
 8005094:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	4a40      	ldr	r2, [pc, #256]	; (80051a0 <TIM_Base_SetConfig+0x114>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d013      	beq.n	80050cc <TIM_Base_SetConfig+0x40>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050aa:	d00f      	beq.n	80050cc <TIM_Base_SetConfig+0x40>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	4a3d      	ldr	r2, [pc, #244]	; (80051a4 <TIM_Base_SetConfig+0x118>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d00b      	beq.n	80050cc <TIM_Base_SetConfig+0x40>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	4a3c      	ldr	r2, [pc, #240]	; (80051a8 <TIM_Base_SetConfig+0x11c>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d007      	beq.n	80050cc <TIM_Base_SetConfig+0x40>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	4a3b      	ldr	r2, [pc, #236]	; (80051ac <TIM_Base_SetConfig+0x120>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d003      	beq.n	80050cc <TIM_Base_SetConfig+0x40>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	4a3a      	ldr	r2, [pc, #232]	; (80051b0 <TIM_Base_SetConfig+0x124>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d108      	bne.n	80050de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	68fa      	ldr	r2, [r7, #12]
 80050da:	4313      	orrs	r3, r2
 80050dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	4a2f      	ldr	r2, [pc, #188]	; (80051a0 <TIM_Base_SetConfig+0x114>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d01f      	beq.n	8005126 <TIM_Base_SetConfig+0x9a>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050ec:	d01b      	beq.n	8005126 <TIM_Base_SetConfig+0x9a>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	4a2c      	ldr	r2, [pc, #176]	; (80051a4 <TIM_Base_SetConfig+0x118>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d017      	beq.n	8005126 <TIM_Base_SetConfig+0x9a>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4a2b      	ldr	r2, [pc, #172]	; (80051a8 <TIM_Base_SetConfig+0x11c>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d013      	beq.n	8005126 <TIM_Base_SetConfig+0x9a>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4a2a      	ldr	r2, [pc, #168]	; (80051ac <TIM_Base_SetConfig+0x120>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d00f      	beq.n	8005126 <TIM_Base_SetConfig+0x9a>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4a29      	ldr	r2, [pc, #164]	; (80051b0 <TIM_Base_SetConfig+0x124>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d00b      	beq.n	8005126 <TIM_Base_SetConfig+0x9a>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4a28      	ldr	r2, [pc, #160]	; (80051b4 <TIM_Base_SetConfig+0x128>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d007      	beq.n	8005126 <TIM_Base_SetConfig+0x9a>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a27      	ldr	r2, [pc, #156]	; (80051b8 <TIM_Base_SetConfig+0x12c>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d003      	beq.n	8005126 <TIM_Base_SetConfig+0x9a>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a26      	ldr	r2, [pc, #152]	; (80051bc <TIM_Base_SetConfig+0x130>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d108      	bne.n	8005138 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800512c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	68fa      	ldr	r2, [r7, #12]
 8005134:	4313      	orrs	r3, r2
 8005136:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	695b      	ldr	r3, [r3, #20]
 8005142:	4313      	orrs	r3, r2
 8005144:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	68fa      	ldr	r2, [r7, #12]
 800514a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	689a      	ldr	r2, [r3, #8]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	4a10      	ldr	r2, [pc, #64]	; (80051a0 <TIM_Base_SetConfig+0x114>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d00f      	beq.n	8005184 <TIM_Base_SetConfig+0xf8>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	4a12      	ldr	r2, [pc, #72]	; (80051b0 <TIM_Base_SetConfig+0x124>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d00b      	beq.n	8005184 <TIM_Base_SetConfig+0xf8>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	4a11      	ldr	r2, [pc, #68]	; (80051b4 <TIM_Base_SetConfig+0x128>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d007      	beq.n	8005184 <TIM_Base_SetConfig+0xf8>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	4a10      	ldr	r2, [pc, #64]	; (80051b8 <TIM_Base_SetConfig+0x12c>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d003      	beq.n	8005184 <TIM_Base_SetConfig+0xf8>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	4a0f      	ldr	r2, [pc, #60]	; (80051bc <TIM_Base_SetConfig+0x130>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d103      	bne.n	800518c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	691a      	ldr	r2, [r3, #16]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2201      	movs	r2, #1
 8005190:	615a      	str	r2, [r3, #20]
}
 8005192:	bf00      	nop
 8005194:	3714      	adds	r7, #20
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr
 800519e:	bf00      	nop
 80051a0:	40012c00 	.word	0x40012c00
 80051a4:	40000400 	.word	0x40000400
 80051a8:	40000800 	.word	0x40000800
 80051ac:	40000c00 	.word	0x40000c00
 80051b0:	40013400 	.word	0x40013400
 80051b4:	40014000 	.word	0x40014000
 80051b8:	40014400 	.word	0x40014400
 80051bc:	40014800 	.word	0x40014800

080051c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b085      	sub	sp, #20
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
 80051c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d101      	bne.n	80051d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051d4:	2302      	movs	r3, #2
 80051d6:	e068      	b.n	80052aa <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2202      	movs	r2, #2
 80051e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a2e      	ldr	r2, [pc, #184]	; (80052b8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d004      	beq.n	800520c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a2d      	ldr	r2, [pc, #180]	; (80052bc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d108      	bne.n	800521e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005212:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	68fa      	ldr	r2, [r7, #12]
 800521a:	4313      	orrs	r3, r2
 800521c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005224:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	68fa      	ldr	r2, [r7, #12]
 800522c:	4313      	orrs	r3, r2
 800522e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	68fa      	ldr	r2, [r7, #12]
 8005236:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a1e      	ldr	r2, [pc, #120]	; (80052b8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d01d      	beq.n	800527e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800524a:	d018      	beq.n	800527e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a1b      	ldr	r2, [pc, #108]	; (80052c0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d013      	beq.n	800527e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a1a      	ldr	r2, [pc, #104]	; (80052c4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d00e      	beq.n	800527e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a18      	ldr	r2, [pc, #96]	; (80052c8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d009      	beq.n	800527e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a13      	ldr	r2, [pc, #76]	; (80052bc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d004      	beq.n	800527e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a14      	ldr	r2, [pc, #80]	; (80052cc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d10c      	bne.n	8005298 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005284:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	68ba      	ldr	r2, [r7, #8]
 800528c:	4313      	orrs	r3, r2
 800528e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	68ba      	ldr	r2, [r7, #8]
 8005296:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2201      	movs	r2, #1
 800529c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2200      	movs	r2, #0
 80052a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052a8:	2300      	movs	r3, #0
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3714      	adds	r7, #20
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr
 80052b6:	bf00      	nop
 80052b8:	40012c00 	.word	0x40012c00
 80052bc:	40013400 	.word	0x40013400
 80052c0:	40000400 	.word	0x40000400
 80052c4:	40000800 	.word	0x40000800
 80052c8:	40000c00 	.word	0x40000c00
 80052cc:	40014000 	.word	0x40014000

080052d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b083      	sub	sp, #12
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80052d8:	bf00      	nop
 80052da:	370c      	adds	r7, #12
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr

080052e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b083      	sub	sp, #12
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80052ec:	bf00      	nop
 80052ee:	370c      	adds	r7, #12
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr

080052f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b083      	sub	sp, #12
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005300:	bf00      	nop
 8005302:	370c      	adds	r7, #12
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr

0800530c <__libc_init_array>:
 800530c:	b570      	push	{r4, r5, r6, lr}
 800530e:	4d0d      	ldr	r5, [pc, #52]	; (8005344 <__libc_init_array+0x38>)
 8005310:	4c0d      	ldr	r4, [pc, #52]	; (8005348 <__libc_init_array+0x3c>)
 8005312:	1b64      	subs	r4, r4, r5
 8005314:	10a4      	asrs	r4, r4, #2
 8005316:	2600      	movs	r6, #0
 8005318:	42a6      	cmp	r6, r4
 800531a:	d109      	bne.n	8005330 <__libc_init_array+0x24>
 800531c:	4d0b      	ldr	r5, [pc, #44]	; (800534c <__libc_init_array+0x40>)
 800531e:	4c0c      	ldr	r4, [pc, #48]	; (8005350 <__libc_init_array+0x44>)
 8005320:	f000 f820 	bl	8005364 <_init>
 8005324:	1b64      	subs	r4, r4, r5
 8005326:	10a4      	asrs	r4, r4, #2
 8005328:	2600      	movs	r6, #0
 800532a:	42a6      	cmp	r6, r4
 800532c:	d105      	bne.n	800533a <__libc_init_array+0x2e>
 800532e:	bd70      	pop	{r4, r5, r6, pc}
 8005330:	f855 3b04 	ldr.w	r3, [r5], #4
 8005334:	4798      	blx	r3
 8005336:	3601      	adds	r6, #1
 8005338:	e7ee      	b.n	8005318 <__libc_init_array+0xc>
 800533a:	f855 3b04 	ldr.w	r3, [r5], #4
 800533e:	4798      	blx	r3
 8005340:	3601      	adds	r6, #1
 8005342:	e7f2      	b.n	800532a <__libc_init_array+0x1e>
 8005344:	080053bc 	.word	0x080053bc
 8005348:	080053bc 	.word	0x080053bc
 800534c:	080053bc 	.word	0x080053bc
 8005350:	080053c0 	.word	0x080053c0

08005354 <memset>:
 8005354:	4402      	add	r2, r0
 8005356:	4603      	mov	r3, r0
 8005358:	4293      	cmp	r3, r2
 800535a:	d100      	bne.n	800535e <memset+0xa>
 800535c:	4770      	bx	lr
 800535e:	f803 1b01 	strb.w	r1, [r3], #1
 8005362:	e7f9      	b.n	8005358 <memset+0x4>

08005364 <_init>:
 8005364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005366:	bf00      	nop
 8005368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800536a:	bc08      	pop	{r3}
 800536c:	469e      	mov	lr, r3
 800536e:	4770      	bx	lr

08005370 <_fini>:
 8005370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005372:	bf00      	nop
 8005374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005376:	bc08      	pop	{r3}
 8005378:	469e      	mov	lr, r3
 800537a:	4770      	bx	lr
